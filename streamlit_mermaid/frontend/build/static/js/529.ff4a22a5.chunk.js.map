{"version":3,"file":"static/js/529.ff4a22a5.chunk.js","mappings":"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","sources":["../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-76Q3JFCE.mjs","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FPAJGGOC.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FWNWRKHM.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-LBM3YZW2.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-LHMN2FUI.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-O7ZBX7Z2.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-S6J4BHB3.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-T53DSG4Q.mjs","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/langium/src/dependency-injection.ts","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/last.js","../node_modules/lodash-es/map.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/toInteger.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts"],"sourcesContent":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\r\nimport type { Module } from '../dependency-injection.js';\r\nimport { inject } from '../dependency-injection.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\r\nimport type { Mutable } from '../syntax-tree.js';\r\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\r\nimport { URI } from './uri-utils.js';\r\n\r\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\r\n    Grammar: () => undefined as unknown as ast.Grammar,\r\n    LanguageMetaData: () => ({\r\n        caseInsensitive: false,\r\n        fileExtensions: ['.langium'],\r\n        languageId: 'langium'\r\n    })\r\n};\r\n\r\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\r\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\r\n};\r\n\r\nfunction createMinimalGrammarServices(): LangiumCoreServices {\r\n    const shared = inject(\r\n        createDefaultSharedCoreModule(EmptyFileSystem),\r\n        minimalSharedGrammarModule\r\n    );\r\n    const grammar = inject(\r\n        createDefaultCoreModule({ shared }),\r\n        minimalGrammarModule\r\n    );\r\n    shared.ServiceRegistry.register(grammar);\r\n    return grammar;\r\n}\r\n\r\n/**\r\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\r\n * most notably the parser builder which interprets the grammar to create a parser.\r\n */\r\nexport function loadGrammarFromJson(json: string): ast.Grammar {\r\n    const services = createMinimalGrammarServices();\r\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\r\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\r\n    return astNode;\r\n}\r\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Axis = \"Axis\";\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar ClassDefStatement = \"ClassDefStatement\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Curve = \"Curve\";\nvar Edge = \"Edge\";\nvar Entry = \"Entry\";\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Group = \"Group\";\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Item = \"Item\";\nvar Junction = \"Junction\";\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Option = \"Option\";\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Radar = \"Radar\";\nvar Service = \"Service\";\nvar Treemap = \"Treemap\";\nfunction isTreemap(item) {\n  return reflection.isInstance(item, Treemap);\n}\n__name(isTreemap, \"isTreemap\");\nvar TreemapRow = \"TreemapRow\";\nvar Direction = \"Direction\";\nvar Leaf = \"Leaf\";\nvar Section = \"Section\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [Architecture, Axis, Branch, Checkout, CherryPicking, ClassDefStatement, Commit, Curve, Direction, Edge, Entry, GitGraph, Group, Info, Item, Junction, Leaf, Merge, Option, Packet, PacketBlock, Pie, PieSection, Radar, Section, Service, Statement, Treemap, TreemapRow];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      case Leaf:\n      case Section: {\n        return this.isSubtype(Item, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      case \"Entry:axis\": {\n        return Axis;\n      }\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case Architecture: {\n        return {\n          name: Architecture,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Axis: {\n        return {\n          name: Axis,\n          properties: [\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Branch: {\n        return {\n          name: Branch,\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case Checkout: {\n        return {\n          name: Checkout,\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case CherryPicking: {\n        return {\n          name: CherryPicking,\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case ClassDefStatement: {\n        return {\n          name: ClassDefStatement,\n          properties: [\n            { name: \"className\" },\n            { name: \"styleText\" }\n          ]\n        };\n      }\n      case Commit: {\n        return {\n          name: Commit,\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Curve: {\n        return {\n          name: Curve,\n          properties: [\n            { name: \"entries\", defaultValue: [] },\n            { name: \"label\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Edge: {\n        return {\n          name: Edge,\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Entry: {\n        return {\n          name: Entry,\n          properties: [\n            { name: \"axis\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case GitGraph: {\n        return {\n          name: GitGraph,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Group: {\n        return {\n          name: Group,\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Info: {\n        return {\n          name: Info,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Item: {\n        return {\n          name: Item,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      case Junction: {\n        return {\n          name: Junction,\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case Merge: {\n        return {\n          name: Merge,\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case Option: {\n        return {\n          name: Option,\n          properties: [\n            { name: \"name\" },\n            { name: \"value\", defaultValue: false }\n          ]\n        };\n      }\n      case Packet: {\n        return {\n          name: Packet,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PacketBlock: {\n        return {\n          name: PacketBlock,\n          properties: [\n            { name: \"bits\" },\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case Pie: {\n        return {\n          name: Pie,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case PieSection: {\n        return {\n          name: PieSection,\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Radar: {\n        return {\n          name: Radar,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"axes\", defaultValue: [] },\n            { name: \"curves\", defaultValue: [] },\n            { name: \"options\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Service: {\n        return {\n          name: Service,\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Treemap: {\n        return {\n          name: Treemap,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" },\n            { name: \"TreemapRows\", defaultValue: [] }\n          ]\n        };\n      }\n      case TreemapRow: {\n        return {\n          name: TreemapRow,\n          properties: [\n            { name: \"indent\" },\n            { name: \"item\" }\n          ]\n        };\n      }\n      case Direction: {\n        return {\n          name: Direction,\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case Leaf: {\n        return {\n          name: Leaf,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case Section: {\n        return {\n          name: Section,\n          properties: [\n            { name: \"classSelector\" },\n            { name: \"name\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Info\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Packet\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"packet\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"bits\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]}]},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Pie\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/-?[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/-?(0|[1-9][0-9]*)(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER_PIE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Architecture\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"LeftPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"RightPort\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Arrow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@28\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@29\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"GitGraph\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@24\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"name\":\"REFERENCE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\nvar loadedRadarGrammar;\nvar RadarGrammar = /* @__PURE__ */ __name(() => loadedRadarGrammar ?? (loadedRadarGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Radar\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Radar\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\"radar-beta:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"radar-beta\"},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"axis\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"axes\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"curve\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"curves\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"Assignment\",\"feature\":\"options\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Label\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"[\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"]\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Axis\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Curve\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\"{\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\"}\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"Entries\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\",\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Assignment\",\"feature\":\"entries\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"DetailedEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"axis\",\"operator\":\"=\",\"terminal\":{\"$type\":\"CrossReference\",\"type\":{\"$ref\":\"#/rules@2\"},\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"deprecatedSyntax\":false}},{\"$type\":\"Keyword\",\"value\":\":\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"NumberEntry\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Option\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showLegend\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"ticks\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"max\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"min\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"graticule\"}},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"GRATICULE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"circle\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"polygon\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"EOL\",\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"FLOAT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+\\\\\\\\.[0-9]+(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*(?!\\\\\\\\.)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"}},{\"$type\":\"TerminalRuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"([^\\\\\"\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*\\\\\"|'([^'\\\\\\\\\\\\\\\\]|\\\\\\\\\\\\\\\\.)*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]([-\\\\\\\\w]*\\\\\\\\w)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Entry\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"axis\",\"isOptional\":true,\"type\":{\"$type\":\"ReferenceType\",\"referenceType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@2\"}}}},{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"types\":[],\"usedGrammars\":[]}`)), \"RadarGrammar\");\nvar loadedTreemapGrammar;\nvar TreemapGrammar = /* @__PURE__ */ __name(() => loadedTreemapGrammar ?? (loadedTreemapGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Treemap\",\"rules\":[{\"$type\":\"ParserRule\",\"fragment\":true,\"name\":\"TitleAndAccessibilities\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"BOOLEAN\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"boolean\"},\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"true\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"false\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"entry\":true,\"name\":\"Treemap\",\"returnType\":{\"$ref\":\"#/interfaces@4\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"TreemapRows\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]}}],\"cardinality\":\"*\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"TREEMAP_KEYWORD\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap-beta\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"treemap\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"CLASS_DEF\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/classDef\\\\\\\\s+([a-zA-Z_][a-zA-Z0-9_]+)(?:\\\\\\\\s+([^;\\\\\\\\r\\\\\\\\n]*))?(?:;)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STYLE_SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":::\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"SEPARATOR\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\":\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"COMMA\",\"definition\":{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\",\"}},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WS\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"ML_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\%\\\\\\\\%[^\\\\\\\\n]*/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"NL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"TreemapRow\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"indent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"item\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]}]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"ClassDef\",\"dataType\":\"string\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Item\",\"returnType\":{\"$ref\":\"#/interfaces@0\"},\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Section\",\"returnType\":{\"$ref\":\"#/interfaces@1\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Leaf\",\"returnType\":{\"$ref\":\"#/interfaces@2\"},\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@23\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@22\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"classSelector\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INDENTATION\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[ \\\\\\\\t]{1,}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[a-zA-Z_][a-zA-Z0-9_]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"NUMBER2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9_\\\\\\\\.\\\\\\\\,]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"MyNumber\",\"dataType\":\"number\",\"definition\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING2\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Item\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"name\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"classSelector\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Section\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[]},{\"$type\":\"Interface\",\"name\":\"Leaf\",\"superTypes\":[{\"$ref\":\"#/interfaces@0\"}],\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"value\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"number\"},\"isOptional\":false}]},{\"$type\":\"Interface\",\"name\":\"ClassDefStatement\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"className\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"styleText\",\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"},\"isOptional\":false}],\"superTypes\":[]},{\"$type\":\"Interface\",\"name\":\"Treemap\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"TreemapRows\",\"type\":{\"$type\":\"ArrayType\",\"elementType\":{\"$type\":\"SimpleType\",\"typeRef\":{\"$ref\":\"#/rules@14\"}}},\"isOptional\":false},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[],\"$comment\":\"/**\\\\n * Treemap grammar for Langium\\\\n * Converted from mindmap grammar\\\\n *\\\\n * The ML_COMMENT and NL hidden terminals handle whitespace, comments, and newlines\\\\n * before the treemap keyword, allowing for empty lines and comments before the\\\\n * treemap declaration.\\\\n */\"}`)), \"TreemapGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar RadarLanguageMetaData = {\n  languageId: \"radar\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar TreemapLanguageMetaData = {\n  languageId: \"treemap\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false,\n  mode: \"production\"\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar RadarGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => RadarGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => RadarLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar TreemapGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => TreemapGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => TreemapLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  Radar,\n  Treemap,\n  isTreemap,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  RadarGeneratedModule,\n  TreemapGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-FPAJGGOC.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-S6J4BHB3.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-LBM3YZW2.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-76Q3JFCE.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-T53DSG4Q.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-O7ZBX7Z2.mjs\";\nimport {\n  RadarModule,\n  createRadarServices\n} from \"./chunks/mermaid-parser.core/chunk-LHMN2FUI.mjs\";\nimport {\n  TreemapModule,\n  createTreemapServices\n} from \"./chunks/mermaid-parser.core/chunk-FWNWRKHM.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap\n} from \"./chunks/mermaid-parser.core/chunk-FPAJGGOC.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-NVLQJR56.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-BFZMPI3H.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-7BOR55EZ.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-U656AL7Q.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-F6HP7TQM.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\"),\n  radar: /* @__PURE__ */ __name(async () => {\n    const { createRadarServices: createRadarServices2 } = await import(\"./chunks/mermaid-parser.core/radar-NHE76QYJ.mjs\");\n    const parser = createRadarServices2().Radar.parser.LangiumParser;\n    parsers.radar = parser;\n  }, \"radar\"),\n  treemap: /* @__PURE__ */ __name(async () => {\n    const { createTreemapServices: createTreemapServices2 } = await import(\"./chunks/mermaid-parser.core/treemap-KMMF4GRG.mjs\");\n    const parser = createTreemapServices2().Treemap.parser.LangiumParser;\n    parsers.treemap = parser;\n  }, \"treemap\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Radar,\n  RadarGeneratedModule,\n  RadarModule,\n  Statement,\n  Treemap,\n  TreemapGeneratedModule,\n  TreemapModule,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  createRadarServices,\n  createTreemapServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  isTreemap,\n  parse\n};\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken, TokenType } from 'chevrotain';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AbstractElement } from '../languages/generated/ast.js';\r\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\r\nimport { Position } from 'vscode-languageserver-types';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\n\r\nexport class CstNodeBuilder {\r\n\r\n    private rootNode!: RootCstNodeImpl;\r\n    private nodeStack: CompositeCstNodeImpl[] = [];\r\n\r\n    get current(): CompositeCstNodeImpl {\r\n        return this.nodeStack[this.nodeStack.length - 1] ?? this.rootNode;\r\n    }\r\n\r\n    buildRootNode(input: string): RootCstNode {\r\n        this.rootNode = new RootCstNodeImpl(input);\r\n        this.rootNode.root = this.rootNode;\r\n        this.nodeStack = [this.rootNode];\r\n        return this.rootNode;\r\n    }\r\n\r\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\r\n        const compositeNode = new CompositeCstNodeImpl();\r\n        compositeNode.grammarSource = feature;\r\n        compositeNode.root = this.rootNode;\r\n        this.current.content.push(compositeNode);\r\n        this.nodeStack.push(compositeNode);\r\n        return compositeNode;\r\n    }\r\n\r\n    buildLeafNode(token: IToken, feature?: AbstractElement): LeafCstNode {\r\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, !feature);\r\n        leafNode.grammarSource = feature;\r\n        leafNode.root = this.rootNode;\r\n        this.current.content.push(leafNode);\r\n        return leafNode;\r\n    }\r\n\r\n    removeNode(node: CstNode): void {\r\n        const parent = node.container;\r\n        if (parent) {\r\n            const index = parent.content.indexOf(node);\r\n            if (index >= 0) {\r\n                parent.content.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    addHiddenNodes(tokens: IToken[]): void {\r\n        const nodes: LeafCstNode[] = [];\r\n        for (const token of tokens) {\r\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\r\n            leafNode.root = this.rootNode;\r\n            nodes.push(leafNode);\r\n        }\r\n        let current: CompositeCstNode = this.current;\r\n        let added = false;\r\n        // If we are within a composite node, we add the hidden nodes to the content\r\n        if (current.content.length > 0) {\r\n            current.content.push(...nodes);\r\n            return;\r\n        }\r\n        // Otherwise we are at a newly created node\r\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\r\n        while (current.container) {\r\n            const index = current.container.content.indexOf(current);\r\n            if (index > 0) {\r\n                // Add the hidden nodes before the current node\r\n                current.container.content.splice(index, 0, ...nodes);\r\n                added = true;\r\n                break;\r\n            }\r\n            current = current.container;\r\n        }\r\n        // If we arrive at the root node, we add the hidden nodes at the beginning\r\n        // This is the case if the hidden nodes are the first nodes in the tree\r\n        if (!added) {\r\n            this.rootNode.content.unshift(...nodes);\r\n        }\r\n    }\r\n\r\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\r\n        const current: CstNode = this.current;\r\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\r\n        // Only if the $type is a string, we actually assign the element\r\n        if (typeof item.$type === 'string') {\r\n            this.current.astNode = <AstNode>item;\r\n        }\r\n        item.$cstNode = current;\r\n        const node = this.nodeStack.pop();\r\n        // Empty composite nodes are not valid\r\n        // Simply remove the node from the tree\r\n        if (node?.content.length === 0) {\r\n            this.removeNode(node);\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class AbstractCstNode implements CstNode {\r\n    abstract get offset(): number;\r\n    abstract get length(): number;\r\n    abstract get end(): number;\r\n    abstract get range(): Range;\r\n\r\n    container?: CompositeCstNode;\r\n    grammarSource?: AbstractElement;\r\n    root: RootCstNode;\r\n    private _astNode?: AstNode;\r\n\r\n    /** @deprecated use `container` instead. */\r\n    get parent(): CompositeCstNode | undefined {\r\n        return this.container;\r\n    }\r\n\r\n    /** @deprecated use `grammarSource` instead. */\r\n    get feature(): AbstractElement | undefined {\r\n        return this.grammarSource;\r\n    }\r\n\r\n    get hidden(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get astNode(): AstNode {\r\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\r\n        if (!node) {\r\n            throw new Error('This node has no associated AST element');\r\n        }\r\n        return node;\r\n    }\r\n\r\n    set astNode(value: AstNode | undefined) {\r\n        this._astNode = value;\r\n    }\r\n\r\n    /** @deprecated use `astNode` instead. */\r\n    get element(): AstNode {\r\n        return this.astNode;\r\n    }\r\n\r\n    get text(): string {\r\n        return this.root.fullText.substring(this.offset, this.end);\r\n    }\r\n}\r\n\r\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\r\n    get offset(): number {\r\n        return this._offset;\r\n    }\r\n\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._offset + this._length;\r\n    }\r\n\r\n    override get hidden(): boolean {\r\n        return this._hidden;\r\n    }\r\n\r\n    get tokenType(): TokenType {\r\n        return this._tokenType;\r\n    }\r\n\r\n    get range(): Range {\r\n        return this._range;\r\n    }\r\n\r\n    private _hidden: boolean;\r\n    private _offset: number;\r\n    private _length: number;\r\n    private _range: Range;\r\n    private _tokenType: TokenType;\r\n\r\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\r\n        super();\r\n        this._hidden = hidden;\r\n        this._offset = offset;\r\n        this._tokenType = tokenType;\r\n        this._length = length;\r\n        this._range = range;\r\n    }\r\n}\r\n\r\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\r\n    readonly content: CstNode[] = new CstNodeContainer(this);\r\n    private _rangeCache?: Range;\r\n\r\n    /** @deprecated use `content` instead. */\r\n    get children(): CstNode[] {\r\n        return this.content;\r\n    }\r\n\r\n    get offset(): number {\r\n        return this.firstNonHiddenNode?.offset ?? 0;\r\n    }\r\n\r\n    get length(): number {\r\n        return this.end - this.offset;\r\n    }\r\n\r\n    get end(): number {\r\n        return this.lastNonHiddenNode?.end ?? 0;\r\n    }\r\n\r\n    get range(): Range {\r\n        const firstNode = this.firstNonHiddenNode;\r\n        const lastNode = this.lastNonHiddenNode;\r\n        if (firstNode && lastNode) {\r\n            if (this._rangeCache === undefined) {\r\n                const { range: firstRange } = firstNode;\r\n                const { range: lastRange } = lastNode;\r\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\r\n            }\r\n            return this._rangeCache;\r\n        } else {\r\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\r\n        }\r\n    }\r\n\r\n    private get firstNonHiddenNode(): CstNode | undefined {\r\n        for (const child of this.content) {\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[0];\r\n    }\r\n\r\n    private get lastNonHiddenNode(): CstNode | undefined {\r\n        for (let i = this.content.length - 1; i >= 0; i--) {\r\n            const child = this.content[i];\r\n            if (!child.hidden) {\r\n                return child;\r\n            }\r\n        }\r\n        return this.content[this.content.length - 1];\r\n    }\r\n}\r\n\r\nclass CstNodeContainer extends Array<CstNode> {\r\n    readonly parent: CompositeCstNode;\r\n\r\n    constructor(parent: CompositeCstNode) {\r\n        super();\r\n        this.parent = parent;\r\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\r\n    }\r\n\r\n    override push(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.push(...items);\r\n    }\r\n\r\n    override unshift(...items: CstNode[]): number {\r\n        this.addParents(items);\r\n        return super.unshift(...items);\r\n    }\r\n\r\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\r\n        this.addParents(items);\r\n        return super.splice(start, count, ...items);\r\n    }\r\n\r\n    private addParents(items: CstNode[]): void {\r\n        for (const item of items) {\r\n            (<AbstractCstNode>item).container = this.parent;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\r\n    private _text = '';\r\n\r\n    override get text(): string {\r\n        return this._text.substring(this.offset, this.end);\r\n    }\r\n\r\n    get fullText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    constructor(input?: string) {\r\n        super();\r\n        this._text = input ?? '';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\r\nimport type { Lexer, LexerResult } from './lexer.js';\r\nimport type { IParserConfig } from './parser-config.js';\r\nimport type { ValueConverter } from './value-converter.js';\r\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\r\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\r\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\r\nimport { getExplicitRuleType, isDataTypeRule } from '../utils/grammar-utils.js';\r\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\r\nimport { CstNodeBuilder } from './cst-node-builder.js';\r\nimport type { LexingReport } from './token-builder.js';\r\n\r\nexport type ParseResult<T = AstNode> = {\r\n    value: T,\r\n    parserErrors: IRecognitionException[],\r\n    lexerErrors: ILexingError[],\r\n    lexerReport?: LexingReport\r\n}\r\n\r\nexport const DatatypeSymbol = Symbol('Datatype');\r\n\r\ninterface DataTypeNode {\r\n    $cstNode: CompositeCstNode\r\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\r\n    $type: symbol\r\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\r\n    value: string\r\n}\r\n\r\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\r\n    return node.$type === DatatypeSymbol;\r\n}\r\n\r\ntype RuleResult = (args: Args) => any;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype RuleImpl = (args: Args) => any;\r\n\r\ninterface AssignmentElement {\r\n    assignment?: Assignment\r\n    isCrossRef: boolean\r\n}\r\n\r\n/**\r\n * Base interface for all parsers. Mainly used by the `parser-builder-base.ts` to perform work on different kinds of parsers.\r\n * The main use cases are:\r\n * * AST parser: Based on a string, create an AST for the current grammar\r\n * * Completion parser: Based on a partial string, identify the current position of the input within the grammar\r\n */\r\nexport interface BaseParser {\r\n    /**\r\n     * Adds a new parser rule to the parser\r\n     */\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    /**\r\n     * Returns the executable rule function for the specified rule name\r\n     */\r\n    getRule(name: string): RuleResult | undefined;\r\n    /**\r\n     * Performs alternatives parsing (the `|` operation in EBNF/Langium)\r\n     */\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\r\n    /**\r\n     * Parses the callback as optional (the `?` operation in EBNF/Langium)\r\n     */\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 0 or more times (the `*` operation in EBNF/Langium)\r\n     */\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Parses the callback 1 or more times (the `+` operation in EBNF/Langium)\r\n     */\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\r\n    /**\r\n     * Consumes a specific token type from the token input stream.\r\n     * Requires a unique index within the rule for a specific token type.\r\n     */\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    /**\r\n     * Invokes the executable function for a given parser rule.\r\n     * Requires a unique index within the rule for a specific sub rule.\r\n     * Arguments can be supplied to the rule invocation for semantic predicates\r\n     */\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    /**\r\n     * Executes a grammar action that modifies the currently active AST node\r\n     */\r\n    action($type: string, action: Action): void;\r\n    /**\r\n     * Finishes construction of the current AST node. Only used by the AST parser.\r\n     */\r\n    construct(): unknown;\r\n    /**\r\n     * Whether the parser is currently actually in use or in \"recording mode\".\r\n     * Recording mode is activated once when the parser is analyzing itself.\r\n     * During this phase, no input exists and therefore no AST should be constructed\r\n     */\r\n    isRecording(): boolean;\r\n    /**\r\n     * Current state of the unordered groups\r\n     */\r\n    get unorderedGroups(): Map<string, boolean[]>;\r\n    /**\r\n     * The rule stack indicates the indices of rules that are currently invoked,\r\n     * in order of their invocation.\r\n     */\r\n    getRuleStack(): number[];\r\n}\r\n\r\nconst ruleSuffix = '\\u200B';\r\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\r\n\r\nexport abstract class AbstractLangiumParser implements BaseParser {\r\n\r\n    protected readonly lexer: Lexer;\r\n    protected readonly wrapper: ChevrotainWrapper;\r\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\r\n\r\n    protected allRules = new Map<string, RuleResult>();\r\n    protected mainRule!: RuleResult;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.lexer = services.parser.Lexer;\r\n        const tokens = this.lexer.definition;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.wrapper = new ChevrotainWrapper(tokens, {\r\n            ...services.parser.ParserConfig,\r\n            skipValidations: production,\r\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\r\n        });\r\n    }\r\n\r\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.wrapper.wrapOr(idx, choices);\r\n    }\r\n\r\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapOption(idx, callback);\r\n    }\r\n\r\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapMany(idx, callback);\r\n    }\r\n\r\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.wrapper.wrapAtLeastOne(idx, callback);\r\n    }\r\n\r\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\r\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\r\n    abstract subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void;\r\n    abstract action($type: string, action: Action): void;\r\n    abstract construct(): unknown;\r\n\r\n    getRule(name: string): RuleResult | undefined {\r\n        return this.allRules.get(name);\r\n    }\r\n\r\n    isRecording(): boolean {\r\n        return this.wrapper.IS_RECORDING;\r\n    }\r\n\r\n    get unorderedGroups(): Map<string, boolean[]> {\r\n        return this._unorderedGroups;\r\n    }\r\n\r\n    getRuleStack(): number[] {\r\n        return (this.wrapper as any).RULE_STACK;\r\n    }\r\n\r\n    finalize(): void {\r\n        this.wrapper.wrapSelfAnalysis();\r\n    }\r\n}\r\n\r\nexport interface ParserOptions {\r\n    rule?: string\r\n}\r\n\r\nexport class LangiumParser extends AbstractLangiumParser {\r\n    private readonly linker: Linker;\r\n    private readonly converter: ValueConverter;\r\n    private readonly astReflection: AstReflection;\r\n    private readonly nodeBuilder = new CstNodeBuilder();\r\n    private lexerResult?: LexerResult;\r\n    private stack: any[] = [];\r\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\r\n\r\n    private get current(): any {\r\n        return this.stack[this.stack.length - 1];\r\n    }\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        super(services);\r\n        this.linker = services.references.Linker;\r\n        this.converter = services.parser.ValueConverter;\r\n        this.astReflection = services.shared.AstReflection;\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const type = this.computeRuleType(rule);\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private computeRuleType(rule: ParserRule): string | symbol | undefined {\r\n        if (rule.fragment) {\r\n            return undefined;\r\n        } else if (isDataTypeRule(rule)) {\r\n            return DatatypeSymbol;\r\n        } else {\r\n            const explicit = getExplicitRuleType(rule);\r\n            return explicit ?? rule.name;\r\n        }\r\n    }\r\n\r\n    parse<T extends AstNode = AstNode>(input: string, options: ParserOptions = {}): ParseResult<T> {\r\n        this.nodeBuilder.buildRootNode(input);\r\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\r\n        this.wrapper.input = lexerResult.tokens;\r\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\r\n        if (!ruleMethod) {\r\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\r\n        }\r\n        const result = ruleMethod.call(this.wrapper, {});\r\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\r\n        this.unorderedGroups.clear();\r\n        this.lexerResult = undefined;\r\n        return {\r\n            value: result,\r\n            lexerErrors: lexerResult.errors,\r\n            lexerReport: lexerResult.report,\r\n            parserErrors: this.wrapper.errors\r\n        };\r\n    }\r\n\r\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            // Only create a new AST node in case the calling rule is not a fragment rule\r\n            const createNode = !this.isRecording() && $type !== undefined;\r\n            if (createNode) {\r\n                const node: any = { $type };\r\n                this.stack.push(node);\r\n                if ($type === DatatypeSymbol) {\r\n                    node.value = '';\r\n                }\r\n            }\r\n            let result: unknown;\r\n            try {\r\n                result = implementation(args);\r\n            } catch (err) {\r\n                result = undefined;\r\n            }\r\n            if (result === undefined && createNode) {\r\n                result = this.construct();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n\r\n    private extractHiddenTokens(token: IToken): IToken[] {\r\n        const hiddenTokens = this.lexerResult!.hidden;\r\n        if (!hiddenTokens.length) {\r\n            return [];\r\n        }\r\n        const offset = token.startOffset;\r\n        for (let i = 0; i < hiddenTokens.length; i++) {\r\n            const token = hiddenTokens[i];\r\n            if (token.startOffset > offset) {\r\n                return hiddenTokens.splice(0, i);\r\n            }\r\n        }\r\n        return hiddenTokens.splice(0, hiddenTokens.length);\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        const token = this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording() && this.isValidToken(token)) {\r\n            const hiddenTokens = this.extractHiddenTokens(token);\r\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\r\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\r\n            const { assignment, isCrossRef } = this.getAssignment(feature);\r\n            const current = this.current;\r\n            if (assignment) {\r\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\r\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\r\n            } else if (isDataTypeNode(current)) {\r\n                let text = token.image;\r\n                if (!isKeyword(feature)) {\r\n                    text = this.converter.convert(text, leafNode).toString();\r\n                }\r\n                current.value += text;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\r\n     *\r\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\r\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\r\n     */\r\n    private isValidToken(token: IToken): boolean {\r\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        let cstNode: CompositeCstNode | undefined;\r\n        if (!this.isRecording() && !fragment) {\r\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\r\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\r\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\r\n            // This is intended, as fragment rules only enrich the current AST node\r\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\r\n        }\r\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\r\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\r\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\r\n        }\r\n    }\r\n\r\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\r\n        const { assignment, isCrossRef } = this.getAssignment(feature);\r\n        if (assignment) {\r\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\r\n        } else if (!assignment) {\r\n            // If we call a subrule without an assignment we either:\r\n            // 1. append the result of the subrule (data type rule)\r\n            // 2. override the current object with the newly parsed object\r\n            // If the current element is an AST node and the result of the subrule\r\n            // is a data type rule, we can safely discard the results.\r\n            const current = this.current;\r\n            if (isDataTypeNode(current)) {\r\n                current.value += result.toString();\r\n            } else if (typeof result === 'object' && result) {\r\n                const object = this.assignWithoutOverride(result, current);\r\n                const newItem = object;\r\n                this.stack.pop();\r\n                this.stack.push(newItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    action($type: string, action: Action): void {\r\n        if (!this.isRecording()) {\r\n            let last = this.current;\r\n            if (action.feature && action.operator) {\r\n                last = this.construct();\r\n                this.nodeBuilder.removeNode(last.$cstNode);\r\n                const node = this.nodeBuilder.buildCompositeNode(action);\r\n                node.content.push(last.$cstNode);\r\n                const newItem = { $type };\r\n                this.stack.push(newItem);\r\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\r\n            } else {\r\n                last.$type = $type;\r\n            }\r\n        }\r\n    }\r\n\r\n    construct(): unknown {\r\n        if (this.isRecording()) {\r\n            return undefined;\r\n        }\r\n        const obj = this.current;\r\n        linkContentToContainer(obj);\r\n        this.nodeBuilder.construct(obj);\r\n        this.stack.pop();\r\n        if (isDataTypeNode(obj)) {\r\n            return this.converter.convert(obj.value, obj.$cstNode);\r\n        } else {\r\n            assignMandatoryProperties(this.astReflection, obj);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private getAssignment(feature: AbstractElement): AssignmentElement {\r\n        if (!this.assignmentMap.has(feature)) {\r\n            const assignment = getContainerOfType(feature, isAssignment);\r\n            this.assignmentMap.set(feature, {\r\n                assignment: assignment,\r\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\r\n            });\r\n        }\r\n        return this.assignmentMap.get(feature)!;\r\n    }\r\n\r\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\r\n        const obj = this.current;\r\n        let item: unknown;\r\n        if (isCrossRef && typeof value === 'string') {\r\n            item = this.linker.buildReference(obj, feature, cstNode, value);\r\n        } else {\r\n            item = value;\r\n        }\r\n        switch (operator) {\r\n            case '=': {\r\n                obj[feature] = item;\r\n                break;\r\n            }\r\n            case '?=': {\r\n                obj[feature] = true;\r\n                break;\r\n            }\r\n            case '+=': {\r\n                if (!Array.isArray(obj[feature])) {\r\n                    obj[feature] = [];\r\n                }\r\n                obj[feature].push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private assignWithoutOverride(target: any, source: any): any {\r\n        for (const [name, existingValue] of Object.entries(source)) {\r\n            const newValue = target[name];\r\n            if (newValue === undefined) {\r\n                target[name] = existingValue;\r\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\r\n                existingValue.push(...newValue);\r\n                target[name] = existingValue;\r\n            }\r\n        }\r\n        // The target was parsed from a unassigned subrule\r\n        // After the subrule construction, it received a cst node\r\n        // This CST node will later be overriden by the cst node builder\r\n        // To prevent references to stale AST nodes in the CST,\r\n        // we need to remove the reference here\r\n        const targetCstNode = target.$cstNode;\r\n        if (targetCstNode) {\r\n            targetCstNode.astNode = undefined;\r\n            target.$cstNode = undefined;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    get definitionErrors(): IParserDefinitionError[] {\r\n        return this.wrapper.definitionErrors;\r\n    }\r\n}\r\n\r\nexport interface IParserDefinitionError {\r\n    message: string\r\n    type: number\r\n    ruleName?: string\r\n}\r\n\r\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\r\n\r\n    buildMismatchTokenMessage(options: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\r\n    }\r\n\r\n    buildNotAllInputParsedMessage(options: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\r\n    }\r\n\r\n    buildNoViableAltMessage(options: {\r\n        expectedPathsPerAlt: TokenType[][][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\r\n    }\r\n\r\n    buildEarlyExitMessage(options: {\r\n        expectedIterationPaths: TokenType[][]\r\n        actual: IToken[]\r\n        previous: IToken\r\n        customUserDescription: string\r\n        ruleName: string\r\n    }): string {\r\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\r\n    }\r\n\r\n}\r\n\r\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\r\n\r\n    override buildMismatchTokenMessage({ expected, actual }: {\r\n        expected: TokenType\r\n        actual: IToken\r\n        previous: IToken\r\n        ruleName: string\r\n    }): string {\r\n        const expectedMsg = expected.LABEL\r\n            ? '`' + expected.LABEL + '`'\r\n            : expected.name.endsWith(':KW')\r\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\r\n                : `token of type '${expected.name}'`;\r\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\r\n    }\r\n\r\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\r\n        firstRedundant: IToken\r\n        ruleName: string\r\n    }): string {\r\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\r\n    }\r\n}\r\n\r\nexport interface CompletionParserResult {\r\n    tokens: IToken[]\r\n    elementStack: AbstractElement[]\r\n    tokenIndex: number\r\n}\r\n\r\nexport class LangiumCompletionParser extends AbstractLangiumParser {\r\n    private tokens: IToken[] = [];\r\n\r\n    private elementStack: AbstractElement[] = [];\r\n    private lastElementStack: AbstractElement[] = [];\r\n    private nextTokenIndex = 0;\r\n    private stackSize = 0;\r\n\r\n    action(): void {\r\n        // NOOP\r\n    }\r\n\r\n    construct(): unknown {\r\n        // NOOP\r\n        return undefined;\r\n    }\r\n\r\n    parse(input: string): CompletionParserResult {\r\n        this.resetState();\r\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\r\n        this.tokens = tokens.tokens;\r\n        this.wrapper.input = [...this.tokens];\r\n        this.mainRule.call(this.wrapper, {});\r\n        this.unorderedGroups.clear();\r\n        return {\r\n            tokens: this.tokens,\r\n            elementStack: [...this.lastElementStack],\r\n            tokenIndex: this.nextTokenIndex\r\n        };\r\n    }\r\n\r\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\r\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\r\n        this.allRules.set(rule.name, ruleMethod);\r\n        if (rule.entry) {\r\n            this.mainRule = ruleMethod;\r\n        }\r\n        return ruleMethod;\r\n    }\r\n\r\n    private resetState(): void {\r\n        this.elementStack = [];\r\n        this.lastElementStack = [];\r\n        this.nextTokenIndex = 0;\r\n        this.stackSize = 0;\r\n    }\r\n\r\n    private startImplementation(implementation: RuleImpl): RuleImpl {\r\n        return (args) => {\r\n            const size = this.keepStackSize();\r\n            try {\r\n                implementation(args);\r\n            } finally {\r\n                this.resetStackSize(size);\r\n            }\r\n        };\r\n    }\r\n\r\n    private removeUnexpectedElements(): void {\r\n        this.elementStack.splice(this.stackSize);\r\n    }\r\n\r\n    keepStackSize(): number {\r\n        const size = this.elementStack.length;\r\n        this.stackSize = size;\r\n        return size;\r\n    }\r\n\r\n    resetStackSize(size: number): void {\r\n        this.removeUnexpectedElements();\r\n        this.stackSize = size;\r\n    }\r\n\r\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\r\n        this.wrapper.wrapConsume(idx, tokenType);\r\n        if (!this.isRecording()) {\r\n            this.lastElementStack = [...this.elementStack, feature];\r\n            this.nextTokenIndex = this.currIdx + 1;\r\n        }\r\n    }\r\n\r\n    subrule(idx: number, rule: RuleResult, fragment: boolean, feature: AbstractElement, args: Args): void {\r\n        this.before(feature);\r\n        this.wrapper.wrapSubrule(idx, rule, args);\r\n        this.after(feature);\r\n    }\r\n\r\n    before(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            this.elementStack.push(element);\r\n        }\r\n    }\r\n\r\n    after(element: AbstractElement): void {\r\n        if (!this.isRecording()) {\r\n            const index = this.elementStack.lastIndexOf(element);\r\n            if (index >= 0) {\r\n                this.elementStack.splice(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    get currIdx(): number {\r\n        return (this.wrapper as any).currIdx;\r\n    }\r\n}\r\n\r\nconst defaultConfig: IParserConfig = {\r\n    recoveryEnabled: true,\r\n    nodeLocationTracking: 'full',\r\n    skipValidations: true,\r\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\r\n};\r\n\r\n/**\r\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\r\n * This way, we can build the `LangiumParser` as a composition.\r\n */\r\nclass ChevrotainWrapper extends EmbeddedActionsParser {\r\n\r\n    // This array is set in the base implementation of Chevrotain.\r\n    definitionErrors: IParserDefinitionError[];\r\n\r\n    constructor(tokens: TokenVocabulary, config: IParserConfig) {\r\n        const useDefaultLookahead = config && 'maxLookahead' in config;\r\n        super(tokens, {\r\n            ...defaultConfig,\r\n            lookaheadStrategy: useDefaultLookahead\r\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\r\n                : new LLStarLookaheadStrategy({\r\n                    // If validations are skipped, don't log the lookahead warnings\r\n                    logging: config.skipValidations ? () => { } : undefined\r\n                }),\r\n            ...config,\r\n        });\r\n    }\r\n\r\n    get IS_RECORDING(): boolean {\r\n        return this.RECORDING_PHASE;\r\n    }\r\n\r\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\r\n        return this.RULE(name, impl);\r\n    }\r\n\r\n    wrapSelfAnalysis(): void {\r\n        this.performSelfAnalysis();\r\n    }\r\n\r\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\r\n        return this.consume(idx, tokenType);\r\n    }\r\n\r\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\r\n        return this.subrule(idx, rule, {\r\n            ARGS: [args]\r\n        });\r\n    }\r\n\r\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\r\n        this.or(idx, choices);\r\n    }\r\n\r\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.option(idx, callback);\r\n    }\r\n\r\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.many(idx, callback);\r\n    }\r\n\r\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\r\n        this.atLeastOne(idx, callback);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\r\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\r\nimport type { BaseParser } from './langium-parser.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { Cardinality } from '../utils/grammar-utils.js';\r\nimport { EMPTY_ALT, EOF } from 'chevrotain';\r\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\r\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\r\n\r\ntype RuleContext = {\r\n    optional: number,\r\n    consume: number,\r\n    subrule: number,\r\n    many: number,\r\n    or: number\r\n} & ParserContext;\r\n\r\ntype ParserContext = {\r\n    parser: BaseParser\r\n    tokens: TokenTypeDictionary\r\n    ruleNames: Map<AstNode, string>\r\n}\r\n\r\ntype Rule = (args: Args) => unknown;\r\n\r\ntype Args = Record<string, boolean>;\r\n\r\ntype Predicate = (args: Args) => boolean;\r\n\r\ntype Method = (args: Args) => void;\r\n\r\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\r\n    const parserContext: ParserContext = {\r\n        parser,\r\n        tokens,\r\n        ruleNames: new Map()\r\n    };\r\n    buildRules(parserContext, grammar);\r\n    return parser;\r\n}\r\n\r\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\r\n    const reachable = getAllReachableRules(grammar, false);\r\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\r\n    for (const rule of parserRules) {\r\n        const ctx: RuleContext = {\r\n            ...parserContext,\r\n            consume: 1,\r\n            optional: 1,\r\n            subrule: 1,\r\n            many: 1,\r\n            or: 1\r\n        };\r\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\r\n    }\r\n}\r\n\r\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\r\n    let method: Method;\r\n    if (isKeyword(element)) {\r\n        method = buildKeyword(ctx, element);\r\n    } else if (isAction(element)) {\r\n        method = buildAction(ctx, element);\r\n    } else if (isAssignment(element)) {\r\n        method = buildElement(ctx, element.terminal);\r\n    } else if (isCrossReference(element)) {\r\n        method = buildCrossReference(ctx, element);\r\n    } else if (isRuleCall(element)) {\r\n        method = buildRuleCall(ctx, element);\r\n    } else if (isAlternatives(element)) {\r\n        method = buildAlternatives(ctx, element);\r\n    } else if (isUnorderedGroup(element)) {\r\n        method = buildUnorderedGroup(ctx, element);\r\n    } else if (isGroup(element)) {\r\n        method = buildGroup(ctx, element);\r\n    } else if(isEndOfFile(element)) {\r\n        const idx = ctx.consume++;\r\n        method = () => ctx.parser.consume(idx, EOF, element);\r\n    } else {\r\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\r\n    }\r\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\r\n}\r\n\r\nfunction buildAction(ctx: RuleContext, action: Action): Method {\r\n    const actionType = getTypeName(action);\r\n    return () => ctx.parser.action(actionType, action);\r\n}\r\n\r\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\r\n    const rule = ruleCall.rule.ref;\r\n    if (isParserRule(rule)) {\r\n        const idx = ctx.subrule++;\r\n        const fragment = rule.fragment;\r\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\r\n    } else if (isTerminalRule(rule)) {\r\n        const idx = ctx.consume++;\r\n        const method = getToken(ctx, rule.name);\r\n        return () => ctx.parser.consume(idx, method, ruleCall);\r\n    } else if (!rule) {\r\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\r\n    } else {\r\n        assertUnreachable(rule);\r\n    }\r\n}\r\n\r\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\r\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\r\n    return (args) => {\r\n        const ruleArgs: Args = {};\r\n        for (let i = 0; i < predicates.length; i++) {\r\n            const ruleTarget = rule.parameters[i];\r\n            const predicate = predicates[i];\r\n            ruleArgs[ruleTarget.name] = predicate(args);\r\n        }\r\n        return ruleArgs;\r\n    };\r\n}\r\n\r\ninterface PredicatedMethod {\r\n    ALT: Method,\r\n    GATE?: Predicate\r\n}\r\n\r\nfunction buildPredicate(condition: Condition): Predicate {\r\n    if (isDisjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) || right(args));\r\n    } else if (isConjunction(condition)) {\r\n        const left = buildPredicate(condition.left);\r\n        const right = buildPredicate(condition.right);\r\n        return (args) => (left(args) && right(args));\r\n    } else if (isNegation(condition)) {\r\n        const value = buildPredicate(condition.value);\r\n        return (args) => !value(args);\r\n    } else if (isParameterReference(condition)) {\r\n        const name = condition.parameter.ref!.name;\r\n        return (args) => args !== undefined && args[name] === true;\r\n    } else if (isBooleanLiteral(condition)) {\r\n        const value = Boolean(condition.true);\r\n        return () => value;\r\n    }\r\n    assertUnreachable(condition);\r\n}\r\n\r\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\r\n    if (alternatives.elements.length === 1) {\r\n        return buildElement(ctx, alternatives.elements[0]);\r\n    } else {\r\n        const methods: PredicatedMethod[] = [];\r\n\r\n        for (const element of alternatives.elements) {\r\n            const predicatedMethod: PredicatedMethod = {\r\n                // Since we handle the guard condition in the alternative already\r\n                // We can ignore the group guard condition inside\r\n                ALT: buildElement(ctx, element, true)\r\n            };\r\n            const guard = getGuardCondition(element);\r\n            if (guard) {\r\n                predicatedMethod.GATE = buildPredicate(guard);\r\n            }\r\n            methods.push(predicatedMethod);\r\n        }\r\n\r\n        const idx = ctx.or++;\r\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\r\n            const alt: IOrAlt<unknown> = {\r\n                ALT: () => method.ALT(args)\r\n            };\r\n            const gate = method.GATE;\r\n            if (gate) {\r\n                alt.GATE = () => gate(args);\r\n            }\r\n            return alt;\r\n        }));\r\n    }\r\n}\r\n\r\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\r\n    if (group.elements.length === 1) {\r\n        return buildElement(ctx, group.elements[0]);\r\n    }\r\n    const methods: PredicatedMethod[] = [];\r\n\r\n    for (const element of group.elements) {\r\n        const predicatedMethod: PredicatedMethod = {\r\n            // Since we handle the guard condition in the alternative already\r\n            // We can ignore the group guard condition inside\r\n            ALT: buildElement(ctx, element, true)\r\n        };\r\n        const guard = getGuardCondition(element);\r\n        if (guard) {\r\n            predicatedMethod.GATE = buildPredicate(guard);\r\n        }\r\n        methods.push(predicatedMethod);\r\n    }\r\n\r\n    const orIdx = ctx.or++;\r\n\r\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\r\n        const stackId = lParser.getRuleStack().join('-');\r\n        return `uGroup_${groupIdx}_${stackId}`;\r\n    };\r\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\r\n        const alt: IOrAlt<unknown> = { ALT: () => true };\r\n        const parser = ctx.parser;\r\n        alt.ALT = () => {\r\n            method.ALT(args);\r\n            if (!parser.isRecording()) {\r\n                const key = idFunc(orIdx, parser);\r\n                if (!parser.unorderedGroups.get(key)) {\r\n                    // init after clear state\r\n                    parser.unorderedGroups.set(key, []);\r\n                }\r\n                const groupState = parser.unorderedGroups.get(key)!;\r\n                if (typeof groupState?.[idx] === 'undefined') {\r\n                    // Not accessed yet\r\n                    groupState[idx] = true;\r\n                }\r\n            }\r\n        };\r\n        const gate = method.GATE;\r\n        if (gate) {\r\n            alt.GATE = () => gate(args);\r\n        } else {\r\n            alt.GATE = () => {\r\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\r\n                const allow = !trackedAlternatives?.[idx];\r\n                return allow;\r\n            };\r\n        }\r\n        return alt;\r\n    }));\r\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\r\n    return (args) => {\r\n        wrapped(args);\r\n        if (!ctx.parser.isRecording()) {\r\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\r\n        }\r\n    };\r\n}\r\n\r\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\r\n    const methods = group.elements.map(e => buildElement(ctx, e));\r\n    return (args) => methods.forEach(method => method(args));\r\n}\r\n\r\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\r\n    if (isGroup(element)) {\r\n        return element.guardCondition;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\r\n    if (!terminal) {\r\n        if (!crossRef.type.ref) {\r\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\r\n        }\r\n        const assignment = findNameAssignment(crossRef.type.ref);\r\n        const assignTerminal = assignment?.terminal;\r\n        if (!assignTerminal) {\r\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\r\n        }\r\n        return buildCrossReference(ctx, crossRef, assignTerminal);\r\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\r\n        // The terminal is a data type rule here. Everything else will result in a validation error.\r\n        const rule = terminal.rule.ref;\r\n        const idx = ctx.subrule++;\r\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\r\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\r\n        const idx = ctx.consume++;\r\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\r\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\r\n    } else if (isKeyword(terminal)) {\r\n        const idx = ctx.consume++;\r\n        const keyword = getToken(ctx, terminal.value);\r\n        return () => ctx.parser.consume(idx, keyword, crossRef);\r\n    }\r\n    else {\r\n        throw new Error('Could not build cross reference parser');\r\n    }\r\n}\r\n\r\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\r\n    const idx = ctx.consume++;\r\n    const token = ctx.tokens[keyword.value];\r\n    if (!token) {\r\n        throw new Error('Could not find token for keyword: ' + keyword.value);\r\n    }\r\n    return () => ctx.parser.consume(idx, token, keyword);\r\n}\r\n\r\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\r\n    const gate = guard && buildPredicate(guard);\r\n\r\n    if (!cardinality) {\r\n        if (gate) {\r\n            const idx = ctx.or++;\r\n            return (args) => ctx.parser.alternatives(idx, [\r\n                {\r\n                    ALT: () => method(args),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return method;\r\n        }\r\n    }\r\n\r\n    if (cardinality === '*') {\r\n        const idx = ctx.many++;\r\n        return (args) => ctx.parser.many(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else if (cardinality === '+') {\r\n        const idx = ctx.many++;\r\n        if (gate) {\r\n            const orIdx = ctx.or++;\r\n            // In the case of a guard condition for the `+` group\r\n            // We combine it with an empty alternative\r\n            // If the condition returns true, it needs to parse at least a single iteration\r\n            // If its false, it is not allowed to parse anything\r\n            return (args) => ctx.parser.alternatives(orIdx, [\r\n                {\r\n                    ALT: () => ctx.parser.atLeastOne(idx, {\r\n                        DEF: () => method(args)\r\n                    }),\r\n                    GATE: () => gate(args)\r\n                },\r\n                {\r\n                    ALT: EMPTY_ALT(),\r\n                    GATE: () => !gate(args)\r\n                }\r\n            ]);\r\n        } else {\r\n            return (args) => ctx.parser.atLeastOne(idx, {\r\n                DEF: () => method(args),\r\n            });\r\n        }\r\n    } else if (cardinality === '?') {\r\n        const idx = ctx.optional++;\r\n        return (args) => ctx.parser.optional(idx, {\r\n            DEF: () => method(args),\r\n            GATE: gate ? () => gate(args) : undefined\r\n        });\r\n    } else {\r\n        assertUnreachable(cardinality);\r\n    }\r\n}\r\n\r\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\r\n    const name = getRuleName(ctx, element);\r\n    const rule = ctx.parser.getRule(name);\r\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\r\n    return rule;\r\n}\r\n\r\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\r\n    if (isParserRule(element)) {\r\n        return element.name;\r\n    } else if (ctx.ruleNames.has(element)) {\r\n        return ctx.ruleNames.get(element)!;\r\n    } else {\r\n        let item: AstNode = element;\r\n        let parent: AstNode = item.$container!;\r\n        let ruleName: string = element.$type;\r\n        while (!isParserRule(parent)) {\r\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\r\n                const index = parent.elements.indexOf(item as AbstractElement);\r\n                ruleName = index.toString() + ':' + ruleName;\r\n            }\r\n            item = parent;\r\n            parent = parent.$container!;\r\n        }\r\n        const rule = parent as ParserRule;\r\n        ruleName = rule.name + ':' + ruleName;\r\n        ctx.ruleNames.set(element, ruleName);\r\n        return ruleName;\r\n    }\r\n}\r\n\r\nfunction getToken(ctx: ParserContext, name: string): TokenType {\r\n    const token = ctx.tokens[name];\r\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\r\n    return token;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\n/**\r\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\r\n * available at `services.Grammar`.\r\n */\r\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const parser = prepareLangiumParser(services);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n\r\n/**\r\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\r\n * information when the parser is initially validated.\r\n */\r\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumParser(services);\r\n    return createParser(grammar, parser, lexer.definition);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\r\n\r\nexport type MaybePromise<T> = T | Promise<T>\r\n\r\n/**\r\n * Delays the execution of the current code to the next tick of the event loop.\r\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\r\n */\r\nexport function delayNextTick(): Promise<void> {\r\n    return new Promise(resolve => {\r\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\r\n        // Using `setTimeout` of the browser API accomplishes the same result.\r\n        if (typeof setImmediate === 'undefined') {\r\n            setTimeout(resolve, 0);\r\n        } else {\r\n            setImmediate(resolve);\r\n        }\r\n    });\r\n}\r\n\r\nlet lastTick = 0;\r\nlet globalInterruptionPeriod = 10;\r\n\r\n/**\r\n * Reset the global interruption period and create a cancellation token source.\r\n */\r\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\r\n    lastTick = performance.now();\r\n    return new CancellationTokenSource();\r\n}\r\n\r\n/**\r\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\r\n * The default value is 10ms.\r\n */\r\nexport function setInterruptionPeriod(period: number): void {\r\n    globalInterruptionPeriod = period;\r\n}\r\n\r\n/**\r\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\r\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\r\n * this symbol as rejection reason.\r\n */\r\nexport const OperationCancelled = Symbol('OperationCancelled');\r\n\r\n/**\r\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\r\n * has been cancelled.\r\n */\r\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\r\n    return err === OperationCancelled;\r\n}\r\n\r\n/**\r\n * This function does two things:\r\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\r\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\r\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\r\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\r\n *\r\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\r\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\r\n * the promise) to avoid that event being exposed as an error.\r\n */\r\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\r\n    if (token === CancellationToken.None) {\r\n        // Early exit in case cancellation was disabled by the caller\r\n        return;\r\n    }\r\n    const current = performance.now();\r\n    if (current - lastTick >= globalInterruptionPeriod) {\r\n        lastTick = current;\r\n        await delayNextTick();\r\n        // prevent calling delayNextTick every iteration of loop\r\n        // where delayNextTick takes up the majority or all of the\r\n        // globalInterruptionPeriod itself\r\n        lastTick = performance.now();\r\n    }\r\n    if (token.isCancellationRequested) {\r\n        throw OperationCancelled;\r\n    }\r\n}\r\n\r\n/**\r\n * Simple implementation of the deferred pattern.\r\n * An object that exposes a promise and functions to resolve and reject it.\r\n */\r\nexport class Deferred<T = void> {\r\n    resolve: (value: T) => this;\r\n    reject: (err?: unknown) => this;\r\n\r\n    promise = new Promise<T>((resolve, reject) => {\r\n        this.resolve = (arg) => {\r\n            resolve(arg);\r\n            return this;\r\n        };\r\n        this.reject = (err) => {\r\n            reject(err);\r\n            return this;\r\n        };\r\n    });\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\r\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\r\n *  the overhead is very small, just a few kilobytes.\r\n * Everything else of that package (at the time contributing) is also defined\r\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\r\n */\r\nexport { TextDocument } from 'vscode-languageserver-textdocument';\r\n\r\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\r\nimport type { FileSystemProvider } from './file-system-provider.js';\r\nimport type { ParseResult, ParserOptions } from '../parser/langium-parser.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\r\nimport type { MultiMap } from '../utils/collections.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { TextDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\r\n * from the AST, e.g. the result of scope precomputation.\r\n */\r\nexport interface LangiumDocument<T extends AstNode = AstNode> {\r\n    /** The Uniform Resource Identifier (URI) of the document */\r\n    readonly uri: URI;\r\n    /** The text document used to convert between offsets and positions */\r\n    readonly textDocument: TextDocument;\r\n    /** The current state of the document */\r\n    state: DocumentState;\r\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\r\n    parseResult: ParseResult<T>;\r\n    /** Result of the scope precomputation phase */\r\n    precomputedScopes?: PrecomputedScopes;\r\n    /** An array of all cross-references found in the AST while linking */\r\n    references: Reference[];\r\n    /** Result of the validation phase */\r\n    diagnostics?: Diagnostic[]\r\n}\r\n\r\n/**\r\n * A document is subject to several phases that are run in predefined order. Any state value implies that\r\n * smaller state values are finished as well.\r\n */\r\nexport enum DocumentState {\r\n    /**\r\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\r\n     * document instance is no longer valid.\r\n     */\r\n    Changed = 0,\r\n    /**\r\n     * An AST has been created from the text content. The document structure can be traversed,\r\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\r\n     * at this stage as a preprocessing step.\r\n     */\r\n    Parsed = 1,\r\n    /**\r\n     * The `IndexManager` service has processed AST nodes of this document. This means the\r\n     * exported symbols are available in the global scope and can be resolved from other documents.\r\n     */\r\n    IndexedContent = 2,\r\n    /**\r\n     * The `ScopeComputation` service has processed this document. This means the local symbols\r\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\r\n     * Once a document has reached this state, you may follow every reference - it will lazily\r\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\r\n     * the target is not in scope.\r\n     */\r\n    ComputedScopes = 3,\r\n    /**\r\n     * The `Linker` service has processed this document. All outgoing references have been\r\n     * resolved or marked as erroneous.\r\n     */\r\n    Linked = 4,\r\n    /**\r\n     * The `IndexManager` service has processed AST node references of this document. This is\r\n     * necessary to determine which documents are affected by a change in one of the workspace\r\n     * documents.\r\n     */\r\n    IndexedReferences = 5,\r\n    /**\r\n     * The `DocumentValidator` service has processed this document. The language server listens\r\n     * to the results of this phase and sends diagnostics to the client.\r\n     */\r\n    Validated = 6\r\n}\r\n\r\n/**\r\n * Result of the scope precomputation phase (`ScopeComputation` service).\r\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\r\n */\r\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\r\n\r\nexport interface DocumentSegment {\r\n    readonly range: Range\r\n    readonly offset: number\r\n    readonly length: number\r\n    readonly end: number\r\n}\r\n\r\n/**\r\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\r\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\r\n */\r\nexport type TextDocumentProvider = {\r\n    get(uri: string | URI): TextDocument | undefined\r\n}\r\n\r\n/**\r\n * Shared service for creating `LangiumDocument` instances.\r\n *\r\n * Register a custom implementation if special (additional) behavior is required for your language(s).\r\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\r\n * specialize {@link update}, too!\r\n */\r\nexport interface LangiumDocumentFactory {\r\n    /**\r\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from an in-memory string.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    /**\r\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\r\n     */\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Create an Langium document from a model that has been constructed in memory.\r\n     */\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\r\n\r\n    /**\r\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\r\n     */\r\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\r\n\r\n    /**\r\n     * Update the given document after changes in the corresponding textual representation.\r\n     * Method is called by the document builder after it has been requested to build an existing\r\n     * document and the document's state is {@link DocumentState.Changed}.\r\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\r\n     * and {@link fromString}.\r\n     */\r\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\r\n}\r\n\r\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n    }\r\n\r\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\r\n        const content = await this.fileSystemProvider.readFile(uri);\r\n        return this.createAsync<T>(uri, content, cancellationToken);\r\n    }\r\n\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        uri = uri ?? URI.parse(textDocument.uri);\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, textDocument, token);\r\n        } else {\r\n            return this.create<T>(uri, textDocument, token);\r\n        }\r\n    }\r\n\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, options?: ParserOptions): LangiumDocument<T>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\r\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, token?: CancellationToken | ParserOptions): LangiumDocument<T> | Promise<LangiumDocument<T>> {\r\n        if (CancellationToken.is(token)) {\r\n            return this.createAsync<T>(uri, text, token);\r\n        } else {\r\n            return this.create<T>(uri, text, token);\r\n        }\r\n    }\r\n\r\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\r\n        return this.create<T>(uri, { $model: model });\r\n    }\r\n\r\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }, options?: ParserOptions): LangiumDocument<T> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = this.parse<T>(uri, content, options);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n\r\n        } else if ('$model' in content) {\r\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\r\n            return this.createLangiumDocument<T>(parseResult, uri);\r\n\r\n        } else {\r\n            const parseResult = this.parse<T>(uri, content.getText(), options);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        if (typeof content === 'string') {\r\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\r\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\r\n        } else {\r\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\r\n            return this.createLangiumDocument(parseResult, uri, content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a LangiumDocument from a given parse result.\r\n     *\r\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\r\n     * should not be necessary because the main purpose of the TextDocument is to convert between\r\n     * text ranges and offsets, which is done solely in LSP request handling.\r\n     *\r\n     * With the introduction of {@link update} below this method is supposed to be mainly called\r\n     * during workspace initialization and on addition/recognition of new files, while changes in\r\n     * existing documents are processed via {@link update}.\r\n     */\r\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\r\n        let document: LangiumDocument<T>;\r\n        if (textDocument) {\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                textDocument\r\n            };\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\r\n            document = {\r\n                parseResult,\r\n                uri,\r\n                state: DocumentState.Parsed,\r\n                references: [],\r\n                get textDocument() {\r\n                    return textDocumentGetter();\r\n                }\r\n            };\r\n        }\r\n        (parseResult.value as Mutable<AstNode>).$document = document;\r\n        return document;\r\n    }\r\n\r\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\r\n        // The CST full text property contains the original text that was used to create the AST.\r\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\r\n        const textDocument = this.textDocuments?.get(document.uri.toString());\r\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\r\n\r\n        if (textDocument) {\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    value: textDocument\r\n                }\r\n            );\r\n        } else {\r\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\r\n            Object.defineProperty(\r\n                document,\r\n                'textDocument',\r\n                {\r\n                    get: textDocumentGetter\r\n                }\r\n            );\r\n        }\r\n\r\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\r\n        // Therefore, we only parse if the text has actually changed.\r\n        if (oldText !== text) {\r\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\r\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\r\n        }\r\n        document.state = DocumentState.Parsed;\r\n        return document;\r\n    }\r\n\r\n    protected parse<T extends AstNode>(uri: URI, text: string, options?: ParserOptions): ParseResult<T> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.LangiumParser.parse<T>(text, options);\r\n    }\r\n\r\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const services = this.serviceRegistry.getServices(uri);\r\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\r\n    }\r\n\r\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\r\n        const serviceRegistry = this.serviceRegistry;\r\n        let textDoc: TextDocument | undefined = undefined;\r\n        return () => {\r\n            return textDoc ??= TextDocument.create(\r\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\r\n            );\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Shared service for managing Langium documents.\r\n */\r\nexport interface LangiumDocuments {\r\n\r\n    /**\r\n     * A stream of all documents managed under this service.\r\n     */\r\n    readonly all: Stream<LangiumDocument>\r\n\r\n    /**\r\n     * Manage a new document under this service.\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    addDocument(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\r\n     */\r\n    getDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\r\n     * The new document will be added to the list of documents managed under this service.\r\n     */\r\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n\r\n    /**\r\n     * Creates a new document with the given URI and text content asynchronously.\r\n     * The process can be interrupted with a cancellation token.\r\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\r\n     *\r\n     * @throws an error if a document with the same URI is already present.\r\n     */\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n\r\n    /**\r\n     * Returns `true` if a document with the given URI is managed under this service.\r\n     */\r\n    hasDocument(uri: URI): boolean;\r\n\r\n    /**\r\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\r\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\r\n     * be dropped to reduce memory footprint.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\r\n\r\n    /**\r\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\r\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\r\n     * URI will create a new document instance.\r\n     *\r\n     * @returns the affected {@link LangiumDocument} if existing for convenience\r\n     */\r\n    deleteDocument(uri: URI): LangiumDocument | undefined;\r\n}\r\n\r\nexport class DefaultLangiumDocuments implements LangiumDocuments {\r\n\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n\r\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get all(): Stream<LangiumDocument> {\r\n        return stream(this.documentMap.values());\r\n    }\r\n\r\n    addDocument(document: LangiumDocument): void {\r\n        const uriString = document.uri.toString();\r\n        if (this.documentMap.has(uriString)) {\r\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\r\n        }\r\n        this.documentMap.set(uriString, document);\r\n    }\r\n\r\n    getDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        return this.documentMap.get(uriString);\r\n    }\r\n\r\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\r\n        let document = this.getDocument(uri);\r\n        if (document) {\r\n            return document;\r\n        }\r\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\r\n        this.addDocument(document);\r\n        return document;\r\n    }\r\n\r\n    createDocument(uri: URI, text: string): LangiumDocument;\r\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\r\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\r\n        if (cancellationToken) {\r\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\r\n                this.addDocument(document);\r\n                return document;\r\n            });\r\n        } else {\r\n            const document = this.langiumDocumentFactory.fromString(text, uri);\r\n            this.addDocument(document);\r\n            return document;\r\n        }\r\n    }\r\n\r\n    hasDocument(uri: URI): boolean {\r\n        return this.documentMap.has(uri.toString());\r\n    }\r\n\r\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\r\n            linker.unlink(langiumDoc);\r\n            langiumDoc.state = DocumentState.Changed;\r\n            langiumDoc.precomputedScopes = undefined;\r\n            langiumDoc.diagnostics = undefined;\r\n        }\r\n        return langiumDoc;\r\n    }\r\n\r\n    deleteDocument(uri: URI): LangiumDocument | undefined {\r\n        const uriString = uri.toString();\r\n        const langiumDoc = this.documentMap.get(uriString);\r\n        if (langiumDoc) {\r\n            langiumDoc.state = DocumentState.Changed;\r\n            this.documentMap.delete(uriString);\r\n        }\r\n        return langiumDoc;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\nimport type { ScopeProvider } from './scope-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\r\nimport { findRootNode, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { DocumentState } from '../workspace/documents.js';\r\n\r\n/**\r\n * Language-specific service for resolving cross-references in the AST.\r\n */\r\nexport interface Linker {\r\n\r\n    /**\r\n     * Links all cross-references within the specified document. The default implementation loads only target\r\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\r\n     * stored in the document's `references` property.\r\n     *\r\n     * @param document A LangiumDocument that shall be linked.\r\n     * @param cancelToken A token for cancelling the operation.\r\n     *\r\n     * @throws `OperationCancelled` if a cancellation event is detected\r\n     */\r\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Unlinks all references within the specified document and removes them from the list of `references`.\r\n     *\r\n     * @param document A LangiumDocument that shall be unlinked.\r\n     */\r\n    unlink(document: LangiumDocument): void;\r\n\r\n    /**\r\n     * Determines a candidate AST node description for linking the given reference.\r\n     *\r\n     * @param refInfo Information about the reference.\r\n     */\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\r\n\r\n    /**\r\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\r\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\r\n     * as well as the unique cross reference identifier.\r\n     *\r\n     * Default behavior:\r\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\r\n     *    first visit.\r\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\r\n     *    and further resolution attempts will *not* be performed.\r\n     *\r\n     * @param node The containing AST node\r\n     * @param property The AST node property being referenced\r\n     * @param refNode The corresponding CST node\r\n     * @param refText The cross reference text denoting the target AstNode\r\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\r\n     */\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\r\n\r\n}\r\n\r\nconst ref_resolving = Symbol('ref_resolving');\r\n\r\ninterface DefaultReference extends Reference {\r\n    _ref?: AstNode | LinkingError | typeof ref_resolving;\r\n    _nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport class DefaultLinker implements Linker {\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly scopeProvider: ScopeProvider;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly langiumDocuments: () => LangiumDocuments;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\r\n        this.scopeProvider = services.references.ScopeProvider;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const node of streamAst(document.parseResult.value)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\r\n        }\r\n    }\r\n\r\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\r\n        const ref = refInfo.reference as DefaultReference;\r\n        // The reference may already have been resolved lazily by accessing its `ref` property.\r\n        if (ref._ref === undefined) {\r\n            ref._ref = ref_resolving;\r\n            try {\r\n                const description = this.getCandidate(refInfo);\r\n                if (isLinkingError(description)) {\r\n                    ref._ref = description;\r\n                } else {\r\n                    ref._nodeDescription = description;\r\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\r\n                        // The target document is already loaded\r\n                        const linkedNode = this.loadAstNode(description);\r\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\r\n                    } else {\r\n                        // Try to load the target AST node later using the already provided description\r\n                        ref._ref = undefined;\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\r\n                const errorMessage = (err as Error).message ?? String(err);\r\n                ref._ref = {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}`\r\n                };\r\n            }\r\n            // Add the reference to the document's array of references\r\n            // Only add if the reference has been not been resolved earlier\r\n            // Otherwise we end up with duplicates\r\n            // See also implementation of `buildReference`\r\n            document.references.push(ref);\r\n        }\r\n    }\r\n\r\n    unlink(document: LangiumDocument): void {\r\n        for (const ref of document.references) {\r\n            delete (ref as DefaultReference)._ref;\r\n            delete (ref as DefaultReference)._nodeDescription;\r\n        }\r\n        document.references = [];\r\n    }\r\n\r\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\r\n        const scope = this.scopeProvider.getScope(refInfo);\r\n        const description = scope.getElement(refInfo.reference.$refText);\r\n        return description ?? this.createLinkingError(refInfo);\r\n    }\r\n\r\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\r\n        // See behavior description in doc of Linker, update that on changes in here.\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const linker = this;\r\n        const reference: DefaultReference = {\r\n            $refNode: refNode,\r\n            $refText: refText,\r\n\r\n            get ref() {\r\n                if (isAstNode(this._ref)) {\r\n                    // Most frequent case: the target is already resolved.\r\n                    return this._ref;\r\n                } else if (isAstNodeDescription(this._nodeDescription)) {\r\n                    // A candidate has been found before, but it is not loaded yet.\r\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\r\n                    this._ref = linkedNode ??\r\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\r\n                } else if (this._ref === undefined) {\r\n                    // The reference has not been linked yet, so do that now.\r\n                    this._ref = ref_resolving;\r\n                    const document = findRootNode(node).$document;\r\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\r\n                    if (refData.error && document && document.state < DocumentState.ComputedScopes) {\r\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\r\n                        return this._ref = undefined;\r\n                    }\r\n                    this._ref = refData.node ?? refData.error;\r\n                    this._nodeDescription = refData.descr;\r\n                    document?.references.push(this);\r\n                } else if (this._ref === ref_resolving) {\r\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\r\n                }\r\n                return isAstNode(this._ref) ? this._ref : undefined;\r\n            },\r\n            get $nodeDescription() {\r\n                return this._nodeDescription;\r\n            },\r\n            get error() {\r\n                return isLinkingError(this._ref) ? this._ref : undefined;\r\n            }\r\n        };\r\n        return reference;\r\n    }\r\n\r\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\r\n        try {\r\n            const description = this.getCandidate(refInfo);\r\n            if (isLinkingError(description)) {\r\n                return { error: description };\r\n            }\r\n            const linkedNode = this.loadAstNode(description);\r\n            if (linkedNode) {\r\n                return { node: linkedNode, descr: description };\r\n            }\r\n            else {\r\n                return {\r\n                    descr: description,\r\n                    error:\r\n                        this.createLinkingError(refInfo, description)\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\r\n            const errorMessage = (err as Error).message ?? String(err);\r\n            return {\r\n                error: {\r\n                    ...refInfo,\r\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}`\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\r\n        if (nodeDescription.node) {\r\n            return nodeDescription.node;\r\n        }\r\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\r\n        if (!doc) {\r\n            return undefined;\r\n        }\r\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\r\n    }\r\n\r\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\r\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\r\n        // in the language implementation.\r\n        const document = findRootNode(refInfo.container).$document;\r\n        if (document && document.state < DocumentState.ComputedScopes) {\r\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\r\n        }\r\n        const referenceType = this.reflection.getReferenceType(refInfo);\r\n        return {\r\n            ...refInfo,\r\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\r\n            targetDescription\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI, Utils } from 'vscode-uri';\r\n\r\nexport { URI };\r\n\r\nexport namespace UriUtils {\r\n\r\n    export const basename = Utils.basename;\r\n    export const dirname = Utils.dirname;\r\n    export const extname = Utils.extname;\r\n    export const joinPath = Utils.joinPath;\r\n    export const resolvePath = Utils.resolvePath;\r\n\r\n    export function equals(a?: URI | string, b?: URI | string): boolean {\r\n        return a?.toString() === b?.toString();\r\n    }\r\n\r\n    export function relative(from: URI | string, to: URI | string): string {\r\n        const fromPath = typeof from === 'string' ? from : from.path;\r\n        const toPath = typeof to === 'string' ? to : to.path;\r\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\r\n        const toParts = toPath.split('/').filter(e => e.length > 0);\r\n        let i = 0;\r\n        for (; i < fromParts.length; i++) {\r\n            if (fromParts[i] !== toParts[i]) {\r\n                break;\r\n            }\r\n        }\r\n        const backPart = '../'.repeat(fromParts.length - i);\r\n        const toPart = toParts.slice(i).join('/');\r\n        return backPart + toPart;\r\n    }\r\n\r\n    export function normalize(uri: URI | string): string {\r\n        return URI.parse(uri.toString()).toString();\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { findAssignment } from '../utils/grammar-utils.js';\r\nimport { isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for finding references and declaration of a given `CstNode`.\r\n */\r\nexport interface References {\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\r\n\r\n    /**\r\n     * If the CstNode is a reference node the target CstNode will be returned.\r\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\r\n     *\r\n     * @param sourceCstNode CstNode that points to a AstNode\r\n     */\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\r\n\r\n    /**\r\n     * Finds all references to the target node as references (local references) or reference descriptions.\r\n     *\r\n     * @param targetNode Specified target node whose references should be returned\r\n     */\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\r\n}\r\n\r\nexport interface FindReferencesOptions {\r\n    /**\r\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\r\n     */\r\n    onlyLocal?: boolean;\r\n    /**\r\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\r\n     */\r\n    documentUri?: URI;\r\n    /**\r\n     * Whether the returned list of references should include the declaration.\r\n     */\r\n    includeDeclaration?: boolean;\r\n}\r\n\r\nexport class DefaultReferences implements References {\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly index: IndexManager;\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.index = services.shared.workspace.IndexManager;\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\r\n        if (sourceCstNode) {\r\n            const assignment = findAssignment(sourceCstNode);\r\n            const nodeElem = sourceCstNode.astNode;\r\n            if (assignment && nodeElem) {\r\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\r\n\r\n                if (isReference(reference)) {\r\n                    return reference.ref;\r\n                } else if (Array.isArray(reference)) {\r\n                    for (const ref of reference) {\r\n                        if (isReference(ref) && ref.$refNode\r\n                            && ref.$refNode.offset <= sourceCstNode.offset\r\n                            && ref.$refNode.end >= sourceCstNode.end) {\r\n                            return ref.ref;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (nodeElem) {\r\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\r\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\r\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\r\n                    return nodeElem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\r\n        const astNode = this.findDeclaration(sourceCstNode);\r\n        if (astNode?.$cstNode) {\r\n            const targetNode = this.nameProvider.getNameNode(astNode);\r\n            return targetNode ?? astNode.$cstNode;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\r\n        const refs: ReferenceDescription[] = [];\r\n        if (options.includeDeclaration) {\r\n            const ref = this.getReferenceToSelf(targetNode);\r\n            if (ref) {\r\n                refs.push(ref);\r\n            }\r\n        }\r\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\r\n        if (options.documentUri) {\r\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\r\n        }\r\n        refs.push(...indexReferences);\r\n        return stream(refs);\r\n    }\r\n\r\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\r\n        const nameNode = this.nameProvider.getNameNode(targetNode);\r\n        if (nameNode) {\r\n            const doc = getDocument(targetNode);\r\n            const path = this.nodeLocator.getAstNodePath(targetNode);\r\n            return {\r\n                sourceUri: doc.uri,\r\n                sourcePath: path,\r\n                targetUri: doc.uri,\r\n                targetPath: path,\r\n                segment: toDocumentSegment(nameNode),\r\n                local: true\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Stream } from './stream.js';\r\nimport { Reduction, stream } from './stream.js';\r\n\r\n/**\r\n * A multimap is a variation of a Map that has potentially multiple values for every key.\r\n */\r\nexport class MultiMap<K, V> {\r\n\r\n    private map = new Map<K, V[]>();\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The total number of values in the multimap.\r\n     */\r\n    get size(): number {\r\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\r\n    }\r\n\r\n    /**\r\n     * Clear all entries in the multimap.\r\n     */\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\r\n     *  * Without a value, all values associated with the given key are deleted.\r\n     *\r\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\r\n     *     key / value does not exist.\r\n     */\r\n    delete(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.delete(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                const index = values.indexOf(value);\r\n                if (index >= 0) {\r\n                    if (values.length === 1) {\r\n                        this.map.delete(key);\r\n                    } else {\r\n                        values.splice(index, 1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all values associated with the given key. If no value exists,\r\n     * an empty array is returned.\r\n     *\r\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\r\n     * value and `delete` to remove a value from the multimap.\r\n     */\r\n    get(key: K): readonly V[] {\r\n        return this.map.get(key) ?? [];\r\n    }\r\n\r\n    /**\r\n     * Operates differently depending on whether a `value` is given:\r\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\r\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\r\n     */\r\n    has(key: K, value?: V): boolean {\r\n        if (value === undefined) {\r\n            return this.map.has(key);\r\n        } else {\r\n            const values = this.map.get(key);\r\n            if (values) {\r\n                return values.indexOf(value) >= 0;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the given key / value pair to the multimap.\r\n     */\r\n    add(key: K, value: V): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(value);\r\n        } else {\r\n            this.map.set(key, [value]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add the given set of key / value pairs to the multimap.\r\n     */\r\n    addAll(key: K, values: Iterable<V>): this {\r\n        if (this.map.has(key)) {\r\n            this.map.get(key)!.push(...values);\r\n        } else {\r\n            this.map.set(key, Array.from(values));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invokes the given callback function for every key / value pair in the multimap.\r\n     */\r\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\r\n        this.map.forEach((array, key) =>\r\n            array.forEach(value => callbackfn(value, key, this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an iterator of key, value pairs for every entry in the map.\r\n     */\r\n    [Symbol.iterator](): Iterator<[K, V]> {\r\n        return this.entries().iterator();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value pairs for every entry in the map.\r\n     */\r\n    entries(): Stream<[K, V]> {\r\n        return stream(this.map.entries())\r\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of keys in the map.\r\n     */\r\n    keys(): Stream<K> {\r\n        return stream(this.map.keys());\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of values in the map.\r\n     */\r\n    values(): Stream<V> {\r\n        return stream(this.map.values()).flat();\r\n    }\r\n\r\n    /**\r\n     * Returns a stream of key, value set pairs for every key in the map.\r\n     */\r\n    entriesGroupedByKey(): Stream<[K, V[]]> {\r\n        return stream(this.map.entries());\r\n    }\r\n\r\n}\r\n\r\nexport class BiMap<K, V> {\r\n\r\n    private map = new Map<K, V>();\r\n    private inverse = new Map<V, K>();\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor()\r\n    constructor(elements: Array<[K, V]>)\r\n    constructor(elements?: Array<[K, V]>) {\r\n        if (elements) {\r\n            for (const [key, value] of elements) {\r\n                this.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n        this.inverse.clear();\r\n    }\r\n\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        this.inverse.set(value, key);\r\n        return this;\r\n    }\r\n\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n\r\n    getKey(value: V): K | undefined {\r\n        return this.inverse.get(value);\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        const value = this.map.get(key);\r\n        if (value !== undefined) {\r\n            this.map.delete(key);\r\n            this.inverse.delete(value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Language-specific service for precomputing global and local scopes. The service methods are executed\r\n * as the first and second phase in the `DocumentBuilder`.\r\n */\r\nexport interface ScopeComputation {\r\n\r\n    /**\r\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\r\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\r\n     * they can be referenced from other documents.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\r\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\r\n     * initial indexing where this method is used.\r\n     *\r\n     * @param document The document from which to gather exported AST nodes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\r\n\r\n    /**\r\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\r\n     * resolving references to symbols in the same document. The result is a multimap assigning a\r\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\r\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\r\n     *\r\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\r\n     * resolution depends on the scope computation phase to be completed.\r\n     *\r\n     * @param document The document in which to compute scopes.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\r\n\r\n}\r\n\r\n/**\r\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\r\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\r\n * contained child nodes.\r\n *\r\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\r\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\r\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\r\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\r\n * are _invisible_ by default, but that can be changed by customizing this service.\r\n */\r\nexport class DefaultScopeComputation implements ScopeComputation {\r\n\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n    }\r\n\r\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\r\n     * The list of children to be considered is determined by the function parameter {@link children}.\r\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\r\n     *\r\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\r\n     * @param document The document containing the AST node to be exported.\r\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCancelled` if a user action occurs during execution.\r\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\r\n     */\r\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\r\n        const exports: AstNodeDescription[] = [];\r\n\r\n        this.exportNode(parentNode, exports, document);\r\n        for (const node of children(parentNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.exportNode(node, exports, document);\r\n        }\r\n        return exports;\r\n    }\r\n\r\n    /**\r\n     * Add a single node to the list of exports if it has a name. Override this method to change how\r\n     * symbols are exported, e.g. by modifying their exported name.\r\n     */\r\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\r\n        const name = this.nameProvider.getName(node);\r\n        if (name) {\r\n            exports.push(this.descriptions.createDescription(node, name, document));\r\n        }\r\n    }\r\n\r\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\r\n        const rootNode = document.parseResult.value;\r\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\r\n        // Here we navigate the full AST - local scopes shall be available in the whole document\r\n        for (const node of streamAllContents(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            this.processNode(node, document, scopes);\r\n        }\r\n        return scopes;\r\n    }\r\n\r\n    /**\r\n     * Process a single node during scopes computation. The default implementation makes the node visible\r\n     * in the subtree of its container (if the node has a name). Override this method to change this,\r\n     * e.g. by increasing the visibility to a higher level in the AST.\r\n     */\r\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\r\n        const container = node.$container;\r\n        if (container) {\r\n            const name = this.nameProvider.getName(node);\r\n            if (name) {\r\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNodeDescription } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\r\n\r\n/**\r\n * A scope describes what target elements are visible from a specific cross-reference context.\r\n */\r\nexport interface Scope {\r\n\r\n    /**\r\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\r\n     * If multiple matching elements are present, the selection of the returned element should be done\r\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\r\n     *\r\n     * @param name Name of the cross-reference target as it appears in the source text.\r\n     */\r\n    getElement(name: string): AstNodeDescription | undefined;\r\n\r\n    /**\r\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\r\n     * shown in the editor.\r\n     */\r\n    getAllElements(): Stream<AstNodeDescription>;\r\n\r\n}\r\n\r\nexport interface ScopeOptions {\r\n    caseInsensitive?: boolean;\r\n}\r\n\r\n/**\r\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\r\n * the next level of elements, which are queried when a target element is not found in the stream provided\r\n * to this scope.\r\n */\r\nexport class StreamScope implements Scope {\r\n    readonly elements: Stream<AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = elements;\r\n        this.outerScope = outerScope;\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        if (this.outerScope) {\r\n            return this.elements.concat(this.outerScope.getAllElements());\r\n        } else {\r\n            return this.elements;\r\n        }\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const local = this.caseInsensitive\r\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\r\n            : this.elements.find(e => e.name === name);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class MapScope implements Scope {\r\n    readonly elements: Map<string, AstNodeDescription>;\r\n    readonly outerScope?: Scope;\r\n    readonly caseInsensitive: boolean;\r\n\r\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\r\n        this.elements = new Map();\r\n        this.caseInsensitive = options?.caseInsensitive ?? false;\r\n        for (const element of elements) {\r\n            const name = this.caseInsensitive\r\n                ? element.name.toLowerCase()\r\n                : element.name;\r\n            this.elements.set(name, element);\r\n        }\r\n        this.outerScope = outerScope;\r\n    }\r\n\r\n    getElement(name: string): AstNodeDescription | undefined {\r\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\r\n        const local = this.elements.get(localName);\r\n        if (local) {\r\n            return local;\r\n        }\r\n        if (this.outerScope) {\r\n            return this.outerScope.getElement(name);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        let elementStream = stream(this.elements.values());\r\n        if (this.outerScope) {\r\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\r\n        }\r\n        return elementStream;\r\n    }\r\n\r\n}\r\n\r\nexport const EMPTY_SCOPE: Scope = {\r\n    getElement(): undefined {\r\n        return undefined;\r\n    },\r\n    getAllElements(): Stream<AstNodeDescription> {\r\n        return EMPTY_STREAM;\r\n    }\r\n};\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Disposable } from './disposable.js';\r\nimport type { URI } from './uri-utils.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { DocumentState } from '../workspace/documents.js';\r\n\r\nexport abstract class DisposableCache implements Disposable {\r\n\r\n    protected toDispose: Disposable[] = [];\r\n    protected isDisposed = false;\r\n\r\n    onDispose(disposable: Disposable): void {\r\n        this.toDispose.push(disposable);\r\n    }\r\n\r\n    dispose(): void {\r\n        this.throwIfDisposed();\r\n        this.clear();\r\n        this.isDisposed = true;\r\n        this.toDispose.forEach(disposable => disposable.dispose());\r\n    }\r\n\r\n    protected throwIfDisposed(): void {\r\n        if (this.isDisposed) {\r\n            throw new Error('This cache has already been disposed');\r\n        }\r\n    }\r\n\r\n    abstract clear(): void;\r\n}\r\n\r\nexport class SimpleCache<K, V> extends DisposableCache {\r\n    protected readonly cache = new Map<K, V>();\r\n\r\n    has(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.has(key);\r\n    }\r\n\r\n    set(key: K, value: V): void {\r\n        this.throwIfDisposed();\r\n        this.cache.set(key, value);\r\n    }\r\n\r\n    get(key: K): V | undefined;\r\n    get(key: K, provider: () => V): V;\r\n    get(key: K, provider?: () => V): V | undefined {\r\n        this.throwIfDisposed();\r\n        if (this.cache.has(key)) {\r\n            return this.cache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            this.cache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(key: K): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cache.delete(key);\r\n    }\r\n\r\n    clear(): void {\r\n        this.throwIfDisposed();\r\n        this.cache.clear();\r\n    }\r\n}\r\n\r\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\r\n\r\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\r\n    private readonly converter: (input: Context) => ContextKey | Context;\r\n\r\n    constructor(converter?: (input: Context) => ContextKey) {\r\n        super();\r\n        this.converter = converter ?? (value => value);\r\n    }\r\n\r\n    has(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).has(key);\r\n    }\r\n\r\n    set(contextKey: Context, key: Key, value: Value): void {\r\n        this.throwIfDisposed();\r\n        this.cacheForContext(contextKey).set(key, value);\r\n    }\r\n\r\n    get(contextKey: Context, key: Key): Value | undefined;\r\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\r\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\r\n        this.throwIfDisposed();\r\n        const contextCache = this.cacheForContext(contextKey);\r\n        if (contextCache.has(key)) {\r\n            return contextCache.get(key);\r\n        } else if (provider) {\r\n            const value = provider();\r\n            contextCache.set(key, value);\r\n            return value;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    delete(contextKey: Context, key: Key): boolean {\r\n        this.throwIfDisposed();\r\n        return this.cacheForContext(contextKey).delete(key);\r\n    }\r\n\r\n    clear(): void;\r\n    clear(contextKey: Context): void;\r\n    clear(contextKey?: Context): void {\r\n        this.throwIfDisposed();\r\n        if (contextKey) {\r\n            const mapKey = this.converter(contextKey);\r\n            this.cache.delete(mapKey);\r\n        } else {\r\n            this.cache.clear();\r\n        }\r\n    }\r\n\r\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\r\n        const mapKey = this.converter(contextKey);\r\n        let documentCache = this.cache.get(mapKey);\r\n        if (!documentCache) {\r\n            documentCache = new Map();\r\n            this.cache.set(mapKey, documentCache);\r\n        }\r\n        return documentCache;\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to a document.\r\n * If this document is changed or deleted, all associated key/value pairs are deleted.\r\n */\r\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\r\n\r\n    /**\r\n     * Creates a new document cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     *\r\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\r\n     * which triggers on all documents that have been affected by this change, assuming that the\r\n     * state is `DocumentState.Linked` or a later state.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super(uri => uri.toString());\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\r\n                this.clear(document.uri.toString());\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                for (const uri of deleted) { // react only on deleted documents\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\r\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\r\n                for (const uri of allUris) {\r\n                    this.clear(uri);\r\n                }\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Every key/value pair in this cache is scoped to the whole workspace.\r\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\r\n */\r\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\r\n\r\n    /**\r\n     * Creates a new workspace cache.\r\n     *\r\n     * @param sharedServices Service container instance to hook into document lifecycle events.\r\n     * @param state Optional document state on which the cache should evict.\r\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\r\n     * *Deleted* documents are considered in both cases.\r\n     */\r\n    constructor(sharedServices: LangiumSharedCoreServices, state?: DocumentState) {\r\n        super();\r\n        if (state) {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\r\n                this.clear();\r\n            }));\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\r\n                if (deleted.length > 0) { // react only on deleted documents\r\n                    this.clear();\r\n                }\r\n            }));\r\n        } else {\r\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => { // react on both changed and deleted documents\r\n                this.clear();\r\n            }));\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { NameProvider } from './name-provider.js';\r\nimport type { Scope, ScopeOptions} from './scope.js';\r\nimport { MapScope, StreamScope } from './scope.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport { WorkspaceCache } from '../utils/caching.js';\r\n\r\n/**\r\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\r\n */\r\nexport interface ScopeProvider {\r\n\r\n    /**\r\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\r\n     * identifier.\r\n     *\r\n     * @param context Information about the reference for which a scope is requested.\r\n     */\r\n    getScope(context: ReferenceInfo): Scope;\r\n\r\n}\r\n\r\nexport class DefaultScopeProvider implements ScopeProvider {\r\n\r\n    protected readonly reflection: AstReflection;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly descriptions: AstNodeDescriptionProvider;\r\n    protected readonly indexManager: IndexManager;\r\n\r\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\r\n    }\r\n\r\n    getScope(context: ReferenceInfo): Scope {\r\n        const scopes: Array<Stream<AstNodeDescription>> = [];\r\n        const referenceType = this.reflection.getReferenceType(context);\r\n\r\n        const precomputed = getDocument(context.container).precomputedScopes;\r\n        if (precomputed) {\r\n            let currentNode: AstNode | undefined = context.container;\r\n            do {\r\n                const allDescriptions = precomputed.get(currentNode);\r\n                if (allDescriptions.length > 0) {\r\n                    scopes.push(stream(allDescriptions).filter(\r\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\r\n                }\r\n                currentNode = currentNode.$container;\r\n            } while (currentNode);\r\n        }\r\n\r\n        let result: Scope = this.getGlobalScope(referenceType, context);\r\n        for (let i = scopes.length - 1; i >= 0; i--) {\r\n            result = this.createScope(scopes[i], result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST node descriptions.\r\n     */\r\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        return new StreamScope(stream(elements), outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\r\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\r\n     */\r\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\r\n        const s = stream(elements).map(e => {\r\n            const name = this.nameProvider.getName(e);\r\n            if (name) {\r\n                return this.descriptions.createDescription(e, name);\r\n            }\r\n            return undefined;\r\n        }).nonNullable();\r\n        return new StreamScope(s, outerScope, options);\r\n    }\r\n\r\n    /**\r\n     * Create a global scope filtered for the given reference type.\r\n     */\r\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\r\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { URI } from 'vscode-uri';\r\nimport type { CommentProvider } from '../documentation/comment-provider.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\r\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\r\n\r\nexport interface JsonSerializeOptions {\r\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\r\n    space?: string | number;\r\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\r\n    refText?: boolean;\r\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\r\n    sourceText?: boolean;\r\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\r\n    textRegions?: boolean;\r\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\r\n    comments?: boolean;\r\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\r\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\r\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: URI, reference: Reference) => string\r\n}\r\n\r\nexport interface JsonDeserializeOptions {\r\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\r\n    uriConverter?: (uri: string) => URI\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\r\n */\r\nexport interface AstNodeWithTextRegion extends AstNode {\r\n    $sourceText?: string;\r\n    $textRegion?: AstNodeRegionWithAssignments;\r\n}\r\n\r\n/**\r\n * {@link AstNode}s that may carry a semantically relevant comment.\r\n */\r\nexport interface AstNodeWithComment extends AstNode {\r\n    $comment?: string;\r\n}\r\n\r\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\r\n    return typeof (node as AstNodeWithComment).$comment === 'string';\r\n}\r\n\r\n/**\r\n * A {@link DocumentSegment} representing the definition area of an AstNode within the DSL text.\r\n * Usually contains text region information on all assigned property values of the AstNode,\r\n * and may contain the defining file's URI as string.\r\n */\r\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\r\n    /**\r\n     * A record containing an entry for each assigned property of the AstNode.\r\n     * The key is equal to the property name and the value is an array of the property values'\r\n     * text regions, regardless of whether the property is a single value or list property.\r\n     */\r\n    assignments?: Record<string, DocumentSegment[]>;\r\n    /**\r\n     * The AstNode defining file's URI as string\r\n     */\r\n    documentURI?: string;\r\n}\r\n\r\n/**\r\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\r\n */\r\nexport interface JsonSerializer {\r\n    /**\r\n     * Serialize an `AstNode` into a JSON `string`.\r\n     * @param node The `AstNode` to be serialized.\r\n     * @param options Serialization options\r\n     */\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\r\n    /**\r\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\r\n     */\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\r\n}\r\n\r\n/**\r\n * A cross-reference in the serialized JSON representation of an AstNode.\r\n */\r\ninterface IntermediateReference {\r\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\r\n    $ref?: string\r\n    /** The actual text used to look up the reference target in the surrounding scope. */\r\n    $refText?: string\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    $error?: string\r\n}\r\n\r\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\r\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\r\n}\r\n\r\nexport class DefaultJsonSerializer implements JsonSerializer {\r\n\r\n    /** The set of AstNode properties to be ignored by the serializer. */\r\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\r\n\r\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\r\n    protected currentDocument: LangiumDocument | undefined;\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    serialize(node: AstNode, options?: JsonSerializeOptions): string {\r\n        const serializeOptions = options ?? {};\r\n        const specificReplacer = options?.replacer;\r\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, serializeOptions);\r\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\r\n\r\n        try {\r\n            this.currentDocument = getDocument(node);\r\n            return JSON.stringify(node, replacer, options?.space);\r\n        } finally {\r\n            this.currentDocument = undefined;\r\n        }\r\n    }\r\n\r\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T {\r\n        const deserializeOptions = options ?? {};\r\n        const root = JSON.parse(content);\r\n        this.linkNode(root, root, deserializeOptions);\r\n        return root;\r\n    }\r\n\r\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\r\n        if (this.ignoreProperties.has(key)) {\r\n            return undefined;\r\n        } else if (isReference(value)) {\r\n            const refValue = value.ref;\r\n            const $refText = refText ? value.$refText : undefined;\r\n            if (refValue) {\r\n                const targetDocument = getDocument(refValue);\r\n                let targetUri = '';\r\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\r\n                    if (uriConverter) {\r\n                        targetUri = uriConverter(targetDocument.uri, value);\r\n                    } else {\r\n                        targetUri = targetDocument.uri.toString();\r\n                    }\r\n                }\r\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\r\n                return {\r\n                    $ref: `${targetUri}#${targetPath}`,\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            } else {\r\n                return {\r\n                    $error: value.error?.message ?? 'Could not resolve reference',\r\n                    $refText\r\n                } satisfies IntermediateReference;\r\n            }\r\n        } else if (isAstNode(value)) {\r\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\r\n            if (textRegions) {\r\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\r\n                if ((!key || value.$document) && astNode?.$textRegion) {\r\n                    // The document URI is added to the root node of the resulting JSON tree\r\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\r\n                }\r\n            }\r\n            if (sourceText && !key) {\r\n                astNode ??= { ...value };\r\n                astNode.$sourceText = value.$cstNode?.text;\r\n            }\r\n            if (comments) {\r\n                astNode ??= { ...value };\r\n                const comment = this.commentProvider.getComment(value);\r\n                if (comment) {\r\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\r\n                }\r\n            }\r\n            return astNode ?? value;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\r\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\r\n            offset: cstNode.offset,\r\n            end: cstNode.end,\r\n            length: cstNode.length,\r\n            range: cstNode.range,\r\n        };\r\n\r\n        if (node.$cstNode) {\r\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\r\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\r\n\r\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\r\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\r\n                if (propertyAssignments.length !== 0) {\r\n                    assignments[key] = propertyAssignments;\r\n                }\r\n            });\r\n\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\r\n        for (const [propertyName, item] of Object.entries(node)) {\r\n            if (Array.isArray(item)) {\r\n                for (let index = 0; index < item.length; index++) {\r\n                    const element = item[index];\r\n                    if (isIntermediateReference(element)) {\r\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\r\n                    } else if (isAstNode(element)) {\r\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\r\n                    }\r\n                }\r\n            } else if (isIntermediateReference(item)) {\r\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\r\n            } else if (isAstNode(item)) {\r\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\r\n            }\r\n        }\r\n        const mutable = node as Mutable<AstNode>;\r\n        mutable.$container = container;\r\n        mutable.$containerProperty = containerProperty;\r\n        mutable.$containerIndex = containerIndex;\r\n    }\r\n\r\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\r\n        let refText = reference.$refText;\r\n        let error = reference.$error;\r\n        if (reference.$ref) {\r\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\r\n            if (isAstNode(ref)) {\r\n                if (!refText) {\r\n                    refText = this.nameProvider.getName(ref);\r\n                }\r\n                return {\r\n                    $refText: refText ?? '',\r\n                    ref\r\n                };\r\n            } else {\r\n                error = ref;\r\n            }\r\n        }\r\n        if (error) {\r\n            const ref: Mutable<Reference> = {\r\n                $refText: refText ?? ''\r\n            };\r\n            ref.error = {\r\n                container,\r\n                property,\r\n                message: error,\r\n                reference: ref\r\n            };\r\n            return ref;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\r\n        try {\r\n            const fragmentIndex = uri.indexOf('#');\r\n            if (fragmentIndex === 0) {\r\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\r\n                if (!node) {\r\n                    return 'Could not resolve path: ' + uri;\r\n                }\r\n                return node;\r\n            }\r\n            if (fragmentIndex < 0) {\r\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\r\n                const document = this.langiumDocuments.getDocument(documentUri);\r\n                if (!document) {\r\n                    return 'Could not find document for URI: ' + uri;\r\n                }\r\n                return document.parseResult.value;\r\n            }\r\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\r\n            const document = this.langiumDocuments.getDocument(documentUri);\r\n            if (!document) {\r\n                return 'Could not find document for URI: ' + uri;\r\n            }\r\n            if (fragmentIndex === uri.length - 1) {\r\n                return document.parseResult.value;\r\n            }\r\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\r\n            if (!node) {\r\n                return 'Could not resolve URI: ' + uri;\r\n            }\r\n            return node;\r\n        } catch (err) {\r\n            return String(err);\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\r\nimport { assertUnreachable } from '../index.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport { isOperationCancelled } from '../utils/promise-utils.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\n\r\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\r\n    /** The AST node to which the diagnostic is attached. */\r\n    node: N;\r\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\r\n    property?: P;\r\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\r\n    keyword?: string;\r\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\r\n    index?: number;\r\n    /** If you want to create a diagnostic independent to any property, use the range property. */\r\n    range?: Range;\r\n    /** The diagnostic's code, which usually appear in the user interface. */\r\n    code?: integer | string;\r\n    /** An optional property to describe the error code. */\r\n    codeDescription?: CodeDescription;\r\n    /** Additional metadata about the diagnostic. */\r\n    tags?: DiagnosticTag[];\r\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\r\n    relatedInformation?: DiagnosticRelatedInformation[];\r\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\r\n    data?: unknown;\r\n}\r\n\r\n/**\r\n * Shape of information commonly used in the `data` field of diagnostics.\r\n */\r\nexport interface DiagnosticData {\r\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\r\n    code: string\r\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\r\n    actionSegment?: DocumentSegment\r\n    /** Specifies where to apply the code action in the form of a `Range`. */\r\n    actionRange?: Range\r\n}\r\n\r\n/**\r\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\r\n */\r\nexport function diagnosticData(code: string): DiagnosticData {\r\n    return { code };\r\n}\r\n\r\nexport type ValidationSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport type ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => void\r\n\r\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for describing functions which will be called once before or after all the AstNodes of an AST/Langium document are validated.\r\n *\r\n * The AST is represented by its root AstNode.\r\n *\r\n * The given validation acceptor helps to report some early or lately detected issues.\r\n *\r\n * The 'categories' indicate, which validation categories are executed for all the AstNodes.\r\n * This helps to tailor the preparations/tear-down logic to the actually executed checks on the nodes.\r\n *\r\n * It is recommended to support interrupts during long-running logic with 'interruptAndCheck(cancelToken)'.\r\n */\r\nexport type ValidationPreparation = (rootNode: AstNode, accept: ValidationAcceptor, categories: ValidationCategory[], cancelToken: CancellationToken) => MaybePromise<void>;\r\n\r\n/**\r\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\r\n *\r\n * ```ts\r\n *   const checks: ValidationChecks<StatemachineAstType> = {\r\n *       State: validator.checkStateNameStartsWithCapital\r\n *    };\r\n * ```\r\n *\r\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\r\n *\r\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\r\n */\r\nexport type ValidationChecks<T> = {\r\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\r\n} & {\r\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\r\n}\r\n\r\n/**\r\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\r\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\r\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\r\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\r\n * or with an explicit command, etc.\r\n *\r\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\r\n * for custom validation checks.\r\n */\r\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\r\n\r\nexport namespace ValidationCategory {\r\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\r\n}\r\n\r\ntype ValidationCheckEntry = {\r\n    check: ValidationCheck\r\n    category: ValidationCategory\r\n}\r\n\r\n/**\r\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\r\n */\r\nexport class ValidationRegistry {\r\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\r\n    private readonly reflection: AstReflection;\r\n\r\n    private entriesBefore: ValidationPreparation[] = [];\r\n    private entriesAfter: ValidationPreparation[] = [];\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.reflection = services.shared.AstReflection;\r\n    }\r\n\r\n    /**\r\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\r\n     * or an array of validation checks.\r\n     *\r\n     * @param checksRecord Set of validation checks to register.\r\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\r\n        if (category === 'built-in') {\r\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\r\n        }\r\n        for (const [type, ch] of Object.entries(checksRecord)) {\r\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\r\n            if (Array.isArray(callbacks)) {\r\n                for (const check of callbacks) {\r\n                    const entry: ValidationCheckEntry = {\r\n                        check: this.wrapValidationException(check, thisObj),\r\n                        category\r\n                    };\r\n                    this.addEntry(type, entry);\r\n                }\r\n            } else if (typeof callbacks === 'function') {\r\n                const entry: ValidationCheckEntry = {\r\n                    check: this.wrapValidationException(callbacks, thisObj),\r\n                    category\r\n                };\r\n                this.addEntry(type, entry);\r\n            } else {\r\n                assertUnreachable(callbacks);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\r\n        return async (node, accept, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\r\n        };\r\n    }\r\n\r\n    protected async handleException(functionality: () => MaybePromise<void>, messageContext: string, accept: ValidationAcceptor, node: AstNode): Promise<void> {\r\n        try {\r\n            await functionality();\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error(`${messageContext}:`, err);\r\n            if (err instanceof Error && err.stack) {\r\n                console.error(err.stack);\r\n            }\r\n            const messageDetails = err instanceof Error ? err.message : String(err);\r\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\r\n        }\r\n    }\r\n\r\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\r\n        if (type === 'AstNode') {\r\n            this.entries.add('AstNode', entry);\r\n            return;\r\n        }\r\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\r\n            this.entries.add(subtype, entry);\r\n        }\r\n    }\r\n\r\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\r\n        let checks = stream(this.entries.get(type))\r\n            .concat(this.entries.get('AstNode'));\r\n        if (categories) {\r\n            checks = checks.filter(entry => categories.includes(entry.category));\r\n        }\r\n        return checks.map(entry => entry.check);\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\r\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map for mapping names to nodes could be established.\r\n     * During the usual checks on the nodes, they are put into this map with their name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerBeforeDocument(checkBefore: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\r\n    }\r\n\r\n    /**\r\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\r\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\r\n     *\r\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\r\n     * here the map with all the collected nodes and their names is checked\r\n     * and validation hints are created for all nodes with the same name.\r\n     *\r\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\r\n     * Therefore it is recommended to clear stored information\r\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\r\n     * AND _after_ validating the AST to free memory by information which are no longer used.\r\n     *\r\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\r\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\r\n     */\r\n    registerAfterDocument(checkAfter: ValidationPreparation, thisObj: ThisParameterType<unknown> = this): void {\r\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\r\n    }\r\n\r\n    protected wrapPreparationException(check: ValidationPreparation, messageContext: string, thisObj: unknown): ValidationPreparation {\r\n        return async (rootNode, accept, categories, cancelToken) => {\r\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\r\n        };\r\n    }\r\n\r\n    get checksBefore(): ValidationPreparation[] {\r\n        return this.entriesBefore;\r\n    }\r\n\r\n    get checksAfter(): ValidationPreparation[] {\r\n        return this.entriesAfter;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { TextDocumentProvider } from './workspace/documents.js';\r\nimport { UriUtils, type URI } from './utils/uri-utils.js';\r\n\r\n/**\r\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\r\n * These are resolved via the URI of a text document.\r\n */\r\nexport interface ServiceRegistry {\r\n\r\n    /**\r\n     * Register a language via its injected services.\r\n     */\r\n    register(language: LangiumCoreServices): void;\r\n\r\n    /**\r\n     * Retrieve the language-specific services for the given URI. In case only one language is\r\n     * registered, it may be used regardless of the URI format.\r\n     */\r\n    getServices(uri: URI): LangiumCoreServices;\r\n\r\n    /**\r\n     * Check whether services are available for the given URI.\r\n     */\r\n    hasServices(uri: URI): boolean;\r\n\r\n    /**\r\n     * The full set of registered language services.\r\n     */\r\n    readonly all: readonly LangiumCoreServices[];\r\n}\r\n\r\n/**\r\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\r\n */\r\nexport class DefaultServiceRegistry implements ServiceRegistry {\r\n\r\n    protected singleton?: LangiumCoreServices;\r\n    protected readonly languageIdMap = new Map<string, LangiumCoreServices>();\r\n    protected readonly fileExtensionMap = new Map<string, LangiumCoreServices>();\r\n\r\n    /**\r\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\r\n     */\r\n    protected get map(): Map<string, LangiumCoreServices> | undefined {\r\n        return this.fileExtensionMap;\r\n    }\r\n\r\n    protected readonly textDocuments?: TextDocumentProvider;\r\n\r\n    constructor(services?: LangiumSharedCoreServices) {\r\n        this.textDocuments = services?.workspace.TextDocuments;\r\n    }\r\n\r\n    register(language: LangiumCoreServices): void {\r\n        const data = language.LanguageMetaData;\r\n        for (const ext of data.fileExtensions) {\r\n            if (this.fileExtensionMap.has(ext)) {\r\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\r\n            }\r\n            this.fileExtensionMap.set(ext, language);\r\n        }\r\n        this.languageIdMap.set(data.languageId, language);\r\n        if (this.languageIdMap.size === 1) {\r\n            this.singleton = language;\r\n        } else {\r\n            this.singleton = undefined;\r\n        }\r\n    }\r\n\r\n    getServices(uri: URI): LangiumCoreServices {\r\n        if (this.singleton !== undefined) {\r\n            return this.singleton;\r\n        }\r\n        if (this.languageIdMap.size === 0) {\r\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\r\n        }\r\n        const languageId = this.textDocuments?.get(uri)?.languageId;\r\n        if (languageId !== undefined) {\r\n            const services = this.languageIdMap.get(languageId);\r\n            if (services) {\r\n                return services;\r\n            }\r\n        }\r\n        const ext = UriUtils.extname(uri);\r\n        const services = this.fileExtensionMap.get(ext);\r\n        if (!services) {\r\n            if (languageId) {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\r\n            } else {\r\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\r\n            }\r\n        }\r\n        return services;\r\n    }\r\n\r\n    hasServices(uri: URI): boolean {\r\n        try {\r\n            this.getServices(uri);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get all(): readonly LangiumCoreServices[] {\r\n        return Array.from(this.languageIdMap.values());\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { MismatchedTokenException } from 'chevrotain';\r\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\r\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry, ValidationSeverity } from './validation-registry.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { tokenToRange } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { diagnosticData } from './validation-registry.js';\r\nimport type { LexingDiagnostic, LexingDiagnosticSeverity } from '../parser/token-builder.js';\r\n\r\nexport interface ValidationOptions {\r\n    /**\r\n     * If this is set, only the checks associated with these categories are executed; otherwise\r\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\r\n     */\r\n    categories?: ValidationCategory[];\r\n    /** If true, no further diagnostics are reported if there are lexing errors. */\r\n    stopAfterLexingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are parsing errors. */\r\n    stopAfterParsingErrors?: boolean\r\n    /** If true, no further diagnostics are reported if there are linking errors. */\r\n    stopAfterLinkingErrors?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service for validating `LangiumDocument`s.\r\n */\r\nexport interface DocumentValidator {\r\n    /**\r\n     * Validates the whole specified document.\r\n     *\r\n     * @param document specified document to validate\r\n     * @param options options to control the validation process\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\r\n}\r\n\r\nexport class DefaultDocumentValidator implements DocumentValidator {\r\n\r\n    protected readonly validationRegistry: ValidationRegistry;\r\n    protected readonly metadata: LanguageMetaData;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.validationRegistry = services.validation.ValidationRegistry;\r\n        this.metadata = services.LanguageMetaData;\r\n    }\r\n\r\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const parseResult = document.parseResult;\r\n        const diagnostics: Diagnostic[] = [];\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        if (!options.categories || options.categories.includes('built-in')) {\r\n            this.processLexingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processParsingErrors(parseResult, diagnostics, options);\r\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\r\n                return diagnostics;\r\n            }\r\n\r\n            this.processLinkingErrors(document, diagnostics, options);\r\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\r\n                return diagnostics;\r\n            }\r\n        }\r\n\r\n        // Process custom validations\r\n        try {\r\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\r\n        } catch (err) {\r\n            if (isOperationCancelled(err)) {\r\n                throw err;\r\n            }\r\n            console.error('An error occurred during validation:', err);\r\n        }\r\n\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        return diagnostics;\r\n    }\r\n\r\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...parseResult.lexerReport?.diagnostics ?? []] as LexingDiagnostic[];\r\n        for (const lexerDiagnostic of lexerDiagnostics) {\r\n            const severity = lexerDiagnostic.severity ?? 'error';\r\n            const diagnostic: Diagnostic = {\r\n                severity: toDiagnosticSeverity(severity),\r\n                range: {\r\n                    start: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! - 1\r\n                    },\r\n                    end: {\r\n                        line: lexerDiagnostic.line! - 1,\r\n                        character: lexerDiagnostic.column! + lexerDiagnostic.length - 1\r\n                    }\r\n                },\r\n                message: lexerDiagnostic.message,\r\n                data: toDiagnosticData(severity),\r\n                source: this.getSource()\r\n            };\r\n            diagnostics.push(diagnostic);\r\n        }\r\n    }\r\n\r\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const parserError of parseResult.parserErrors) {\r\n            let range: Range | undefined = undefined;\r\n            // We can run into the chevrotain error recovery here\r\n            // The token contained in the parser error might be automatically inserted\r\n            // In this case every position value will be `NaN`\r\n            if (isNaN(parserError.token.startOffset)) {\r\n                // Some special parser error types contain a `previousToken`\r\n                // We can simply append our diagnostic to that token\r\n                if ('previousToken' in parserError) {\r\n                    const token = (parserError as MismatchedTokenException).previousToken;\r\n                    if (!isNaN(token.startOffset)) {\r\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\r\n                        range = { start: position, end: position};\r\n                    } else {\r\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\r\n                        // Point to document start\r\n                        const position: Position = { line: 0, character: 0 };\r\n                        range = { start: position, end: position};\r\n                    }\r\n                }\r\n            } else {\r\n                range = tokenToRange(parserError.token);\r\n            }\r\n            if (range) {\r\n                const diagnostic: Diagnostic = {\r\n                    severity: toDiagnosticSeverity('error'),\r\n                    range,\r\n                    message: parserError.message,\r\n                    data: diagnosticData(DocumentValidator.ParsingError),\r\n                    source: this.getSource()\r\n                };\r\n                diagnostics.push(diagnostic);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\r\n        for (const reference of document.references) {\r\n            const linkingError = reference.error;\r\n            if (linkingError) {\r\n                const info: DiagnosticInfo<AstNode, string> = {\r\n                    node: linkingError.container,\r\n                    property: linkingError.property,\r\n                    index: linkingError.index,\r\n                    data: {\r\n                        code: DocumentValidator.LinkingError,\r\n                        containerType: linkingError.container.$type,\r\n                        property: linkingError.property,\r\n                        refText: linkingError.reference.$refText\r\n                    } satisfies LinkingErrorData\r\n                };\r\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\r\n        const validationItems: Diagnostic[] = [];\r\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N>) => {\r\n            validationItems.push(this.toDiagnostic(severity, message, info));\r\n        };\r\n\r\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\r\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\r\n\r\n        return validationItems;\r\n    }\r\n\r\n    protected async validateAstBefore(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksBefore = this.validationRegistry.checksBefore;\r\n        for (const checkBefore of checksBefore) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkBefore(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected async validateAstNodes(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        await Promise.all(streamAst(rootNode).map(async node => {\r\n            await interruptAndCheck(cancelToken);\r\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\r\n            for (const check of checks) {\r\n                await check(node, acceptor, cancelToken);\r\n            }\r\n        }));\r\n    }\r\n\r\n    protected async validateAstAfter(rootNode: AstNode, options: ValidationOptions, acceptor: ValidationAcceptor, cancelToken = CancellationToken.None): Promise<void> {\r\n        const checksAfter = this.validationRegistry.checksAfter;\r\n        for (const checkAfter of checksAfter) {\r\n            await interruptAndCheck(cancelToken);\r\n            await checkAfter(rootNode, acceptor, options.categories ?? [], cancelToken);\r\n        }\r\n    }\r\n\r\n    protected toDiagnostic<N extends AstNode>(severity: ValidationSeverity, message: string, info: DiagnosticInfo<N, string>): Diagnostic {\r\n        return {\r\n            message,\r\n            range: getDiagnosticRange(info),\r\n            severity: toDiagnosticSeverity(severity),\r\n            code: info.code,\r\n            codeDescription: info.codeDescription,\r\n            tags: info.tags,\r\n            relatedInformation: info.relatedInformation,\r\n            data: info.data,\r\n            source: this.getSource()\r\n        };\r\n    }\r\n\r\n    protected getSource(): string | undefined {\r\n        return this.metadata.languageId;\r\n    }\r\n}\r\n\r\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\r\n    if (info.range) {\r\n        return info.range;\r\n    }\r\n    let cstNode: CstNode | undefined;\r\n    if (typeof info.property === 'string') {\r\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\r\n    } else if (typeof info.keyword === 'string') {\r\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\r\n    }\r\n    cstNode ??= info.node.$cstNode;\r\n    if (!cstNode) {\r\n        return {\r\n            start: { line: 0, character: 0 },\r\n            end: { line: 0, character: 0 }\r\n        };\r\n    }\r\n    return cstNode.range;\r\n}\r\n\r\n/**\r\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\r\n *\r\n * @param severity The lexing diagnostic severity\r\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\r\n */\r\nexport function toDiagnosticSeverity(severity: LexingDiagnosticSeverity): DiagnosticSeverity {\r\n    switch (severity) {\r\n        case 'error':\r\n            return 1 satisfies typeof DiagnosticSeverity.Error;\r\n        case 'warning':\r\n            return 2 satisfies typeof DiagnosticSeverity.Warning;\r\n        case 'info':\r\n            return 3 satisfies typeof DiagnosticSeverity.Information;\r\n        case 'hint':\r\n            return 4 satisfies typeof DiagnosticSeverity.Hint;\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport function toDiagnosticData(severity: LexingDiagnosticSeverity): DiagnosticData {\r\n    switch (severity) {\r\n        case 'error':\r\n            return diagnosticData(DocumentValidator.LexingError);\r\n        case 'warning':\r\n            return diagnosticData(DocumentValidator.LexingWarning);\r\n        case 'info':\r\n            return diagnosticData(DocumentValidator.LexingInfo);\r\n        case 'hint':\r\n            return diagnosticData(DocumentValidator.LexingHint);\r\n        default:\r\n            throw new Error('Invalid diagnostic severity: ' + severity);\r\n    }\r\n}\r\n\r\nexport namespace DocumentValidator {\r\n    export const LexingError = 'lexing-error';\r\n    export const LexingWarning = 'lexing-warning';\r\n    export const LexingInfo = 'lexing-info';\r\n    export const LexingHint = 'lexing-hint';\r\n    export const ParsingError = 'parsing-error';\r\n    export const LinkingError = 'linking-error';\r\n}\r\n\r\nexport interface LinkingErrorData extends DiagnosticData {\r\n    containerType: string\r\n    property: string\r\n    refText: string\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport type { NameProvider } from '../references/name-provider.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { AstNodeLocator } from './ast-node-locator.js';\r\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { isLinkingError } from '../syntax-tree.js';\r\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\r\nimport { toDocumentSegment } from '../utils/cst-utils.js';\r\nimport { interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\n\r\n/**\r\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\r\n */\r\nexport interface AstNodeDescriptionProvider {\r\n\r\n    /**\r\n     * Create a description for the given AST node. This service method is typically used while indexing\r\n     * the contents of a document and during scope computation.\r\n     *\r\n     * @param node An AST node.\r\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\r\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\r\n     *     of your language.\r\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\r\n     */\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\r\n\r\n    protected readonly astNodeLocator: AstNodeLocator;\r\n    protected readonly nameProvider: NameProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.astNodeLocator = services.workspace.AstNodeLocator;\r\n        this.nameProvider = services.references.NameProvider;\r\n    }\r\n\r\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription {\r\n        const doc = document ?? getDocument(node);\r\n        name ??= this.nameProvider.getName(node);\r\n        const path = this.astNodeLocator.getAstNodePath(node);\r\n        if (!name) {\r\n            throw new Error(`Node at path ${path} has no name.`);\r\n        }\r\n        let nameNodeSegment: DocumentSegment | undefined;\r\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\r\n        return {\r\n            node,\r\n            name,\r\n            get nameSegment() {\r\n                return nameSegmentGetter();\r\n            },\r\n            selectionSegment: toDocumentSegment(node.$cstNode),\r\n            type: node.$type,\r\n            documentUri: doc.uri,\r\n            path\r\n        };\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Describes a cross-reference within a document or between two documents.\r\n */\r\nexport interface ReferenceDescription {\r\n    /** URI of the document that holds a reference */\r\n    sourceUri: URI\r\n    /** Path to AstNode that holds a reference */\r\n    sourcePath: string\r\n    /** Target document uri */\r\n    targetUri: URI\r\n    /** Path to the target AstNode inside the document */\r\n    targetPath: string\r\n    /** Segment of the reference text. */\r\n    segment: DocumentSegment\r\n    /** Marks a local reference i.e. a cross reference inside a document.   */\r\n    local?: boolean\r\n}\r\n\r\n/**\r\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\r\n * to determine which documents are affected and should be rebuilt when a document is changed.\r\n */\r\nexport interface ReferenceDescriptionProvider {\r\n    /**\r\n     * Create descriptions of all cross-references found in the given document. These descriptions are\r\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\r\n     * a document change is reported by the client.\r\n     *\r\n     * @param document The document in which to gather cross-references.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\r\n}\r\n\r\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\r\n\r\n    protected readonly nodeLocator: AstNodeLocator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.nodeLocator = services.workspace.AstNodeLocator;\r\n    }\r\n\r\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\r\n        const descr: ReferenceDescription[] = [];\r\n        const rootNode = document.parseResult.value;\r\n        for (const astNode of streamAst(rootNode)) {\r\n            await interruptAndCheck(cancelToken);\r\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\r\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\r\n                const description = this.createDescription(refInfo);\r\n                if (description) {\r\n                    descr.push(description);\r\n                }\r\n            });\r\n        }\r\n        return descr;\r\n    }\r\n\r\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\r\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\r\n        const refCstNode = refInfo.reference.$refNode;\r\n        if (!targetNodeDescr || !refCstNode) {\r\n            return undefined;\r\n        }\r\n        const docUri = getDocument(refInfo.container).uri;\r\n        return {\r\n            sourceUri: docUri,\r\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\r\n            targetUri: targetNodeDescr.documentUri,\r\n            targetPath: targetNodeDescr.path,\r\n            segment: toDocumentSegment(refCstNode),\r\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\r\n        };\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\nexport interface AsyncDisposable {\r\n    /**\r\n     * Dispose this object.\r\n     */\r\n    dispose(): Promise<void>;\r\n}\r\n\r\nexport namespace Disposable {\r\n    export function create(callback: () => Promise<void>): AsyncDisposable;\r\n    export function create(callback: () => void): Disposable;\r\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\r\n        return {\r\n            dispose: async () => await callback()\r\n        };\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode } from '../syntax-tree.js';\r\n\r\n/**\r\n * Language-specific service for locating an `AstNode` in a document.\r\n */\r\nexport interface AstNodeLocator {\r\n\r\n    /**\r\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\r\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\r\n     *\r\n     * @param node The `AstNode` for which to create the path.\r\n     * @returns a path represented by a `string` that identifies `node` inside its document.\r\n     * @see AstNodeLocator.getAstNode\r\n     */\r\n    getAstNodePath(node: AstNode): string;\r\n\r\n    /**\r\n     * Locates an `AstNode` inside another node by following the given path.\r\n     *\r\n     * @param node Parent element.\r\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\r\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\r\n     * @see AstNodeLocator.getAstNodePath\r\n     */\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\r\n\r\n}\r\n\r\nexport class DefaultAstNodeLocator implements AstNodeLocator {\r\n    protected segmentSeparator = '/';\r\n    protected indexSeparator = '@';\r\n\r\n    getAstNodePath(node: AstNode): string {\r\n        if (node.$container) {\r\n            const containerPath = this.getAstNodePath(node.$container);\r\n            const newSegment = this.getPathSegment(node);\r\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\r\n            return nodePath;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\r\n        if (!$containerProperty) {\r\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\r\n        }\r\n        if ($containerIndex !== undefined) {\r\n            return $containerProperty + this.indexSeparator + $containerIndex;\r\n        }\r\n        return $containerProperty;\r\n    }\r\n\r\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\r\n        const segments = path.split(this.segmentSeparator);\r\n        return segments.reduce((previousValue, currentValue) => {\r\n            if (!previousValue || currentValue.length === 0) {\r\n                return previousValue;\r\n            }\r\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\r\n            if (propertyIndex > 0) {\r\n                const property = currentValue.substring(0, propertyIndex);\r\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\r\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\r\n                return array?.[arrayIndex];\r\n            }\r\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\r\n        }, node) as T;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Emitter } from '../utils/event.js';\r\nimport type {\r\n    ConfigurationItem,\r\n    DidChangeConfigurationParams,\r\n    DidChangeConfigurationRegistrationOptions,\r\n    Disposable,\r\n    Event,\r\n    InitializeParams,\r\n    InitializedParams\r\n} from 'vscode-languageserver-protocol';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { Deferred } from '../utils/promise-utils.js';\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nexport interface ConfigurationProvider {\r\n\r\n    /**\r\n     * A promise that resolves when the configuration provider is ready to be used.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Returns a configuration value stored for the given language.\r\n     *\r\n     * @param language The language id\r\n     * @param configuration Configuration name\r\n     */\r\n    getConfiguration(language: string, configuration: string): Promise<any>;\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void;\r\n\r\n    /**\r\n     * Get notified after a configuration section has been updated.\r\n     */\r\n    onConfigurationSectionUpdate(callback: ConfigurationSectionUpdateListener): Disposable\r\n}\r\n\r\nexport interface ConfigurationInitializedParams extends InitializedParams {\r\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\r\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\r\n}\r\n\r\nexport interface ConfigurationSectionUpdate {\r\n    /**\r\n     * The name of the configuration section that has been updated.\r\n     */\r\n    section: string;\r\n\r\n    /**\r\n     * The updated configuration section.\r\n     */\r\n    configuration: any;\r\n}\r\n\r\nexport type ConfigurationSectionUpdateListener = (update: ConfigurationSectionUpdate) => void;\r\n\r\n/**\r\n * Base configuration provider for building up other configuration providers\r\n */\r\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected settings: Record<string, Record<string, any>> = {};\r\n    protected workspaceConfig = false;\r\n    protected onConfigurationSectionUpdateEmitter = new Emitter<ConfigurationSectionUpdate>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\r\n    }\r\n\r\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\r\n        if (this.workspaceConfig) {\r\n            if (params.register) {\r\n                // params.register(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n\r\n                const languages = this.serviceRegistry.all;\r\n                params.register({\r\n                    // Listen to configuration changes for all languages\r\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\r\n                });\r\n            }\r\n\r\n            if (params.fetchConfiguration) {\r\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\r\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\r\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\r\n                    // Fetch the configuration changes for all languages\r\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\r\n                });\r\n\r\n                // get workspace configurations (default scope URI)\r\n                const configs = await params.fetchConfiguration(configToUpdate);\r\n                configToUpdate.forEach((conf, idx) => {\r\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\r\n                });\r\n            }\r\n        }\r\n        this._ready.resolve();\r\n    }\r\n\r\n    /**\r\n     *  Updates the cached configurations using the `change` notification parameters.\r\n     *\r\n     * @param change The parameters of a change configuration notification.\r\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\r\n     */\r\n    updateConfiguration(change: DidChangeConfigurationParams): void {\r\n        if (!change.settings) {\r\n            return;\r\n        }\r\n        Object.keys(change.settings).forEach(section => {\r\n            const configuration = change.settings[section];\r\n            this.updateSectionConfiguration(section, configuration);\r\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\r\n        });\r\n    }\r\n\r\n    protected updateSectionConfiguration(section: string, configuration: any): void {\r\n        this.settings[section] = configuration;\r\n    }\r\n\r\n    /**\r\n    * Returns a configuration value stored for the given language.\r\n    *\r\n    * @param language The language id\r\n    * @param configuration Configuration name\r\n    */\r\n    async getConfiguration(language: string, configuration: string): Promise<any> {\r\n        await this.ready;\r\n\r\n        const sectionName = this.toSectionName(language);\r\n        if (this.settings[sectionName]) {\r\n            return this.settings[sectionName][configuration];\r\n        }\r\n    }\r\n\r\n    protected toSectionName(languageId: string): string {\r\n        return `${languageId}`;\r\n    }\r\n\r\n    get onConfigurationSectionUpdate(): Event<ConfigurationSectionUpdate> {\r\n        return this.onConfigurationSectionUpdateEmitter.event;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Disposable } from '../utils/disposable.js';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { MaybePromise } from '../utils/promise-utils.js';\r\nimport type { Deferred } from '../utils/promise-utils.js';\r\nimport type { ValidationOptions } from '../validation/document-validator.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory, TextDocumentProvider } from './documents.js';\r\nimport { MultiMap } from '../utils/collections.js';\r\nimport { OperationCancelled, interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { ValidationCategory } from '../validation/validation-registry.js';\r\nimport { DocumentState } from './documents.js';\r\n\r\nexport interface BuildOptions {\r\n    /**\r\n     * Control the validation phase with this option:\r\n     *  - `true` enables all validation checks and forces revalidating the documents\r\n     *  - `false` or `undefined` disables all validation checks\r\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\r\n     */\r\n    validation?: boolean | ValidationOptions\r\n}\r\n\r\nexport interface DocumentBuildState {\r\n    /** Whether a document has completed its last build process. */\r\n    completed: boolean\r\n    /** The options used for the last build process. */\r\n    options: BuildOptions\r\n    /** Additional information about the last build result. */\r\n    result?: {\r\n        validationChecks?: ValidationCategory[]\r\n    }\r\n}\r\n\r\n/**\r\n * Shared-service for building and updating `LangiumDocument`s.\r\n */\r\nexport interface DocumentBuilder {\r\n\r\n    /** The options used for rebuilding documents after an update. */\r\n    updateBuildOptions: BuildOptions;\r\n\r\n    /**\r\n     * Execute all necessary build steps for the given documents.\r\n     *\r\n     * @param documents Set of documents to be built.\r\n     * @param options Options for the document builder.\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * This method is called when a document change is detected. It updates the state of all\r\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\r\n     *\r\n     * @param changed URIs of changed or created documents\r\n     * @param deleted URIs of deleted documents\r\n     * @param cancelToken allows to cancel the current operation\r\n     * @throws `OperationCancelled` if cancellation is detected during execution\r\n     */\r\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Notify the given callback when a document update was triggered, but before any document\r\n     * is rebuilt. Listeners to this event should not perform any long-running task.\r\n     */\r\n    onUpdate(callback: DocumentUpdateListener): Disposable;\r\n\r\n    /**\r\n     * Notify the given callback when a set of documents has been built reaching the specified target state.\r\n     */\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\r\n\r\n    /**\r\n     * Notify the specified callback when a document has been built reaching the specified target state.\r\n     * Unlike {@link onBuildPhase} the listener is called for every single document.\r\n     *\r\n     * There are two main advantages compared to {@link onBuildPhase}:\r\n     * 1. If the build is cancelled, {@link onDocumentPhase} will still fire for documents that have reached a specific state.\r\n     *    Meanwhile, {@link onBuildPhase} won't fire for that state.\r\n     * 2. The {@link DocumentBuilder} ensures that all {@link DocumentPhaseListener} instances are called for a built document.\r\n     *    Even if the build is cancelled before those listeners were called.\r\n     */\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable;\r\n\r\n    /**\r\n     * Wait until the workspace has reached the specified state for all documents.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Wait until the document specified by the {@link uri} has reached the specified state.\r\n     *\r\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\r\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\r\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\r\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\r\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\r\n     */\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n}\r\n\r\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\r\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\r\nexport type DocumentPhaseListener = (built: LangiumDocument, cancelToken: CancellationToken) => void | Promise<void>\r\nexport class DefaultDocumentBuilder implements DocumentBuilder {\r\n\r\n    updateBuildOptions: BuildOptions = {\r\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\r\n        validation: {\r\n            categories: ['built-in', 'fast']\r\n        }\r\n    };\r\n\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\r\n    protected readonly textDocuments: TextDocumentProvider | undefined;\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\r\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\r\n    protected readonly documentPhaseListeners = new MultiMap<DocumentState, DocumentPhaseListener>();\r\n    protected readonly buildState = new Map<string, DocumentBuildState>();\r\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\r\n    protected currentState = DocumentState.Changed;\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\r\n        this.textDocuments = services.workspace.TextDocuments;\r\n        this.indexManager = services.workspace.IndexManager;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n    }\r\n\r\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\r\n        for (const document of documents) {\r\n            const key = document.uri.toString();\r\n            if (document.state === DocumentState.Validated) {\r\n                if (typeof options.validation === 'boolean' && options.validation) {\r\n                    // Force re-running all validation checks\r\n                    document.state = DocumentState.IndexedReferences;\r\n                    document.diagnostics = undefined;\r\n                    this.buildState.delete(key);\r\n                } else if (typeof options.validation === 'object') {\r\n                    const buildState = this.buildState.get(key);\r\n                    const previousCategories = buildState?.result?.validationChecks;\r\n                    if (previousCategories) {\r\n                        // Validation with explicit options was requested for a document that has already been partly validated.\r\n                        // In this case, we need to merge the previous validation categories with the new ones.\r\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\r\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\r\n                        if (categories.length > 0) {\r\n                            this.buildState.set(key, {\r\n                                completed: false,\r\n                                options: {\r\n                                    validation: {\r\n                                        ...options.validation,\r\n                                        categories\r\n                                    }\r\n                                },\r\n                                result: buildState.result\r\n                            });\r\n                            document.state = DocumentState.IndexedReferences;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Default: forget any previous build options\r\n                this.buildState.delete(key);\r\n            }\r\n        }\r\n        this.currentState = DocumentState.Changed;\r\n        await this.emitUpdate(documents.map(e => e.uri), []);\r\n        await this.buildDocuments(documents, options, cancelToken);\r\n    }\r\n\r\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\r\n        this.currentState = DocumentState.Changed;\r\n        // Remove all metadata of documents that are reported as deleted\r\n        for (const deletedUri of deleted) {\r\n            this.langiumDocuments.deleteDocument(deletedUri);\r\n            this.buildState.delete(deletedUri.toString());\r\n            this.indexManager.remove(deletedUri);\r\n        }\r\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\r\n        for (const changedUri of changed) {\r\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\r\n            if (!invalidated) {\r\n                // We create an unparsed, invalid document.\r\n                // This will be parsed as soon as we reach the first document builder phase.\r\n                // This allows to cancel the parsing process later in case we need it.\r\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\r\n                newDocument.state = DocumentState.Changed;\r\n                this.langiumDocuments.addDocument(newDocument);\r\n            }\r\n            this.buildState.delete(changedUri.toString());\r\n        }\r\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\r\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\r\n        this.langiumDocuments.all\r\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\r\n            .forEach(doc => {\r\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n                linker.unlink(doc);\r\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\r\n                doc.diagnostics = undefined;\r\n            });\r\n        // Notify listeners of the update\r\n        await this.emitUpdate(changed, deleted);\r\n        // Only allow interrupting the execution after all state changes are done\r\n        await interruptAndCheck(cancelToken);\r\n\r\n        // Collect and sort all documents that we should rebuild\r\n        const rebuildDocuments = this.sortDocuments(\r\n            this.langiumDocuments.all\r\n                .filter(doc =>\r\n                    // This includes those that were reported as changed and those that we selected for relinking\r\n                    doc.state < DocumentState.Linked\r\n                    // This includes those for which a previous build has been cancelled\r\n                    || !this.buildState.get(doc.uri.toString())?.completed\r\n                )\r\n                .toArray()\r\n        );\r\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\r\n    }\r\n\r\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\r\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\r\n    }\r\n\r\n    /**\r\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\r\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\r\n     *\r\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\r\n     * in files that are currently not opened in the editor.\r\n     */\r\n    protected sortDocuments(documents: LangiumDocument[]): LangiumDocument[] {\r\n        let left = 0;\r\n        let right = documents.length - 1;\r\n\r\n        while (left < right) {\r\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\r\n                left++;\r\n            }\r\n\r\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\r\n                right--;\r\n            }\r\n\r\n            if (left < right) {\r\n                [documents[left], documents[right]] = [documents[right], documents[left]];\r\n            }\r\n        }\r\n\r\n        return documents;\r\n    }\r\n\r\n    private hasTextDocument(doc: LangiumDocument): boolean {\r\n        return Boolean(this.textDocuments?.get(doc.uri));\r\n    }\r\n\r\n    /**\r\n     * Check whether the given document should be relinked after changes were found in the given URIs.\r\n     */\r\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        // Relink documents with linking errors -- maybe those references can be resolved now\r\n        if (document.references.some(ref => ref.error !== undefined)) {\r\n            return true;\r\n        }\r\n        // Check whether the document is affected by any of the changed URIs\r\n        return this.indexManager.isAffected(document, changedUris);\r\n    }\r\n\r\n    onUpdate(callback: DocumentUpdateListener): Disposable {\r\n        this.updateListeners.push(callback);\r\n        return Disposable.create(() => {\r\n            const index = this.updateListeners.indexOf(callback);\r\n            if (index >= 0) {\r\n                this.updateListeners.splice(index, 1);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Build the given documents by stepping through all build phases. If a document's state indicates\r\n     * that a certain build phase is already done, the phase is skipped for that document.\r\n     *\r\n     * @param documents The documents to build.\r\n     * @param options the {@link BuildOptions} to use.\r\n     * @param cancelToken A cancellation token that can be used to cancel the build.\r\n     * @returns A promise that resolves when the build is done.\r\n     */\r\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\r\n        this.prepareBuild(documents, options);\r\n        // 0. Parse content\r\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\r\n            this.langiumDocumentFactory.update(doc, cancelToken)\r\n        );\r\n        // 1. Index content\r\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\r\n            this.indexManager.updateContent(doc, cancelToken)\r\n        );\r\n        // 2. Compute scopes\r\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\r\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\r\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\r\n        });\r\n        // 3. Linking\r\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\r\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\r\n            return linker.link(doc, cancelToken);\r\n        });\r\n        // 4. Index references\r\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\r\n            this.indexManager.updateReferences(doc, cancelToken)\r\n        );\r\n        // 5. Validation\r\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\r\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\r\n            this.validate(doc, cancelToken)\r\n        );\r\n\r\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\r\n        for (const doc of documents) {\r\n            const state = this.buildState.get(doc.uri.toString());\r\n            if (state) {\r\n                state.completed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\r\n     *\r\n     * @param documents collection of documents to be built\r\n     * @param options the {@link BuildOptions} to use\r\n     */\r\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\r\n        for (const doc of documents) {\r\n            const key = doc.uri.toString();\r\n            const state = this.buildState.get(key);\r\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\r\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\r\n            // and continue where it was cancelled.\r\n            if (!state || state.completed) {\r\n                this.buildState.set(key, {\r\n                    completed: false,\r\n                    options,\r\n                    result: state?.result\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\r\n     *\r\n     * @param documents The array of documents to process.\r\n     * @param targetState The target {@link DocumentState} to bring the documents to.\r\n     * @param cancelToken A token that can be used to cancel the operation.\r\n     * @param callback A function to be called for each document.\r\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\r\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\r\n     */\r\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\r\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\r\n        const filtered = documents.filter(doc => doc.state < targetState);\r\n        for (const document of filtered) {\r\n            await interruptAndCheck(cancelToken);\r\n            await callback(document);\r\n            document.state = targetState;\r\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\r\n        }\r\n\r\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\r\n        // For example, this happens in case the cancellation triggers between the processing of two documents\r\n        // Or files that were picked up during the workspace initialization\r\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\r\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\r\n        this.currentState = targetState;\r\n    }\r\n\r\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\r\n        this.buildPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.buildPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    onDocumentPhase(targetState: DocumentState, callback: DocumentPhaseListener): Disposable {\r\n        this.documentPhaseListeners.add(targetState, callback);\r\n        return Disposable.create(() => {\r\n            this.documentPhaseListeners.delete(targetState, callback);\r\n        });\r\n    }\r\n\r\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\r\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\r\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\r\n        let uri: URI | undefined = undefined;\r\n        if (uriOrToken && 'path' in uriOrToken) {\r\n            uri = uriOrToken;\r\n        } else {\r\n            cancelToken = uriOrToken;\r\n        }\r\n        cancelToken ??= CancellationToken.None;\r\n        if (uri) {\r\n            const document = this.langiumDocuments.getDocument(uri);\r\n            if (document && document.state > state) {\r\n                return Promise.resolve(uri);\r\n            }\r\n        }\r\n        if (this.currentState >= state) {\r\n            return Promise.resolve(undefined);\r\n        } else if (cancelToken.isCancellationRequested) {\r\n            return Promise.reject(OperationCancelled);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const buildDisposable = this.onBuildPhase(state, () => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                if (uri) {\r\n                    const document = this.langiumDocuments.getDocument(uri);\r\n                    resolve(document?.uri);\r\n                } else {\r\n                    resolve(undefined);\r\n                }\r\n            });\r\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\r\n                buildDisposable.dispose();\r\n                cancelDisposable.dispose();\r\n                reject(OperationCancelled);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async notifyDocumentPhase(document: LangiumDocument, state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        const listeners = this.documentPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            try {\r\n                await listener(document, cancelToken);\r\n            } catch (err) {\r\n                // Ignore cancellation errors\r\n                // We want to finish the listeners before throwing\r\n                if (!isOperationCancelled(err)) {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\r\n        if (documents.length === 0) {\r\n            // Don't notify when no document has been processed\r\n            return;\r\n        }\r\n        const listeners = this.buildPhaseListeners.get(state);\r\n        const listenersCopy = listeners.slice();\r\n        for (const listener of listenersCopy) {\r\n            await interruptAndCheck(cancelToken);\r\n            await listener(documents, cancelToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given document should be validated during a build. The default\r\n     * implementation checks the `validation` property of the build options. If it's set to `true`\r\n     * or a `ValidationOptions` object, the document is included in the validation phase.\r\n     */\r\n    protected shouldValidate(document: LangiumDocument): boolean {\r\n        return Boolean(this.getBuildOptions(document).validation);\r\n    }\r\n\r\n    /**\r\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\r\n     * If the document already contains diagnostics, the new ones are added to the list.\r\n     */\r\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\r\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\r\n        const validationSetting = this.getBuildOptions(document).validation;\r\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\r\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\r\n        if (document.diagnostics) {\r\n            document.diagnostics.push(...diagnostics);\r\n        } else {\r\n            document.diagnostics = diagnostics;\r\n        }\r\n\r\n        // Store information about the executed validation in the build state\r\n        const state = this.buildState.get(document.uri.toString());\r\n        if (state) {\r\n            state.result ??= {};\r\n            const newCategories = options?.categories ?? ValidationCategory.all;\r\n            if (state.result.validationChecks) {\r\n                state.result.validationChecks.push(...newCategories);\r\n            } else {\r\n                state.result.validationChecks = [...newCategories];\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\r\n        return this.buildState.get(document.uri.toString())?.options ?? {};\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { ContextCache } from '../utils/caching.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { stream } from '../utils/stream.js';\r\nimport type { URI } from '../utils/uri-utils.js';\r\nimport { UriUtils } from '../utils/uri-utils.js';\r\nimport type { ReferenceDescription } from './ast-descriptions.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\n\r\n/**\r\n * The index manager is responsible for keeping metadata about symbols and cross-references\r\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\r\n * and completion. This service is shared between all languages of a language server.\r\n */\r\nexport interface IndexManager {\r\n\r\n    /**\r\n     * Removes the specified document URI from the index.\r\n     * Necessary when documents are deleted and not referenceable anymore.\r\n     *\r\n     * @param uri The URI of the document for which index data shall be removed\r\n     */\r\n    remove(uri: URI): void;\r\n\r\n    /**\r\n     * Updates the information about the exportable content of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Updates the information about the cross-references of a document inside the index.\r\n     *\r\n     * @param document Document to be updated\r\n     * @param cancelToken Indicates when to cancel the current operation.\r\n     * @throws `OperationCanceled` if a user action occurs during execution\r\n     */\r\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\r\n\r\n    /**\r\n     * Determine whether the given document could be affected by changes of the documents\r\n     * identified by the given URIs (second parameter). The document is typically regarded as\r\n     * affected if it contains a reference to any of the changed files.\r\n     *\r\n     * @param document Document to check whether it's affected\r\n     * @param changedUris URIs of the changed documents\r\n     */\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\r\n\r\n    /**\r\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\r\n     *\r\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\r\n     * @param uris If specified, only returns elements from the given URIs.\r\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\r\n     */\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\r\n\r\n    /**\r\n     * Returns all known references that are pointing to the given `targetNode`.\r\n     *\r\n     * @param targetNode the `AstNode` to look up references for\r\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\r\n     *\r\n     * @returns a `Stream` of references that are targeting the `targetNode`\r\n     */\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\r\n\r\n}\r\n\r\nexport class DefaultIndexManager implements IndexManager {\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly documents: LangiumDocuments;\r\n    protected readonly astReflection: AstReflection;\r\n\r\n    /**\r\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\r\n     * The key used in this map is the string representation of the specific document URI.\r\n     */\r\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\r\n    /**\r\n     * This is a cache for the `allElements()` method.\r\n     * It caches the descriptions from `symbolIndex` grouped by types.\r\n     */\r\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\r\n    /**\r\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\r\n     * This is used to compute which elements are affected by a document change\r\n     * and for finding references to an AST node.\r\n     */\r\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.documents = services.workspace.LangiumDocuments;\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.astReflection = services.AstReflection;\r\n    }\r\n\r\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\r\n        const targetDocUri = getDocument(targetNode).uri;\r\n        const result: ReferenceDescription[] = [];\r\n        this.referenceIndex.forEach(docRefs => {\r\n            docRefs.forEach(refDescr => {\r\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\r\n                    result.push(refDescr);\r\n                }\r\n            });\r\n        });\r\n        return stream(result);\r\n    }\r\n\r\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\r\n        let documentUris = stream(this.symbolIndex.keys());\r\n        if (uris) {\r\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\r\n        }\r\n        return documentUris\r\n            .map(uri => this.getFileDescriptions(uri, nodeType))\r\n            .flat();\r\n    }\r\n\r\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\r\n        if (!nodeType) {\r\n            return this.symbolIndex.get(uri) ?? [];\r\n        }\r\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\r\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\r\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\r\n        });\r\n        return descriptions;\r\n    }\r\n\r\n    remove(uri: URI): void {\r\n        const uriString = uri.toString();\r\n        this.symbolIndex.delete(uriString);\r\n        this.symbolByTypeIndex.clear(uriString);\r\n        this.referenceIndex.delete(uriString);\r\n    }\r\n\r\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\r\n        const uri = document.uri.toString();\r\n        this.symbolIndex.set(uri, exports);\r\n        this.symbolByTypeIndex.clear(uri);\r\n    }\r\n\r\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\r\n        const services = this.serviceRegistry.getServices(document.uri);\r\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\r\n        this.referenceIndex.set(document.uri.toString(), indexData);\r\n    }\r\n\r\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\r\n        const references = this.referenceIndex.get(document.uri.toString());\r\n        if (!references) {\r\n            return false;\r\n        }\r\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\r\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\r\nimport type { ServiceRegistry } from '../service-registry.js';\r\nimport type { LangiumSharedCoreServices } from '../services.js';\r\nimport { CancellationToken } from '../utils/cancellation.js';\r\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\r\nimport { URI, UriUtils } from '../utils/uri-utils.js';\r\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\r\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\r\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\r\nimport type { WorkspaceLock } from './workspace-lock.js';\r\n\r\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\r\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\r\nexport type { WorkspaceFolder };\r\n\r\n/**\r\n * The workspace manager is responsible for finding source files in the workspace.\r\n * This service is shared between all languages of a language server.\r\n */\r\nexport interface WorkspaceManager {\r\n\r\n    /** The options used for the initial workspace build. */\r\n    initialBuildOptions: BuildOptions | undefined;\r\n\r\n    /**\r\n     * A promise that resolves when the workspace manager is ready to be used.\r\n     * Use this to ensure that the workspace manager has finished its initialization.\r\n     */\r\n    readonly ready: Promise<void>;\r\n\r\n    /**\r\n     * The workspace folders of the current workspace.\r\n     * Available only after the `ready` promise resolves.\r\n     */\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialize` request.\r\n     */\r\n    initialize(params: InitializeParams): void;\r\n\r\n    /**\r\n     * When used in a language server context, this method is called when the server receives\r\n     * the `initialized` notification.\r\n     */\r\n    initialized(params: InitializedParams): Promise<void>;\r\n\r\n    /**\r\n     * Does the initial indexing of workspace folders.\r\n     * Collects information about exported and referenced AstNodes in\r\n     * each language file and stores it locally.\r\n     *\r\n     * @param folders The set of workspace folders to be indexed.\r\n     * @param cancelToken A cancellation token that can be used to cancel the operation.\r\n     *\r\n     * @throws OperationCancelled if a cancellation event has been detected\r\n     */\r\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\r\n\r\n}\r\n\r\nexport class DefaultWorkspaceManager implements WorkspaceManager {\r\n\r\n    initialBuildOptions: BuildOptions = {};\r\n\r\n    protected readonly serviceRegistry: ServiceRegistry;\r\n    protected readonly langiumDocuments: LangiumDocuments;\r\n    protected readonly documentBuilder: DocumentBuilder;\r\n    protected readonly fileSystemProvider: FileSystemProvider;\r\n    protected readonly mutex: WorkspaceLock;\r\n    protected readonly _ready = new Deferred<void>();\r\n    protected folders?: WorkspaceFolder[];\r\n\r\n    constructor(services: LangiumSharedCoreServices) {\r\n        this.serviceRegistry = services.ServiceRegistry;\r\n        this.langiumDocuments = services.workspace.LangiumDocuments;\r\n        this.documentBuilder = services.workspace.DocumentBuilder;\r\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\r\n        this.mutex = services.workspace.WorkspaceLock;\r\n    }\r\n\r\n    get ready(): Promise<void> {\r\n        return this._ready.promise;\r\n    }\r\n\r\n    get workspaceFolders(): readonly WorkspaceFolder[] | undefined {\r\n        return this.folders;\r\n    }\r\n\r\n    initialize(params: InitializeParams): void {\r\n        this.folders = params.workspaceFolders ?? undefined;\r\n    }\r\n\r\n    initialized(_params: InitializedParams): Promise<void> {\r\n        // Initialize the workspace even if there are no workspace folders\r\n        // We still want to load additional documents (language library or similar) during initialization\r\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\r\n    }\r\n\r\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\r\n        const documents = await this.performStartup(folders);\r\n        // Only after creating all documents do we check whether we need to cancel the initialization\r\n        // The document builder will later pick up on all unprocessed documents\r\n        await interruptAndCheck(cancelToken);\r\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\r\n    }\r\n\r\n    /**\r\n     * Performs the uninterruptable startup sequence of the workspace manager.\r\n     * This methods loads all documents in the workspace and other documents and returns them.\r\n     */\r\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\r\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\r\n        const documents: LangiumDocument[] = [];\r\n        const collector = (document: LangiumDocument) => {\r\n            documents.push(document);\r\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\r\n                this.langiumDocuments.addDocument(document);\r\n            }\r\n        };\r\n        // Even though we don't await the initialization of the workspace manager,\r\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\r\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\r\n        await this.loadAdditionalDocuments(folders, collector);\r\n        await Promise.all(\r\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\r\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\r\n        );\r\n        this._ready.resolve();\r\n        return documents;\r\n    }\r\n\r\n    /**\r\n     * Load all additional documents that shall be visible in the context of the given workspace\r\n     * folders and add them to the collector. This can be used to include built-in libraries of\r\n     * your language, which can be either loaded from provided files or constructed in memory.\r\n     */\r\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Determine the root folder of the source documents in the given workspace folder.\r\n     * The default implementation returns the URI of the workspace folder, but you can override\r\n     * this to return a subfolder like `src` instead.\r\n     */\r\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\r\n        return URI.parse(workspaceFolder.uri);\r\n    }\r\n\r\n    /**\r\n     * Traverse the file system folder identified by the given URI and its subfolders. All\r\n     * contained files that match the file extensions are added to the collector.\r\n     */\r\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\r\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\r\n        await Promise.all(content.map(async entry => {\r\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\r\n                if (entry.isDirectory) {\r\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\r\n                } else if (entry.isFile) {\r\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\r\n                    collector(document);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Determine whether the given folder entry shall be included while indexing the workspace.\r\n     */\r\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\r\n        const name = UriUtils.basename(entry.uri);\r\n        if (name.startsWith('.')) {\r\n            return false;\r\n        }\r\n        if (entry.isDirectory) {\r\n            return name !== 'node_modules' && name !== 'out';\r\n        } else if (entry.isFile) {\r\n            const extname = UriUtils.extname(entry.uri);\r\n            return fileExtensions.includes(extname);\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { ILexerErrorMessageProvider, ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { Lexer as ChevrotainLexer, defaultLexerErrorProvider } from 'chevrotain';\r\nimport type { LexingReport, TokenBuilder } from './token-builder.js';\r\n\r\nexport class DefaultLexerErrorMessageProvider implements ILexerErrorMessageProvider {\r\n\r\n    buildUnexpectedCharactersMessage(fullText: string, startOffset: number, length: number, line?: number, column?: number): string {\r\n        return defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\r\n    }\r\n\r\n    buildUnableToPopLexerModeMessage(token: IToken): string {\r\n        return defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\r\n    }\r\n}\r\n\r\nexport interface LexerResult {\r\n    /**\r\n     * A list of all tokens that were lexed from the input.\r\n     *\r\n     * Note that Langium requires the optional properties\r\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\r\n     */\r\n    tokens: IToken[];\r\n    /**\r\n     * Contains hidden tokens, usually comments.\r\n     */\r\n    hidden: IToken[];\r\n    errors: ILexingError[];\r\n    report?: LexingReport;\r\n}\r\n\r\nexport type TokenizeMode = 'full' | 'partial';\r\n\r\nexport interface TokenizeOptions {\r\n    mode?: TokenizeMode;\r\n}\r\n\r\nexport const DEFAULT_TOKENIZE_OPTIONS: TokenizeOptions = { mode: 'full' };\r\n\r\nexport interface Lexer {\r\n    readonly definition: TokenTypeDictionary;\r\n    tokenize(text: string, options?: TokenizeOptions): LexerResult;\r\n}\r\n\r\nexport class DefaultLexer implements Lexer {\r\n\r\n    protected readonly tokenBuilder: TokenBuilder;\r\n    protected readonly errorMessageProvider: ILexerErrorMessageProvider;\r\n    protected tokenTypes: TokenTypeDictionary;\r\n    protected chevrotainLexer: ChevrotainLexer;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\r\n        this.tokenBuilder = services.parser.TokenBuilder;\r\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\r\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\r\n        });\r\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\r\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\r\n        const production = services.LanguageMetaData.mode === 'production';\r\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\r\n            positionTracking: 'full',\r\n            skipValidations: production,\r\n            errorMessageProvider: this.errorMessageProvider\r\n        });\r\n    }\r\n\r\n    get definition(): TokenTypeDictionary {\r\n        return this.tokenTypes;\r\n    }\r\n\r\n    tokenize(text: string, _options: TokenizeOptions = DEFAULT_TOKENIZE_OPTIONS): LexerResult {\r\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\r\n        return {\r\n            tokens: chevrotainResult.tokens,\r\n            errors: chevrotainResult.errors,\r\n            hidden: chevrotainResult.groups.hidden ?? [],\r\n            report: this.tokenBuilder.flushLexingReport?.(text)\r\n        };\r\n    }\r\n\r\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\r\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\r\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\r\n        const res: TokenTypeDictionary = {};\r\n        tokens.forEach(token => res[token.name] = token);\r\n        return res;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenType array\r\n */\r\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\r\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\r\n */\r\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\r\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\r\n}\r\n\r\n/**\r\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\r\n */\r\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\r\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { Position, Range } from 'vscode-languageserver-types';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\r\nimport { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface JSDocComment extends JSDocValue {\r\n    readonly elements: JSDocElement[]\r\n    getTag(name: string): JSDocTag | undefined\r\n    getTags(name: string): JSDocTag[]\r\n}\r\n\r\nexport type JSDocElement = JSDocParagraph | JSDocTag;\r\n\r\nexport type JSDocInline = JSDocTag | JSDocLine;\r\n\r\nexport interface JSDocValue {\r\n    /**\r\n     * Represents the range that this JSDoc element occupies.\r\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\r\n     */\r\n    readonly range: Range\r\n    /**\r\n     * Renders this JSDoc element to a plain text representation.\r\n     */\r\n    toString(): string\r\n    /**\r\n     * Renders this JSDoc element to a markdown representation.\r\n     *\r\n     * @param options Rendering options to customize the markdown result.\r\n     */\r\n    toMarkdown(options?: JSDocRenderOptions): string\r\n}\r\n\r\nexport interface JSDocParagraph extends JSDocValue {\r\n    readonly inlines: JSDocInline[]\r\n}\r\n\r\nexport interface JSDocLine extends JSDocValue {\r\n    readonly text: string\r\n}\r\n\r\nexport interface JSDocTag extends JSDocValue {\r\n    readonly name: string\r\n    readonly content: JSDocParagraph\r\n    readonly inline: boolean\r\n}\r\n\r\nexport interface JSDocParseOptions {\r\n    /**\r\n     * The start symbol of your comment format. Defaults to `/**`.\r\n     */\r\n    readonly start?: RegExp | string\r\n    /**\r\n     * The symbol that start a line of your comment format. Defaults to `*`.\r\n     */\r\n    readonly line?: RegExp | string\r\n    /**\r\n     * The end symbol of your comment format. Defaults to `*\\/`.\r\n     */\r\n    readonly end?: RegExp | string\r\n}\r\n\r\nexport interface JSDocRenderOptions {\r\n    /**\r\n     * Determines the style for rendering tags. Defaults to `italic`.\r\n     */\r\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\r\n    /**\r\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\r\n     */\r\n    link?: 'code' | 'plain'\r\n    /**\r\n     * Custom tag rendering function.\r\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\r\n     */\r\n    renderTag?(tag: JSDocTag): string | undefined\r\n    /**\r\n     * Custom link rendering function. Accepts a link target and a display value for the link.\r\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\r\n     */\r\n    renderLink?(link: string, display: string): string | undefined\r\n}\r\n\r\n/**\r\n * Parses a JSDoc from a `CstNode` containing a comment.\r\n *\r\n * @param node A `CstNode` from a parsed Langium document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\r\n/**\r\n * Parses a JSDoc from a string comment.\r\n *\r\n * @param content A string containing the source of the JSDoc comment.\r\n * @param start The start position the comment occupies in the source document.\r\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\r\n */\r\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\r\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\r\n    let opts: JSDocParseOptions | undefined;\r\n    let position: Position | undefined;\r\n    if (typeof node === 'string') {\r\n        position = start as Position | undefined;\r\n        opts = options as JSDocParseOptions | undefined;\r\n    } else {\r\n        position = node.range.start;\r\n        opts = start as JSDocParseOptions | undefined;\r\n    }\r\n    if (!position) {\r\n        position = Position.create(0, 0);\r\n    }\r\n\r\n    const lines = getLines(node);\r\n    const normalizedOptions = normalizeOptions(opts);\r\n\r\n    const tokens = tokenize({\r\n        lines,\r\n        position,\r\n        options: normalizedOptions\r\n    });\r\n\r\n    return parseJSDocComment({\r\n        index: 0,\r\n        tokens,\r\n        position\r\n    });\r\n}\r\n\r\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\r\n    const normalizedOptions = normalizeOptions(options);\r\n    const lines = getLines(node);\r\n    if (lines.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    const first = lines[0];\r\n    const last = lines[lines.length - 1];\r\n    const firstRegex = normalizedOptions.start;\r\n    const lastRegex = normalizedOptions.end;\r\n\r\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\r\n}\r\n\r\nfunction getLines(node: CstNode | string): string[] {\r\n    let content = '';\r\n    if (typeof node === 'string') {\r\n        content = node;\r\n    } else {\r\n        content = node.text;\r\n    }\r\n    const lines = content.split(NEWLINE_REGEXP);\r\n    return lines;\r\n}\r\n\r\n// Tokenization\r\n\r\ninterface JSDocToken {\r\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\r\n    content: string\r\n    range: Range\r\n}\r\n\r\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\r\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\r\n\r\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n    let currentLine = context.position.line;\r\n    let currentCharacter = context.position.character;\r\n    for (let i = 0; i < context.lines.length; i++) {\r\n        const first = i === 0;\r\n        const last = i === context.lines.length - 1;\r\n        let line = context.lines[i];\r\n        let index = 0;\r\n\r\n        if (first && context.options.start) {\r\n            const match = context.options.start?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        } else {\r\n            const match = context.options.line?.exec(line);\r\n            if (match) {\r\n                index = match.index + match[0].length;\r\n            }\r\n        }\r\n        if (last) {\r\n            const match = context.options.end?.exec(line);\r\n            if (match) {\r\n                line = line.substring(0, match.index);\r\n            }\r\n        }\r\n\r\n        line = line.substring(0, lastCharacter(line));\r\n        const whitespaceEnd = skipWhitespace(line, index);\r\n\r\n        if (whitespaceEnd >= line.length) {\r\n            // Only create a break token when we already have previous tokens\r\n            if (tokens.length > 0) {\r\n                const position = Position.create(currentLine, currentCharacter);\r\n                tokens.push({\r\n                    type: 'break',\r\n                    content: '',\r\n                    range: Range.create(position, position)\r\n                });\r\n            }\r\n        } else {\r\n            tagRegex.lastIndex = index;\r\n            const tagMatch = tagRegex.exec(line);\r\n            if (tagMatch) {\r\n                const fullMatch = tagMatch[0];\r\n                const value = tagMatch[1];\r\n                const start = Position.create(currentLine, currentCharacter + index);\r\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\r\n                tokens.push({\r\n                    type: 'tag',\r\n                    content: value,\r\n                    range: Range.create(start, end)\r\n                });\r\n                index += fullMatch.length;\r\n                index = skipWhitespace(line, index);\r\n            }\r\n\r\n            if (index < line.length) {\r\n                const rest = line.substring(index);\r\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\r\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\r\n            }\r\n        }\r\n\r\n        currentLine++;\r\n        currentCharacter = 0;\r\n    }\r\n\r\n    // Remove last break token if there is one\r\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\r\n        return tokens.slice(0, -1);\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\r\n    const tokens: JSDocToken[] = [];\r\n\r\n    if (tags.length === 0) {\r\n        const start = Position.create(lineIndex, characterIndex);\r\n        const end = Position.create(lineIndex, characterIndex + line.length);\r\n        tokens.push({\r\n            type: 'text',\r\n            content: line,\r\n            range: Range.create(start, end)\r\n        });\r\n    } else {\r\n        let lastIndex = 0;\r\n        for (const match of tags) {\r\n            const matchIndex = match.index!;\r\n            const startContent = line.substring(lastIndex, matchIndex);\r\n            if (startContent.length > 0) {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: line.substring(lastIndex, matchIndex),\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + characterIndex),\r\n                        Position.create(lineIndex, matchIndex + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            let offset = startContent.length + 1;\r\n            const tagName = match[1];\r\n            tokens.push({\r\n                type: 'inline-tag',\r\n                content: tagName,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\r\n                )\r\n            });\r\n            offset += tagName.length;\r\n            if (match.length === 4) {\r\n                offset += match[2].length;\r\n                const value = match[3];\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: value,\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\r\n                    )\r\n                });\r\n            } else {\r\n                tokens.push({\r\n                    type: 'text',\r\n                    content: '',\r\n                    range: Range.create(\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\r\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\r\n                    )\r\n                });\r\n            }\r\n            lastIndex = matchIndex + match[0].length;\r\n        }\r\n        const endContent = line.substring(lastIndex);\r\n        if (endContent.length > 0) {\r\n            tokens.push({\r\n                type: 'text',\r\n                content: endContent,\r\n                range: Range.create(\r\n                    Position.create(lineIndex, lastIndex + characterIndex),\r\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\r\n                )\r\n            });\r\n        }\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nconst nonWhitespaceRegex = /\\S/;\r\nconst whitespaceEndRegex = /\\s*$/;\r\n\r\nfunction skipWhitespace(line: string, index: number): number {\r\n    const match = line.substring(index).match(nonWhitespaceRegex);\r\n    if (match) {\r\n        return index + match.index!;\r\n    } else {\r\n        return line.length;\r\n    }\r\n}\r\n\r\nfunction lastCharacter(line: string): number | undefined {\r\n    const match = line.match(whitespaceEndRegex);\r\n    if (match && typeof match.index === 'number') {\r\n        return match.index;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Parsing\r\n\r\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\r\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\r\n    if (context.tokens.length === 0) {\r\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\r\n    }\r\n    const elements: JSDocElement[] = [];\r\n    while (context.index < context.tokens.length) {\r\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\r\n        if (element) {\r\n            elements.push(element);\r\n        }\r\n    }\r\n    const start = elements[0]?.range.start ?? startPosition;\r\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\r\n    return new JSDocCommentImpl(elements, Range.create(start, end));\r\n}\r\n\r\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\r\n    const next = context.tokens[context.index];\r\n    if (next.type === 'tag') {\r\n        return parseJSDocTag(context, false);\r\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\r\n        return parseJSDocText(context);\r\n    } else {\r\n        appendEmptyLine(next, last);\r\n        context.index++;\r\n        return undefined;\r\n    }\r\n}\r\n\r\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\r\n    if (element) {\r\n        const line = new JSDocLineImpl('', token.range);\r\n        if ('inlines' in element) {\r\n            element.inlines.push(line);\r\n        } else {\r\n            element.content.inlines.push(line);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\r\n    let token = context.tokens[context.index];\r\n    const firstToken = token;\r\n    let lastToken = token;\r\n    const lines: JSDocInline[] = [];\r\n    while (token && token.type !== 'break' && token.type !== 'tag') {\r\n        lines.push(parseJSDocInline(context));\r\n        lastToken = token;\r\n        token = context.tokens[context.index];\r\n    }\r\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\r\n}\r\n\r\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\r\n    const token = context.tokens[context.index];\r\n    if (token.type === 'inline-tag') {\r\n        return parseJSDocTag(context, true);\r\n    } else {\r\n        return parseJSDocLine(context);\r\n    }\r\n}\r\n\r\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\r\n    const tagToken = context.tokens[context.index++];\r\n    const name = tagToken.content.substring(1);\r\n    const nextToken = context.tokens[context.index];\r\n    if (nextToken?.type === 'text') {\r\n        if (inline) {\r\n            const docLine = parseJSDocLine(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                new JSDocTextImpl([docLine], docLine.range),\r\n                inline,\r\n                Range.create(tagToken.range.start, docLine.range.end)\r\n            );\r\n        } else {\r\n            const textDoc = parseJSDocText(context);\r\n            return new JSDocTagImpl(\r\n                name,\r\n                textDoc,\r\n                inline,\r\n                Range.create(tagToken.range.start, textDoc.range.end)\r\n            );\r\n        }\r\n    } else {\r\n        const range = tagToken.range;\r\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\r\n    }\r\n}\r\n\r\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\r\n    const token = context.tokens[context.index++];\r\n    return new JSDocLineImpl(token.content, token.range);\r\n}\r\n\r\ninterface NormalizedOptions {\r\n    start?: RegExp\r\n    end?: RegExp\r\n    line?: RegExp\r\n}\r\n\r\ninterface TokenizationContext {\r\n    position: Position\r\n    lines: string[]\r\n    options: NormalizedOptions\r\n}\r\n\r\ninterface ParseContext {\r\n    position: Position\r\n    tokens: JSDocToken[]\r\n    index: number\r\n}\r\n\r\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\r\n    if (!options) {\r\n        return normalizeOptions({\r\n            start: '/**',\r\n            end: '*/',\r\n            line: '*'\r\n        });\r\n    }\r\n    const { start, end, line } = options;\r\n    return {\r\n        start: normalizeOption(start, true),\r\n        end: normalizeOption(end, false),\r\n        line: normalizeOption(line, true)\r\n    };\r\n}\r\n\r\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\r\n    if (typeof option === 'string' || typeof option === 'object') {\r\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\r\n        if (start) {\r\n            return new RegExp(`^\\\\s*${escaped}`);\r\n        } else {\r\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\r\n        }\r\n    } else {\r\n        return option;\r\n    }\r\n}\r\n\r\nclass JSDocCommentImpl implements JSDocComment {\r\n\r\n    readonly elements: JSDocElement[];\r\n    readonly range: Range;\r\n\r\n    constructor(elements: JSDocElement[], range: Range) {\r\n        this.elements = elements;\r\n        this.range = range;\r\n    }\r\n\r\n    getTag(name: string): JSDocTag | undefined {\r\n        return this.getAllTags().find(e => e.name === name);\r\n    }\r\n\r\n    getTags(name: string): JSDocTag[] {\r\n        return this.getAllTags().filter(e => e.name === name);\r\n    }\r\n\r\n    private getAllTags(): JSDocTag[] {\r\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\r\n    }\r\n\r\n    toString(): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toString();\r\n            } else {\r\n                const text = element.toString();\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let value = '';\r\n        for (const element of this.elements) {\r\n            if (value.length === 0) {\r\n                value = element.toMarkdown(options);\r\n            } else {\r\n                const text = element.toMarkdown(options);\r\n                value += fillNewlines(value) + text;\r\n            }\r\n        }\r\n        return value.trim();\r\n    }\r\n}\r\n\r\nclass JSDocTagImpl implements JSDocTag {\r\n    name: string;\r\n    content: JSDocParagraph;\r\n    range: Range;\r\n    inline: boolean;\r\n\r\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\r\n        this.name = name;\r\n        this.content = content;\r\n        this.inline = inline;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = `@${this.name}`;\r\n        const content = this.content.toString();\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\r\n    }\r\n\r\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\r\n        const content = this.content.toMarkdown(options);\r\n        if (this.inline) {\r\n            const rendered = renderInlineTag(this.name, content, options ?? {});\r\n            if (typeof rendered === 'string') {\r\n                return rendered;\r\n            }\r\n        }\r\n        let marker = '';\r\n        if (options?.tag === 'italic' || options?.tag === undefined) {\r\n            marker = '*';\r\n        } else if (options?.tag === 'bold') {\r\n            marker = '**';\r\n        } else if (options?.tag === 'bold-italic') {\r\n            marker = '***';\r\n        }\r\n        let text = `${marker}@${this.name}${marker}`;\r\n        if (this.content.inlines.length === 1) {\r\n            text = `${text} — ${content}`;\r\n        } else if (this.content.inlines.length > 1) {\r\n            text = `${text}\\n${content}`;\r\n        }\r\n        if (this.inline) {\r\n            // Inline tags are surrounded by curly braces\r\n            return `{${text}}`;\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n}\r\n\r\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\r\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\r\n        const index = content.indexOf(' ');\r\n        let display = content;\r\n        if (index > 0) {\r\n            const displayStart = skipWhitespace(content, index);\r\n            display = content.substring(displayStart);\r\n            content = content.substring(0, index);\r\n        }\r\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\r\n            // Surround the display value in a markdown inline code block\r\n            display = `\\`${display}\\``;\r\n        }\r\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\r\n        return renderedLink;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction renderLinkDefault(content: string, display: string): string {\r\n    try {\r\n        URI.parse(content, true);\r\n        return `[${display}](${content})`;\r\n    } catch {\r\n        return content;\r\n    }\r\n}\r\n\r\nclass JSDocTextImpl implements JSDocParagraph {\r\n    inlines: JSDocInline[];\r\n    range: Range;\r\n\r\n    constructor(lines: JSDocInline[], range: Range) {\r\n        this.inlines = lines;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toString();\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    toMarkdown(options?: JSDocRenderOptions): string {\r\n        let text = '';\r\n        for (let i = 0; i < this.inlines.length; i++) {\r\n            const inline = this.inlines[i];\r\n            const next = this.inlines[i + 1];\r\n            text += inline.toMarkdown(options);\r\n            if (next && next.range.start.line > inline.range.start.line) {\r\n                text += '\\n';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n}\r\n\r\nclass JSDocLineImpl implements JSDocLine {\r\n    text: string;\r\n    range: Range;\r\n\r\n    constructor(text: string, range: Range) {\r\n        this.text = text;\r\n        this.range = range;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n    toMarkdown(): string {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\nfunction fillNewlines(text: string): string {\r\n    if (text.endsWith('\\n')) {\r\n        return '\\n';\r\n    } else {\r\n        return '\\n\\n';\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\r\nimport type { IndexManager } from '../workspace/index-manager.js';\r\nimport type { CommentProvider } from './comment-provider.js';\r\nimport type { JSDocTag } from './jsdoc.js';\r\nimport { getDocument } from '../utils/ast-utils.js';\r\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\r\n\r\n/**\r\n * Provides documentation for AST nodes.\r\n */\r\nexport interface DocumentationProvider {\r\n    /**\r\n     * Returns a markdown documentation string for the specified AST node.\r\n     *\r\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\r\n     */\r\n    getDocumentation(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class JSDocDocumentationProvider implements DocumentationProvider {\r\n\r\n    protected readonly indexManager: IndexManager;\r\n    protected readonly commentProvider: CommentProvider;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.indexManager = services.shared.workspace.IndexManager;\r\n        this.commentProvider = services.documentation.CommentProvider;\r\n    }\r\n\r\n    getDocumentation(node: AstNode): string | undefined {\r\n        const comment = this.commentProvider.getComment(node);\r\n        if (comment && isJSDoc(comment)) {\r\n            const parsedJSDoc = parseJSDoc(comment);\r\n            return parsedJSDoc.toMarkdown({\r\n                renderLink: (link, display) => {\r\n                    return this.documentationLinkRenderer(node, link, display);\r\n                },\r\n                renderTag: (tag) => {\r\n                    return this.documentationTagRenderer(node, tag);\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\r\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\r\n        if (description && description.nameSegment) {\r\n            const line = description.nameSegment.range.start.line + 1;\r\n            const character = description.nameSegment.range.start.character + 1;\r\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\r\n            return `[${display}](${uri.toString()})`;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\r\n        // Fall back to the default tag rendering\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const document = getDocument(node);\r\n        const precomputed = document.precomputedScopes;\r\n        if (!precomputed) {\r\n            return undefined;\r\n        }\r\n        let currentNode: AstNode | undefined = node;\r\n        do {\r\n            const allDescriptions = precomputed.get(currentNode);\r\n            const description = allDescriptions.find(e => e.name === name);\r\n            if (description) {\r\n                return description;\r\n            }\r\n            currentNode = currentNode.$container;\r\n        } while (currentNode);\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\r\n        const description = this.indexManager.allElements().find(e => e.name === name);\r\n        return description;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CancellationToken } from '../utils/cancellation.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\r\nimport type { Hydrator } from '../serializer/hydrator.js';\r\nimport type { Event } from '../utils/event.js';\r\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\r\nimport { Emitter } from '../utils/event.js';\r\n\r\n/**\r\n * Async parser that allows cancellation of the current parsing process.\r\n *\r\n * @remarks\r\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\r\n * The default implementation is not actually async. It just wraps the sync parser in a promise. A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport interface AsyncParser {\r\n    /**\r\n     * Parses the given text and returns the parse result.\r\n     *\r\n     * @param text The text to parse.\r\n     * @param cancelToken A cancellation token that can be used to cancel the parsing process.\r\n     * @returns A promise that resolves to the parse result.\r\n     *\r\n     * @throws `OperationCancelled` if the parsing process is cancelled.\r\n     */\r\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\r\n}\r\n\r\n/**\r\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\r\n *\r\n * @remarks\r\n * A real implementation would create worker threads or web workers to offload the parsing work.\r\n */\r\nexport class DefaultAsyncParser implements AsyncParser {\r\n\r\n    protected readonly syncParser: LangiumParser;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.syncParser = services.parser.LangiumParser;\r\n    }\r\n\r\n    parse<T extends AstNode>(text: string, _cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        return Promise.resolve(this.syncParser.parse<T>(text));\r\n    }\r\n}\r\n\r\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\r\n\r\n    /**\r\n     * The thread count determines how many threads are used to parse files in parallel.\r\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\r\n     */\r\n    protected threadCount = 8;\r\n    /**\r\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\r\n     * The default value is 200(ms).\r\n     */\r\n    protected terminationDelay = 200;\r\n    protected workerPool: ParserWorker[] = [];\r\n    protected queue: Array<Deferred<ParserWorker>> = [];\r\n\r\n    protected readonly hydrator: Hydrator;\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.hydrator = services.serializer.Hydrator;\r\n    }\r\n\r\n    protected initializeWorkers(): void {\r\n        while (this.workerPool.length < this.threadCount) {\r\n            const worker = this.createWorker();\r\n            worker.onReady(() => {\r\n                if (this.queue.length > 0) {\r\n                    const deferred = this.queue.shift();\r\n                    if (deferred) {\r\n                        worker.lock();\r\n                        deferred.resolve(worker);\r\n                    }\r\n                }\r\n            });\r\n            this.workerPool.push(worker);\r\n        }\r\n    }\r\n\r\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\r\n        const worker = await this.acquireParserWorker(cancelToken);\r\n        const deferred = new Deferred<ParseResult<T>>();\r\n        let timeout: NodeJS.Timeout | undefined;\r\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\r\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\r\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\r\n        const cancellation = cancelToken.onCancellationRequested(() => {\r\n            timeout = setTimeout(() => {\r\n                this.terminateWorker(worker);\r\n            }, this.terminationDelay);\r\n        });\r\n        worker.parse(text).then(result => {\r\n            const hydrated = this.hydrator.hydrate<T>(result);\r\n            deferred.resolve(hydrated);\r\n        }).catch(err => {\r\n            deferred.reject(err);\r\n        }).finally(() => {\r\n            cancellation.dispose();\r\n            clearTimeout(timeout);\r\n        });\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected terminateWorker(worker: ParserWorker): void {\r\n        worker.terminate();\r\n        const index = this.workerPool.indexOf(worker);\r\n        if (index >= 0) {\r\n            this.workerPool.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\r\n        this.initializeWorkers();\r\n        for (const worker of this.workerPool) {\r\n            if (worker.ready) {\r\n                worker.lock();\r\n                return worker;\r\n            }\r\n        }\r\n        const deferred = new Deferred<ParserWorker>();\r\n        cancelToken.onCancellationRequested(() => {\r\n            const index = this.queue.indexOf(deferred);\r\n            if (index >= 0) {\r\n                this.queue.splice(index, 1);\r\n            }\r\n            deferred.reject(OperationCancelled);\r\n        });\r\n        this.queue.push(deferred);\r\n        return deferred.promise;\r\n    }\r\n\r\n    protected abstract createWorker(): ParserWorker;\r\n}\r\n\r\nexport type WorkerMessagePost = (message: unknown) => void;\r\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\r\n\r\nexport class ParserWorker {\r\n\r\n    protected readonly sendMessage: WorkerMessagePost;\r\n    protected readonly _terminate: () => void;\r\n    protected readonly onReadyEmitter = new Emitter<void>();\r\n\r\n    protected deferred = new Deferred<ParseResult>();\r\n    protected _ready = true;\r\n    protected _parsing = false;\r\n\r\n    get ready(): boolean {\r\n        return this._ready;\r\n    }\r\n\r\n    get onReady(): Event<void> {\r\n        return this.onReadyEmitter.event;\r\n    }\r\n\r\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\r\n        this.sendMessage = sendMessage;\r\n        this._terminate = terminate;\r\n        onMessage(result => {\r\n            const parseResult = result as ParseResult;\r\n            this.deferred.resolve(parseResult);\r\n            this.unlock();\r\n        });\r\n        onError(error => {\r\n            this.deferred.reject(error);\r\n            this.unlock();\r\n        });\r\n    }\r\n\r\n    terminate(): void {\r\n        this.deferred.reject(OperationCancelled);\r\n        this._terminate();\r\n    }\r\n\r\n    lock(): void {\r\n        this._ready = false;\r\n    }\r\n\r\n    unlock(): void {\r\n        this._parsing = false;\r\n        this._ready = true;\r\n        this.onReadyEmitter.fire();\r\n    }\r\n\r\n    parse(text: string): Promise<ParseResult> {\r\n        if (this._parsing) {\r\n            throw new Error('Parser worker is busy');\r\n        }\r\n        this._parsing = true;\r\n        this.deferred = new Deferred();\r\n        this.sendMessage(text);\r\n        return this.deferred.promise;\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { type AbstractCancellationTokenSource, CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\r\nimport { Deferred, isOperationCancelled, startCancelableOperation, type MaybePromise } from '../utils/promise-utils.js';\r\n\r\n/**\r\n * Utility service to execute mutually exclusive actions.\r\n */\r\nexport interface WorkspaceLock {\r\n    /**\r\n     * Performs a single async action, like initializing the workspace or processing document changes.\r\n     * Only one action will be executed at a time.\r\n     *\r\n     * When another action is queued up, the token provided for the action will be cancelled.\r\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\r\n     */\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\r\n\r\n    /**\r\n     * Performs a single action, like computing completion results or providing workspace symbols.\r\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\r\n     *\r\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\r\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\r\n     *\r\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\r\n     */\r\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\r\n\r\n    /**\r\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\r\n     */\r\n    cancelWrite(): void;\r\n}\r\n\r\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\r\n\r\ninterface LockEntry {\r\n    action: LockAction<unknown>;\r\n    deferred: Deferred<unknown>;\r\n    cancellationToken: CancellationToken;\r\n}\r\n\r\nexport class DefaultWorkspaceLock implements WorkspaceLock {\r\n\r\n    private previousTokenSource: AbstractCancellationTokenSource = new CancellationTokenSource();\r\n    private writeQueue: LockEntry[] = [];\r\n    private readQueue: LockEntry[] = [];\r\n    private done = true;\r\n\r\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\r\n        this.cancelWrite();\r\n        const tokenSource = startCancelableOperation();\r\n        this.previousTokenSource = tokenSource;\r\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\r\n    }\r\n\r\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\r\n        return this.enqueue(this.readQueue, action);\r\n    }\r\n\r\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken = CancellationToken.None): Promise<T> {\r\n        const deferred = new Deferred<unknown>();\r\n        const entry: LockEntry = {\r\n            action,\r\n            deferred,\r\n            cancellationToken\r\n        };\r\n        queue.push(entry);\r\n        this.performNextOperation();\r\n        return deferred.promise as Promise<T>;\r\n    }\r\n\r\n    private async performNextOperation(): Promise<void> {\r\n        if (!this.done) {\r\n            return;\r\n        }\r\n        const entries: LockEntry[] = [];\r\n        if (this.writeQueue.length > 0) {\r\n            // Just perform the next write action\r\n            entries.push(this.writeQueue.shift()!);\r\n        } else if (this.readQueue.length > 0) {\r\n            // Empty the read queue and perform all actions in parallel\r\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\r\n        } else {\r\n            return;\r\n        }\r\n        this.done = false;\r\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\r\n            try {\r\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\r\n                const result = await Promise.resolve().then(() => action(cancellationToken));\r\n                deferred.resolve(result);\r\n            } catch (err) {\r\n                if (isOperationCancelled(err)) {\r\n                    // If the operation was cancelled, we don't want to reject the promise\r\n                    deferred.resolve(undefined);\r\n                } else {\r\n                    deferred.reject(err);\r\n                }\r\n            }\r\n        }));\r\n        this.done = true;\r\n        this.performNextOperation();\r\n    }\r\n\r\n    cancelWrite(): void {\r\n        this.previousTokenSource.cancel();\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2024 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\r\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\r\nimport type { Linker } from '../references/linker.js';\r\nimport type { Lexer } from '../parser/lexer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { ParseResult } from '../parser/langium-parser.js';\r\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\r\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\r\nimport { streamAst } from '../utils/ast-utils.js';\r\nimport { BiMap } from '../utils/collections.js';\r\nimport { streamCst } from '../utils/cst-utils.js';\r\nimport type { LexingReport } from '../parser/token-builder.js';\r\n\r\n/**\r\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\r\n */\r\nexport interface Hydrator {\r\n    /**\r\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\r\n     */\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\r\n    /**\r\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\r\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\r\n     */\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\r\n}\r\n\r\nexport interface DehydrateContext {\r\n    astNodes: Map<AstNode, any>;\r\n    cstNodes: Map<CstNode, any>;\r\n}\r\n\r\nexport interface HydrateContext {\r\n    astNodes: Map<any, AstNode>;\r\n    cstNodes: Map<any, CstNode>;\r\n}\r\n\r\nexport class DefaultHydrator implements Hydrator {\r\n\r\n    protected readonly grammar: Grammar;\r\n    protected readonly lexer: Lexer;\r\n    protected readonly linker: Linker;\r\n\r\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\r\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\r\n\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammar = services.Grammar;\r\n        this.lexer = services.parser.Lexer;\r\n        this.linker = services.references.Linker;\r\n    }\r\n\r\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\r\n            // We need to create shallow copies of the errors\r\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\r\n            parserErrors: result.parserErrors.map(e => ({ ...e, message: e.message })),\r\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\r\n        };\r\n    }\r\n\r\n    protected dehydrateLexerReport(lexerReport: LexingReport): LexingReport {\r\n        // By default, lexer reports are serializable\r\n        return lexerReport;\r\n    }\r\n\r\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\r\n        const astNodes = new Map<AstNode, any>();\r\n        const cstNodes = new Map<CstNode, any>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {});\r\n        }\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                cstNodes.set(cstNode, {});\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\r\n        const obj = context.astNodes.get(node) as Record<string, any>;\r\n        obj.$type = node.$type;\r\n        obj.$containerIndex = node.$containerIndex;\r\n        obj.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode !== undefined) {\r\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: any[] = [];\r\n                obj[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.dehydrateAstNode(item, context));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.dehydrateReference(item, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                obj[name] = this.dehydrateAstNode(value, context);\r\n            } else if (isReference(value)) {\r\n                obj[name] = this.dehydrateReference(value, context);\r\n            } else if (value !== undefined) {\r\n                obj[name] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\r\n        const obj: Record<string, unknown> = {};\r\n        obj.$refText = reference.$refText;\r\n        if (reference.$refNode) {\r\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\r\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\r\n        if (isRootCstNode(node)) {\r\n            cstNode.fullText = node.fullText;\r\n        } else {\r\n            // Note: This returns undefined for hidden nodes (i.e. comments)\r\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\r\n        }\r\n        cstNode.hidden = node.hidden;\r\n        cstNode.astNode = context.astNodes.get(node.astNode);\r\n        if (isCompositeCstNode(node)) {\r\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\r\n        } else if (isLeafCstNode(node)) {\r\n            cstNode.tokenType = node.tokenType.name;\r\n            cstNode.offset = node.offset;\r\n            cstNode.length = node.length;\r\n            cstNode.startLine = node.range.start.line;\r\n            cstNode.startColumn = node.range.start.character;\r\n            cstNode.endLine = node.range.end.line;\r\n            cstNode.endColumn = node.range.end.character;\r\n        }\r\n        return cstNode;\r\n    }\r\n\r\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\r\n        const node = result.value;\r\n        const context = this.createHydrationContext(node);\r\n        if ('$cstNode' in node) {\r\n            this.hydrateCstNode(node.$cstNode, context);\r\n        }\r\n        return {\r\n            lexerErrors: result.lexerErrors,\r\n            lexerReport: result.lexerReport,\r\n            parserErrors: result.parserErrors,\r\n            value: this.hydrateAstNode(node, context) as T\r\n        };\r\n    }\r\n\r\n    protected createHydrationContext(node: any): HydrateContext {\r\n        const astNodes = new Map<any, AstNode>();\r\n        const cstNodes = new Map<any, CstNode>();\r\n        for (const astNode of streamAst(node)) {\r\n            astNodes.set(astNode, {} as AstNode);\r\n        }\r\n        let root: RootCstNode;\r\n        if (node.$cstNode) {\r\n            for (const cstNode of streamCst(node.$cstNode)) {\r\n                let cst: Mutable<CstNode> | undefined;\r\n                if ('fullText' in cstNode) {\r\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\r\n                    root = cst as RootCstNode;\r\n                } else if ('content' in cstNode) {\r\n                    cst = new CompositeCstNodeImpl();\r\n                } else if ('tokenType' in cstNode) {\r\n                    cst = this.hydrateCstLeafNode(cstNode);\r\n                }\r\n                if (cst) {\r\n                    cstNodes.set(cstNode, cst);\r\n                    cst.root = root!;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            astNodes,\r\n            cstNodes\r\n        };\r\n    }\r\n\r\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\r\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\r\n        astNode.$type = node.$type;\r\n        astNode.$containerIndex = node.$containerIndex;\r\n        astNode.$containerProperty = node.$containerProperty;\r\n        if (node.$cstNode) {\r\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\r\n        }\r\n        for (const [name, value] of Object.entries(node)) {\r\n            if (name.startsWith('$')) {\r\n                continue;\r\n            }\r\n            if (Array.isArray(value)) {\r\n                const arr: unknown[] = [];\r\n                astNode[name] = arr;\r\n                for (const item of value) {\r\n                    if (isAstNode(item)) {\r\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\r\n                    } else if (isReference(item)) {\r\n                        arr.push(this.hydrateReference(item, astNode, name, context));\r\n                    } else {\r\n                        arr.push(item);\r\n                    }\r\n                }\r\n            } else if (isAstNode(value)) {\r\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\r\n            } else if (isReference(value)) {\r\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\r\n            } else if (value !== undefined) {\r\n                astNode[name] = value;\r\n            }\r\n        }\r\n        return astNode;\r\n    }\r\n\r\n    protected setParent(node: any, parent: any): any {\r\n        node.$container = parent as AstNode;\r\n        return node;\r\n    }\r\n\r\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\r\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\r\n    }\r\n\r\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\r\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\r\n        if (typeof cstNode.grammarSource === 'number') {\r\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\r\n        }\r\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\r\n        if (isCompositeCstNode(cstNodeObj)) {\r\n            for (const child of cstNode.content) {\r\n                const hydrated = this.hydrateCstNode(child, context, num++);\r\n                cstNodeObj.content.push(hydrated);\r\n            }\r\n        }\r\n        return cstNodeObj;\r\n    }\r\n\r\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\r\n        const tokenType = this.getTokenType(cstNode.tokenType);\r\n        const offset = cstNode.offset;\r\n        const length = cstNode.length;\r\n        const startLine = cstNode.startLine;\r\n        const startColumn = cstNode.startColumn;\r\n        const endLine = cstNode.endLine;\r\n        const endColumn = cstNode.endColumn;\r\n        const hidden = cstNode.hidden;\r\n        const node = new LeafCstNodeImpl(\r\n            offset,\r\n            length,\r\n            {\r\n                start: {\r\n                    line: startLine,\r\n                    character: startColumn\r\n                },\r\n                end: {\r\n                    line: endLine,\r\n                    character: endColumn\r\n                }\r\n            },\r\n            tokenType,\r\n            hidden\r\n        );\r\n        return node;\r\n    }\r\n\r\n    protected getTokenType(name: string): TokenType {\r\n        return this.lexer.definition[name];\r\n    }\r\n\r\n    protected getGrammarElementId(node: AbstractElement | undefined): number | undefined {\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        return this.grammarElementIdMap.get(node);\r\n    }\r\n\r\n    protected getGrammarElement(id: number): AbstractElement | undefined {\r\n        if (this.grammarElementIdMap.size === 0) {\r\n            this.createGrammarElementIdMap();\r\n        }\r\n        const element = this.grammarElementIdMap.getKey(id);\r\n        return element;\r\n    }\r\n\r\n    protected createGrammarElementIdMap(): void {\r\n        let id = 0;\r\n        for (const element of streamAst(this.grammar)) {\r\n            if (isAbstractElement(element)) {\r\n                this.grammarElementIdMap.set(element, id++);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\r\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { isMultilineComment } from '../utils/regexp-utils.js';\r\nimport { isTerminalRule } from './generated/ast.js';\r\n\r\nexport interface GrammarConfig {\r\n    /**\r\n     * Lists all rule names which are classified as multiline comment rules\r\n     */\r\n    multilineCommentRules: string[]\r\n    /**\r\n     * A regular expression which matches characters of names\r\n     */\r\n    nameRegexp: RegExp\r\n}\r\n\r\n/**\r\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\r\n * language-specific module.\r\n */\r\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\r\n    const rules: string[] = [];\r\n    const grammar = services.Grammar;\r\n    for (const rule of grammar.rules) {\r\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\r\n            rules.push(rule.name);\r\n        }\r\n    }\r\n    return {\r\n        multilineCommentRules: rules,\r\n        nameRegexp: DefaultNameRegexp\r\n    };\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport { LangiumCompletionParser } from './langium-parser.js';\r\nimport { createParser } from './parser-builder-base.js';\r\n\r\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\r\n    const grammar = services.Grammar;\r\n    const lexer = services.parser.Lexer;\r\n    const parser = new LangiumCompletionParser(services);\r\n    createParser(grammar, parser, lexer.definition);\r\n    parser.finalize();\r\n    return parser;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\n/**\r\n * A `Module<I>` is a description of possibly grouped service factories.\r\n *\r\n * Given a type I = { group: { service: A } },\r\n * Module<I> := { group: { service: (injector: I) => A } }\r\n *\r\n * Making `I` available during the creation of `I` allows us to create cyclic\r\n * dependencies.\r\n */\r\nexport type Module<I, T = I> = {\r\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\r\n}\r\n\r\nexport namespace Module {\r\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\r\n}\r\n\r\n/**\r\n * Given a set of modules, the inject function returns a lazily evaluated injector\r\n * that injects dependencies into the requested service when it is requested the\r\n * first time. Subsequent requests will return the same service.\r\n *\r\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\r\n * by injecting a provider `() => T` instead of a `T`.\r\n *\r\n * Please note that the arguments may be objects or arrays. However, the result will\r\n * be an object. Using it with for..of will have no effect.\r\n *\r\n * @param module1 first Module\r\n * @param module2 (optional) second Module\r\n * @param module3 (optional) third Module\r\n * @param module4 (optional) fourth Module\r\n * @param module5 (optional) fifth Module\r\n * @param module6 (optional) sixth Module\r\n * @param module7 (optional) seventh Module\r\n * @param module8 (optional) eighth Module\r\n * @param module9 (optional) ninth Module\r\n * @returns a new object of type I\r\n */\r\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\r\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\r\n): I {\r\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\r\n    return _inject(module);\r\n}\r\n\r\nconst isProxy = Symbol('isProxy');\r\n\r\n/**\r\n * Eagerly load all services in the given dependency injection container. This is sometimes\r\n * necessary because services can register event listeners in their constructors.\r\n */\r\nexport function eagerLoad<T>(item: T): T {\r\n    if (item && (item as any)[isProxy]) {\r\n        for (const value of Object.values(item)) {\r\n            eagerLoad(value);\r\n        }\r\n    }\r\n    return item;\r\n}\r\n\r\n/**\r\n * Helper function that returns an injector by creating a proxy.\r\n * Invariant: injector is of type I. If injector is undefined, then T = I.\r\n */\r\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\r\n    const proxy: any = new Proxy({} as any, {\r\n        deleteProperty: () => false,\r\n        set: () => {\r\n            throw new Error('Cannot set property on injected service container');\r\n        },\r\n        get: (obj, prop) => {\r\n            if (prop === isProxy) {\r\n                return true;\r\n            } else {\r\n                return _resolve(obj, prop, module, injector || proxy);\r\n            }\r\n        },\r\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\r\n        has: (_, prop) => prop in module, // used by ..in..\r\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\r\n    });\r\n    return proxy;\r\n}\r\n\r\n/**\r\n * Internally used to tag a requested dependency, directly before calling the factory.\r\n * This allows us to find cycles during instance creation.\r\n */\r\nconst __requested__ = Symbol();\r\n\r\n/**\r\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\r\n * the module description. The result of service factories is cached. Groups are\r\n * recursively proxied.\r\n *\r\n * @param obj an object holding all group proxies and services\r\n * @param prop the key of a value within obj\r\n * @param module an object containing groups and service factories\r\n * @param injector the first level proxy that provides access to all values\r\n * @returns the requested value `obj[prop]`\r\n * @throws Error if a dependency cycle is detected\r\n */\r\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\r\n    if (prop in obj) {\r\n        if (obj[prop] instanceof Error) {\r\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\r\n        }\r\n        if (obj[prop] === __requested__) {\r\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\r\n        }\r\n        return obj[prop];\r\n    } else if (prop in module) {\r\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\r\n        obj[prop] = __requested__;\r\n        try {\r\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\r\n        } catch (error) {\r\n            obj[prop] = error instanceof Error ? error : undefined;\r\n            throw error;\r\n        }\r\n        return obj[prop];\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a deep-merge of two modules by writing source entries into the target module.\r\n *\r\n * @param target the module which is written\r\n * @param source the module which is read\r\n * @returns the target module\r\n */\r\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\r\n    if (source) {\r\n        for (const [key, value2] of Object.entries(source)) {\r\n            if (value2 !== undefined) {\r\n                const value1 = target[key];\r\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\r\n                    target[key] = _merge(value1, value2);\r\n                } else {\r\n                    target[key] = value2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n","/******************************************************************************\r\n * This file was generated by langium-cli 3.3.0.\r\n * DO NOT EDIT MANUALLY!\r\n ******************************************************************************/\r\n\r\n/* eslint-disable */\r\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\r\nimport { AbstractAstReflection } from '../../syntax-tree.js';\r\n\r\nexport const LangiumGrammarTerminals = {\r\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\r\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\r\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\r\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\r\n    WS: /\\s+/,\r\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\r\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\r\n};\r\n\r\nexport type LangiumGrammarTerminalNames = keyof typeof LangiumGrammarTerminals;\r\n\r\nexport type LangiumGrammarKeywordNames = \r\n    | \"!\"\r\n    | \"&\"\r\n    | \"(\"\r\n    | \")\"\r\n    | \"*\"\r\n    | \"+\"\r\n    | \"+=\"\r\n    | \",\"\r\n    | \"->\"\r\n    | \".\"\r\n    | \"..\"\r\n    | \":\"\r\n    | \";\"\r\n    | \"<\"\r\n    | \"=\"\r\n    | \"=>\"\r\n    | \">\"\r\n    | \"?\"\r\n    | \"?!\"\r\n    | \"?<!\"\r\n    | \"?<=\"\r\n    | \"?=\"\r\n    | \"@\"\r\n    | \"Date\"\r\n    | \"EOF\"\r\n    | \"[\"\r\n    | \"]\"\r\n    | \"bigint\"\r\n    | \"boolean\"\r\n    | \"current\"\r\n    | \"entry\"\r\n    | \"extends\"\r\n    | \"false\"\r\n    | \"fragment\"\r\n    | \"grammar\"\r\n    | \"hidden\"\r\n    | \"import\"\r\n    | \"infer\"\r\n    | \"infers\"\r\n    | \"interface\"\r\n    | \"number\"\r\n    | \"returns\"\r\n    | \"string\"\r\n    | \"terminal\"\r\n    | \"true\"\r\n    | \"type\"\r\n    | \"with\"\r\n    | \"{\"\r\n    | \"|\"\r\n    | \"}\";\r\n\r\nexport type LangiumGrammarTokenNames = LangiumGrammarTerminalNames | LangiumGrammarKeywordNames;\r\n\r\nexport type AbstractRule = ParserRule | TerminalRule;\r\n\r\nexport const AbstractRule = 'AbstractRule';\r\n\r\nexport function isAbstractRule(item: unknown): item is AbstractRule {\r\n    return reflection.isInstance(item, AbstractRule);\r\n}\r\n\r\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\r\n\r\nexport const AbstractType = 'AbstractType';\r\n\r\nexport function isAbstractType(item: unknown): item is AbstractType {\r\n    return reflection.isInstance(item, AbstractType);\r\n}\r\n\r\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\r\n\r\nexport const Condition = 'Condition';\r\n\r\nexport function isCondition(item: unknown): item is Condition {\r\n    return reflection.isInstance(item, Condition);\r\n}\r\n\r\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\r\n\r\nexport function isFeatureName(item: unknown): item is FeatureName {\r\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\r\n}\r\n\r\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\r\n\r\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\r\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\r\n}\r\n\r\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\r\n\r\nexport const TypeDefinition = 'TypeDefinition';\r\n\r\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\r\n    return reflection.isInstance(item, TypeDefinition);\r\n}\r\n\r\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\r\n\r\nexport const ValueLiteral = 'ValueLiteral';\r\n\r\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\r\n    return reflection.isInstance(item, ValueLiteral);\r\n}\r\n\r\nexport interface AbstractElement extends AstNode {\r\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\r\n    cardinality?: '*' | '+' | '?';\r\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\r\n}\r\n\r\nexport const AbstractElement = 'AbstractElement';\r\n\r\nexport function isAbstractElement(item: unknown): item is AbstractElement {\r\n    return reflection.isInstance(item, AbstractElement);\r\n}\r\n\r\nexport interface ArrayLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'ArrayLiteral';\r\n    elements: Array<ValueLiteral>;\r\n}\r\n\r\nexport const ArrayLiteral = 'ArrayLiteral';\r\n\r\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\r\n    return reflection.isInstance(item, ArrayLiteral);\r\n}\r\n\r\nexport interface ArrayType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ArrayType';\r\n    elementType: TypeDefinition;\r\n}\r\n\r\nexport const ArrayType = 'ArrayType';\r\n\r\nexport function isArrayType(item: unknown): item is ArrayType {\r\n    return reflection.isInstance(item, ArrayType);\r\n}\r\n\r\nexport interface BooleanLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\r\n    readonly $type: 'BooleanLiteral';\r\n    true: boolean;\r\n}\r\n\r\nexport const BooleanLiteral = 'BooleanLiteral';\r\n\r\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\r\n    return reflection.isInstance(item, BooleanLiteral);\r\n}\r\n\r\nexport interface Conjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Conjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Conjunction = 'Conjunction';\r\n\r\nexport function isConjunction(item: unknown): item is Conjunction {\r\n    return reflection.isInstance(item, Conjunction);\r\n}\r\n\r\nexport interface Disjunction extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Disjunction';\r\n    left: Condition;\r\n    right: Condition;\r\n}\r\n\r\nexport const Disjunction = 'Disjunction';\r\n\r\nexport function isDisjunction(item: unknown): item is Disjunction {\r\n    return reflection.isInstance(item, Disjunction);\r\n}\r\n\r\nexport interface Grammar extends AstNode {\r\n    readonly $type: 'Grammar';\r\n    definesHiddenTokens: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    imports: Array<GrammarImport>;\r\n    interfaces: Array<Interface>;\r\n    isDeclared: boolean;\r\n    name?: string;\r\n    rules: Array<AbstractRule>;\r\n    types: Array<Type>;\r\n    usedGrammars: Array<Reference<Grammar>>;\r\n}\r\n\r\nexport const Grammar = 'Grammar';\r\n\r\nexport function isGrammar(item: unknown): item is Grammar {\r\n    return reflection.isInstance(item, Grammar);\r\n}\r\n\r\nexport interface GrammarImport extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'GrammarImport';\r\n    path: string;\r\n}\r\n\r\nexport const GrammarImport = 'GrammarImport';\r\n\r\nexport function isGrammarImport(item: unknown): item is GrammarImport {\r\n    return reflection.isInstance(item, GrammarImport);\r\n}\r\n\r\nexport interface InferredType extends AstNode {\r\n    readonly $container: Action | ParserRule;\r\n    readonly $type: 'InferredType';\r\n    name: string;\r\n}\r\n\r\nexport const InferredType = 'InferredType';\r\n\r\nexport function isInferredType(item: unknown): item is InferredType {\r\n    return reflection.isInstance(item, InferredType);\r\n}\r\n\r\nexport interface Interface extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Interface';\r\n    attributes: Array<TypeAttribute>;\r\n    name: string;\r\n    superTypes: Array<Reference<AbstractType>>;\r\n}\r\n\r\nexport const Interface = 'Interface';\r\n\r\nexport function isInterface(item: unknown): item is Interface {\r\n    return reflection.isInstance(item, Interface);\r\n}\r\n\r\nexport interface NamedArgument extends AstNode {\r\n    readonly $container: RuleCall;\r\n    readonly $type: 'NamedArgument';\r\n    calledByName: boolean;\r\n    parameter?: Reference<Parameter>;\r\n    value: Condition;\r\n}\r\n\r\nexport const NamedArgument = 'NamedArgument';\r\n\r\nexport function isNamedArgument(item: unknown): item is NamedArgument {\r\n    return reflection.isInstance(item, NamedArgument);\r\n}\r\n\r\nexport interface Negation extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'Negation';\r\n    value: Condition;\r\n}\r\n\r\nexport const Negation = 'Negation';\r\n\r\nexport function isNegation(item: unknown): item is Negation {\r\n    return reflection.isInstance(item, Negation);\r\n}\r\n\r\nexport interface NumberLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'NumberLiteral';\r\n    value: number;\r\n}\r\n\r\nexport const NumberLiteral = 'NumberLiteral';\r\n\r\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\r\n    return reflection.isInstance(item, NumberLiteral);\r\n}\r\n\r\nexport interface Parameter extends AstNode {\r\n    readonly $container: ParserRule;\r\n    readonly $type: 'Parameter';\r\n    name: string;\r\n}\r\n\r\nexport const Parameter = 'Parameter';\r\n\r\nexport function isParameter(item: unknown): item is Parameter {\r\n    return reflection.isInstance(item, Parameter);\r\n}\r\n\r\nexport interface ParameterReference extends AstNode {\r\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\r\n    readonly $type: 'ParameterReference';\r\n    parameter: Reference<Parameter>;\r\n}\r\n\r\nexport const ParameterReference = 'ParameterReference';\r\n\r\nexport function isParameterReference(item: unknown): item is ParameterReference {\r\n    return reflection.isInstance(item, ParameterReference);\r\n}\r\n\r\nexport interface ParserRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'ParserRule';\r\n    dataType?: PrimitiveType;\r\n    definesHiddenTokens: boolean;\r\n    definition: AbstractElement;\r\n    entry: boolean;\r\n    fragment: boolean;\r\n    hiddenTokens: Array<Reference<AbstractRule>>;\r\n    inferredType?: InferredType;\r\n    name: string;\r\n    parameters: Array<Parameter>;\r\n    returnType?: Reference<AbstractType>;\r\n    wildcard: boolean;\r\n}\r\n\r\nexport const ParserRule = 'ParserRule';\r\n\r\nexport function isParserRule(item: unknown): item is ParserRule {\r\n    return reflection.isInstance(item, ParserRule);\r\n}\r\n\r\nexport interface ReferenceType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'ReferenceType';\r\n    referenceType: TypeDefinition;\r\n}\r\n\r\nexport const ReferenceType = 'ReferenceType';\r\n\r\nexport function isReferenceType(item: unknown): item is ReferenceType {\r\n    return reflection.isInstance(item, ReferenceType);\r\n}\r\n\r\nexport interface ReturnType extends AstNode {\r\n    readonly $container: TerminalRule;\r\n    readonly $type: 'ReturnType';\r\n    name: PrimitiveType | string;\r\n}\r\n\r\nexport const ReturnType = 'ReturnType';\r\n\r\nexport function isReturnType(item: unknown): item is ReturnType {\r\n    return reflection.isInstance(item, ReturnType);\r\n}\r\n\r\nexport interface SimpleType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'SimpleType';\r\n    primitiveType?: PrimitiveType;\r\n    stringType?: string;\r\n    typeRef?: Reference<AbstractType>;\r\n}\r\n\r\nexport const SimpleType = 'SimpleType';\r\n\r\nexport function isSimpleType(item: unknown): item is SimpleType {\r\n    return reflection.isInstance(item, SimpleType);\r\n}\r\n\r\nexport interface StringLiteral extends AstNode {\r\n    readonly $container: ArrayLiteral | TypeAttribute;\r\n    readonly $type: 'StringLiteral';\r\n    value: string;\r\n}\r\n\r\nexport const StringLiteral = 'StringLiteral';\r\n\r\nexport function isStringLiteral(item: unknown): item is StringLiteral {\r\n    return reflection.isInstance(item, StringLiteral);\r\n}\r\n\r\nexport interface TerminalRule extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'TerminalRule';\r\n    definition: AbstractElement;\r\n    fragment: boolean;\r\n    hidden: boolean;\r\n    name: string;\r\n    type?: ReturnType;\r\n}\r\n\r\nexport const TerminalRule = 'TerminalRule';\r\n\r\nexport function isTerminalRule(item: unknown): item is TerminalRule {\r\n    return reflection.isInstance(item, TerminalRule);\r\n}\r\n\r\nexport interface Type extends AstNode {\r\n    readonly $container: Grammar;\r\n    readonly $type: 'Type';\r\n    name: string;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const Type = 'Type';\r\n\r\nexport function isType(item: unknown): item is Type {\r\n    return reflection.isInstance(item, Type);\r\n}\r\n\r\nexport interface TypeAttribute extends AstNode {\r\n    readonly $container: Interface;\r\n    readonly $type: 'TypeAttribute';\r\n    defaultValue?: ValueLiteral;\r\n    isOptional: boolean;\r\n    name: FeatureName;\r\n    type: TypeDefinition;\r\n}\r\n\r\nexport const TypeAttribute = 'TypeAttribute';\r\n\r\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\r\n    return reflection.isInstance(item, TypeAttribute);\r\n}\r\n\r\nexport interface UnionType extends AstNode {\r\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\r\n    readonly $type: 'UnionType';\r\n    types: Array<TypeDefinition>;\r\n}\r\n\r\nexport const UnionType = 'UnionType';\r\n\r\nexport function isUnionType(item: unknown): item is UnionType {\r\n    return reflection.isInstance(item, UnionType);\r\n}\r\n\r\nexport interface Action extends AbstractElement {\r\n    readonly $type: 'Action';\r\n    feature?: FeatureName;\r\n    inferredType?: InferredType;\r\n    operator?: '+=' | '=';\r\n    type?: Reference<AbstractType>;\r\n}\r\n\r\nexport const Action = 'Action';\r\n\r\nexport function isAction(item: unknown): item is Action {\r\n    return reflection.isInstance(item, Action);\r\n}\r\n\r\nexport interface Alternatives extends AbstractElement {\r\n    readonly $type: 'Alternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const Alternatives = 'Alternatives';\r\n\r\nexport function isAlternatives(item: unknown): item is Alternatives {\r\n    return reflection.isInstance(item, Alternatives);\r\n}\r\n\r\nexport interface Assignment extends AbstractElement {\r\n    readonly $type: 'Assignment';\r\n    feature: FeatureName;\r\n    operator: '+=' | '=' | '?=';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const Assignment = 'Assignment';\r\n\r\nexport function isAssignment(item: unknown): item is Assignment {\r\n    return reflection.isInstance(item, Assignment);\r\n}\r\n\r\nexport interface CharacterRange extends AbstractElement {\r\n    readonly $type: 'CharacterRange';\r\n    left: Keyword;\r\n    right?: Keyword;\r\n}\r\n\r\nexport const CharacterRange = 'CharacterRange';\r\n\r\nexport function isCharacterRange(item: unknown): item is CharacterRange {\r\n    return reflection.isInstance(item, CharacterRange);\r\n}\r\n\r\nexport interface CrossReference extends AbstractElement {\r\n    readonly $type: 'CrossReference';\r\n    deprecatedSyntax: boolean;\r\n    terminal?: AbstractElement;\r\n    type: Reference<AbstractType>;\r\n}\r\n\r\nexport const CrossReference = 'CrossReference';\r\n\r\nexport function isCrossReference(item: unknown): item is CrossReference {\r\n    return reflection.isInstance(item, CrossReference);\r\n}\r\n\r\nexport interface EndOfFile extends AbstractElement {\r\n    readonly $type: 'EndOfFile';\r\n}\r\n\r\nexport const EndOfFile = 'EndOfFile';\r\n\r\nexport function isEndOfFile(item: unknown): item is EndOfFile {\r\n    return reflection.isInstance(item, EndOfFile);\r\n}\r\n\r\nexport interface Group extends AbstractElement {\r\n    readonly $type: 'Group';\r\n    elements: Array<AbstractElement>;\r\n    guardCondition?: Condition;\r\n}\r\n\r\nexport const Group = 'Group';\r\n\r\nexport function isGroup(item: unknown): item is Group {\r\n    return reflection.isInstance(item, Group);\r\n}\r\n\r\nexport interface Keyword extends AbstractElement {\r\n    readonly $container: CharacterRange;\r\n    readonly $type: 'Keyword';\r\n    value: string;\r\n}\r\n\r\nexport const Keyword = 'Keyword';\r\n\r\nexport function isKeyword(item: unknown): item is Keyword {\r\n    return reflection.isInstance(item, Keyword);\r\n}\r\n\r\nexport interface NegatedToken extends AbstractElement {\r\n    readonly $type: 'NegatedToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const NegatedToken = 'NegatedToken';\r\n\r\nexport function isNegatedToken(item: unknown): item is NegatedToken {\r\n    return reflection.isInstance(item, NegatedToken);\r\n}\r\n\r\nexport interface RegexToken extends AbstractElement {\r\n    readonly $type: 'RegexToken';\r\n    regex: string;\r\n}\r\n\r\nexport const RegexToken = 'RegexToken';\r\n\r\nexport function isRegexToken(item: unknown): item is RegexToken {\r\n    return reflection.isInstance(item, RegexToken);\r\n}\r\n\r\nexport interface RuleCall extends AbstractElement {\r\n    readonly $type: 'RuleCall';\r\n    arguments: Array<NamedArgument>;\r\n    rule: Reference<AbstractRule>;\r\n}\r\n\r\nexport const RuleCall = 'RuleCall';\r\n\r\nexport function isRuleCall(item: unknown): item is RuleCall {\r\n    return reflection.isInstance(item, RuleCall);\r\n}\r\n\r\nexport interface TerminalAlternatives extends AbstractElement {\r\n    readonly $type: 'TerminalAlternatives';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalAlternatives = 'TerminalAlternatives';\r\n\r\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\r\n    return reflection.isInstance(item, TerminalAlternatives);\r\n}\r\n\r\nexport interface TerminalGroup extends AbstractElement {\r\n    readonly $type: 'TerminalGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const TerminalGroup = 'TerminalGroup';\r\n\r\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\r\n    return reflection.isInstance(item, TerminalGroup);\r\n}\r\n\r\nexport interface TerminalRuleCall extends AbstractElement {\r\n    readonly $type: 'TerminalRuleCall';\r\n    rule: Reference<TerminalRule>;\r\n}\r\n\r\nexport const TerminalRuleCall = 'TerminalRuleCall';\r\n\r\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\r\n    return reflection.isInstance(item, TerminalRuleCall);\r\n}\r\n\r\nexport interface UnorderedGroup extends AbstractElement {\r\n    readonly $type: 'UnorderedGroup';\r\n    elements: Array<AbstractElement>;\r\n}\r\n\r\nexport const UnorderedGroup = 'UnorderedGroup';\r\n\r\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\r\n    return reflection.isInstance(item, UnorderedGroup);\r\n}\r\n\r\nexport interface UntilToken extends AbstractElement {\r\n    readonly $type: 'UntilToken';\r\n    terminal: AbstractElement;\r\n}\r\n\r\nexport const UntilToken = 'UntilToken';\r\n\r\nexport function isUntilToken(item: unknown): item is UntilToken {\r\n    return reflection.isInstance(item, UntilToken);\r\n}\r\n\r\nexport interface Wildcard extends AbstractElement {\r\n    readonly $type: 'Wildcard';\r\n}\r\n\r\nexport const Wildcard = 'Wildcard';\r\n\r\nexport function isWildcard(item: unknown): item is Wildcard {\r\n    return reflection.isInstance(item, Wildcard);\r\n}\r\n\r\nexport type LangiumGrammarAstType = {\r\n    AbstractElement: AbstractElement\r\n    AbstractRule: AbstractRule\r\n    AbstractType: AbstractType\r\n    Action: Action\r\n    Alternatives: Alternatives\r\n    ArrayLiteral: ArrayLiteral\r\n    ArrayType: ArrayType\r\n    Assignment: Assignment\r\n    BooleanLiteral: BooleanLiteral\r\n    CharacterRange: CharacterRange\r\n    Condition: Condition\r\n    Conjunction: Conjunction\r\n    CrossReference: CrossReference\r\n    Disjunction: Disjunction\r\n    EndOfFile: EndOfFile\r\n    Grammar: Grammar\r\n    GrammarImport: GrammarImport\r\n    Group: Group\r\n    InferredType: InferredType\r\n    Interface: Interface\r\n    Keyword: Keyword\r\n    NamedArgument: NamedArgument\r\n    NegatedToken: NegatedToken\r\n    Negation: Negation\r\n    NumberLiteral: NumberLiteral\r\n    Parameter: Parameter\r\n    ParameterReference: ParameterReference\r\n    ParserRule: ParserRule\r\n    ReferenceType: ReferenceType\r\n    RegexToken: RegexToken\r\n    ReturnType: ReturnType\r\n    RuleCall: RuleCall\r\n    SimpleType: SimpleType\r\n    StringLiteral: StringLiteral\r\n    TerminalAlternatives: TerminalAlternatives\r\n    TerminalGroup: TerminalGroup\r\n    TerminalRule: TerminalRule\r\n    TerminalRuleCall: TerminalRuleCall\r\n    Type: Type\r\n    TypeAttribute: TypeAttribute\r\n    TypeDefinition: TypeDefinition\r\n    UnionType: UnionType\r\n    UnorderedGroup: UnorderedGroup\r\n    UntilToken: UntilToken\r\n    ValueLiteral: ValueLiteral\r\n    Wildcard: Wildcard\r\n}\r\n\r\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\r\n\r\n    getAllTypes(): string[] {\r\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\r\n    }\r\n\r\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\r\n        switch (subtype) {\r\n            case Action:\r\n            case Alternatives:\r\n            case Assignment:\r\n            case CharacterRange:\r\n            case CrossReference:\r\n            case EndOfFile:\r\n            case Group:\r\n            case Keyword:\r\n            case NegatedToken:\r\n            case RegexToken:\r\n            case RuleCall:\r\n            case TerminalAlternatives:\r\n            case TerminalGroup:\r\n            case TerminalRuleCall:\r\n            case UnorderedGroup:\r\n            case UntilToken:\r\n            case Wildcard: {\r\n                return this.isSubtype(AbstractElement, supertype);\r\n            }\r\n            case ArrayLiteral:\r\n            case NumberLiteral:\r\n            case StringLiteral: {\r\n                return this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case ArrayType:\r\n            case ReferenceType:\r\n            case SimpleType:\r\n            case UnionType: {\r\n                return this.isSubtype(TypeDefinition, supertype);\r\n            }\r\n            case BooleanLiteral: {\r\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\r\n            }\r\n            case Conjunction:\r\n            case Disjunction:\r\n            case Negation:\r\n            case ParameterReference: {\r\n                return this.isSubtype(Condition, supertype);\r\n            }\r\n            case InferredType:\r\n            case Interface:\r\n            case Type: {\r\n                return this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case ParserRule: {\r\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\r\n            }\r\n            case TerminalRule: {\r\n                return this.isSubtype(AbstractRule, supertype);\r\n            }\r\n            default: {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getReferenceType(refInfo: ReferenceInfo): string {\r\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\r\n        switch (referenceId) {\r\n            case 'Action:type':\r\n            case 'CrossReference:type':\r\n            case 'Interface:superTypes':\r\n            case 'ParserRule:returnType':\r\n            case 'SimpleType:typeRef': {\r\n                return AbstractType;\r\n            }\r\n            case 'Grammar:hiddenTokens':\r\n            case 'ParserRule:hiddenTokens':\r\n            case 'RuleCall:rule': {\r\n                return AbstractRule;\r\n            }\r\n            case 'Grammar:usedGrammars': {\r\n                return Grammar;\r\n            }\r\n            case 'NamedArgument:parameter':\r\n            case 'ParameterReference:parameter': {\r\n                return Parameter;\r\n            }\r\n            case 'TerminalRuleCall:rule': {\r\n                return TerminalRule;\r\n            }\r\n            default: {\r\n                throw new Error(`${referenceId} is not a valid reference id.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTypeMetaData(type: string): TypeMetaData {\r\n        switch (type) {\r\n            case AbstractElement: {\r\n                return {\r\n                    name: AbstractElement,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayLiteral: {\r\n                return {\r\n                    name: ArrayLiteral,\r\n                    properties: [\r\n                        { name: 'elements', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case ArrayType: {\r\n                return {\r\n                    name: ArrayType,\r\n                    properties: [\r\n                        { name: 'elementType' }\r\n                    ]\r\n                };\r\n            }\r\n            case BooleanLiteral: {\r\n                return {\r\n                    name: BooleanLiteral,\r\n                    properties: [\r\n                        { name: 'true', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case Conjunction: {\r\n                return {\r\n                    name: Conjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Disjunction: {\r\n                return {\r\n                    name: Disjunction,\r\n                    properties: [\r\n                        { name: 'left' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case Grammar: {\r\n                return {\r\n                    name: Grammar,\r\n                    properties: [\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'imports', defaultValue: [] },\r\n                        { name: 'interfaces', defaultValue: [] },\r\n                        { name: 'isDeclared', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'rules', defaultValue: [] },\r\n                        { name: 'types', defaultValue: [] },\r\n                        { name: 'usedGrammars', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case GrammarImport: {\r\n                return {\r\n                    name: GrammarImport,\r\n                    properties: [\r\n                        { name: 'path' }\r\n                    ]\r\n                };\r\n            }\r\n            case InferredType: {\r\n                return {\r\n                    name: InferredType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case Interface: {\r\n                return {\r\n                    name: Interface,\r\n                    properties: [\r\n                        { name: 'attributes', defaultValue: [] },\r\n                        { name: 'name' },\r\n                        { name: 'superTypes', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case NamedArgument: {\r\n                return {\r\n                    name: NamedArgument,\r\n                    properties: [\r\n                        { name: 'calledByName', defaultValue: false },\r\n                        { name: 'parameter' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Negation: {\r\n                return {\r\n                    name: Negation,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NumberLiteral: {\r\n                return {\r\n                    name: NumberLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case Parameter: {\r\n                return {\r\n                    name: Parameter,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParameterReference: {\r\n                return {\r\n                    name: ParameterReference,\r\n                    properties: [\r\n                        { name: 'parameter' }\r\n                    ]\r\n                };\r\n            }\r\n            case ParserRule: {\r\n                return {\r\n                    name: ParserRule,\r\n                    properties: [\r\n                        { name: 'dataType' },\r\n                        { name: 'definesHiddenTokens', defaultValue: false },\r\n                        { name: 'definition' },\r\n                        { name: 'entry', defaultValue: false },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hiddenTokens', defaultValue: [] },\r\n                        { name: 'inferredType' },\r\n                        { name: 'name' },\r\n                        { name: 'parameters', defaultValue: [] },\r\n                        { name: 'returnType' },\r\n                        { name: 'wildcard', defaultValue: false }\r\n                    ]\r\n                };\r\n            }\r\n            case ReferenceType: {\r\n                return {\r\n                    name: ReferenceType,\r\n                    properties: [\r\n                        { name: 'referenceType' }\r\n                    ]\r\n                };\r\n            }\r\n            case ReturnType: {\r\n                return {\r\n                    name: ReturnType,\r\n                    properties: [\r\n                        { name: 'name' }\r\n                    ]\r\n                };\r\n            }\r\n            case SimpleType: {\r\n                return {\r\n                    name: SimpleType,\r\n                    properties: [\r\n                        { name: 'primitiveType' },\r\n                        { name: 'stringType' },\r\n                        { name: 'typeRef' }\r\n                    ]\r\n                };\r\n            }\r\n            case StringLiteral: {\r\n                return {\r\n                    name: StringLiteral,\r\n                    properties: [\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRule: {\r\n                return {\r\n                    name: TerminalRule,\r\n                    properties: [\r\n                        { name: 'definition' },\r\n                        { name: 'fragment', defaultValue: false },\r\n                        { name: 'hidden', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Type: {\r\n                return {\r\n                    name: Type,\r\n                    properties: [\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case TypeAttribute: {\r\n                return {\r\n                    name: TypeAttribute,\r\n                    properties: [\r\n                        { name: 'defaultValue' },\r\n                        { name: 'isOptional', defaultValue: false },\r\n                        { name: 'name' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnionType: {\r\n                return {\r\n                    name: UnionType,\r\n                    properties: [\r\n                        { name: 'types', defaultValue: [] }\r\n                    ]\r\n                };\r\n            }\r\n            case Action: {\r\n                return {\r\n                    name: Action,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'inferredType' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case Alternatives: {\r\n                return {\r\n                    name: Alternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Assignment: {\r\n                return {\r\n                    name: Assignment,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'feature' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'operator' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case CharacterRange: {\r\n                return {\r\n                    name: CharacterRange,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'left' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'right' }\r\n                    ]\r\n                };\r\n            }\r\n            case CrossReference: {\r\n                return {\r\n                    name: CrossReference,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'deprecatedSyntax', defaultValue: false },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' },\r\n                        { name: 'type' }\r\n                    ]\r\n                };\r\n            }\r\n            case EndOfFile: {\r\n                return {\r\n                    name: EndOfFile,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Group: {\r\n                return {\r\n                    name: Group,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'guardCondition' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case Keyword: {\r\n                return {\r\n                    name: Keyword,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'value' }\r\n                    ]\r\n                };\r\n            }\r\n            case NegatedToken: {\r\n                return {\r\n                    name: NegatedToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case RegexToken: {\r\n                return {\r\n                    name: RegexToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'regex' }\r\n                    ]\r\n                };\r\n            }\r\n            case RuleCall: {\r\n                return {\r\n                    name: RuleCall,\r\n                    properties: [\r\n                        { name: 'arguments', defaultValue: [] },\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalAlternatives: {\r\n                return {\r\n                    name: TerminalAlternatives,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalGroup: {\r\n                return {\r\n                    name: TerminalGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case TerminalRuleCall: {\r\n                return {\r\n                    name: TerminalRuleCall,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'rule' }\r\n                    ]\r\n                };\r\n            }\r\n            case UnorderedGroup: {\r\n                return {\r\n                    name: UnorderedGroup,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'elements', defaultValue: [] },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            case UntilToken: {\r\n                return {\r\n                    name: UntilToken,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' },\r\n                        { name: 'terminal' }\r\n                    ]\r\n                };\r\n            }\r\n            case Wildcard: {\r\n                return {\r\n                    name: Wildcard,\r\n                    properties: [\r\n                        { name: 'cardinality' },\r\n                        { name: 'lookahead' }\r\n                    ]\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    name: type,\r\n                    properties: []\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const reflection = new LangiumGrammarAstReflection();\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CustomPatternMatcherFunc, ILexingError, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\r\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\r\nimport type { Stream } from '../utils/stream.js';\r\nimport { Lexer } from 'chevrotain';\r\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\r\nimport { streamAllContents } from '../utils/ast-utils.js';\r\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\r\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\r\nimport { stream } from '../utils/stream.js';\r\n\r\nexport interface TokenBuilderOptions {\r\n    caseInsensitive?: boolean\r\n}\r\n\r\nexport interface TokenBuilder {\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\r\n    /**\r\n     * Produces a lexing report for the given text that was just tokenized using the tokens provided by this builder.\r\n     *\r\n     * @param text The text that was tokenized.\r\n     */\r\n    flushLexingReport?(text: string): LexingReport;\r\n}\r\n\r\n/**\r\n * A custom lexing report that can be produced by the token builder during the lexing process.\r\n * Adopters need to ensure that the any custom fields are serializable so they can be sent across worker threads.\r\n */\r\nexport interface LexingReport {\r\n    diagnostics: LexingDiagnostic[];\r\n}\r\n\r\nexport type LexingDiagnosticSeverity = 'error' | 'warning' | 'info' | 'hint';\r\n\r\nexport interface LexingDiagnostic extends ILexingError {\r\n    severity?: LexingDiagnosticSeverity;\r\n}\r\n\r\nexport class DefaultTokenBuilder implements TokenBuilder {\r\n    /**\r\n     * The list of diagnostics stored during the lexing process of a single text.\r\n     */\r\n    protected diagnostics: LexingDiagnostic[] = [];\r\n\r\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\r\n        const reachableRules = stream(getAllReachableRules(grammar, false));\r\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\r\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\r\n\r\n        terminalTokens.forEach(terminalToken => {\r\n            const pattern = terminalToken.PATTERN;\r\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\r\n                tokens.unshift(terminalToken);\r\n            } else {\r\n                tokens.push(terminalToken);\r\n            }\r\n        });\r\n        // We don't need to add the EOF token explicitly.\r\n        // It is automatically available at the end of the token stream.\r\n        return tokens;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    flushLexingReport(text: string): LexingReport {\r\n        return { diagnostics: this.popDiagnostics() };\r\n    }\r\n\r\n    protected popDiagnostics(): LexingDiagnostic[] {\r\n        const diagnostics = [...this.diagnostics];\r\n        this.diagnostics = [];\r\n        return diagnostics;\r\n    }\r\n\r\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\r\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\r\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\r\n    }\r\n\r\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\r\n        const regex = terminalRegex(terminal);\r\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\r\n        const tokenType: TokenType = {\r\n            name: terminal.name,\r\n            PATTERN: pattern,\r\n        };\r\n        if (typeof pattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n        if (terminal.hidden) {\r\n            // Only skip tokens that are able to accept whitespace\r\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\r\n        }\r\n        return tokenType;\r\n    }\r\n\r\n    protected requiresCustomPattern(regex: RegExp): boolean {\r\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\r\n            // Unicode and dotall regexes are not supported by Chevrotain.\r\n            return true;\r\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\r\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\r\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\r\n        return (text, offset) => {\r\n            stickyRegex.lastIndex = offset;\r\n            const execResult = stickyRegex.exec(text);\r\n            return execResult;\r\n        };\r\n    }\r\n\r\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\r\n        return rules\r\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\r\n            .filter(isParserRule)\r\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\r\n            .distinct(e => e.value).toArray()\r\n            // Sort keywords by descending length\r\n            .sort((a, b) => b.value.length - a.value.length)\r\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\r\n    }\r\n\r\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\r\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\r\n        const tokenType: TokenType = {\r\n            name: keyword.value,\r\n            PATTERN: keywordPattern,\r\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\r\n        };\r\n\r\n        if (typeof keywordPattern === 'function') {\r\n            tokenType.LINE_BREAKS = true;\r\n        }\r\n\r\n        return tokenType;\r\n    }\r\n\r\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\r\n        return caseInsensitive ?\r\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\r\n            keyword.value;\r\n    }\r\n\r\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\r\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\r\n            const pattern = token?.PATTERN as RegExp;\r\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\r\n                longerAlts.push(token);\r\n            }\r\n            return longerAlts;\r\n        }, []);\r\n    }\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\r\nimport type { CstNode } from '../syntax-tree.js';\r\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\r\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\r\n\r\n/**\r\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\r\n */\r\nexport interface ValueConverter {\r\n    /**\r\n     * Converts a string value from the source text format into a value to be held in the AST.\r\n     */\r\n    convert(input: string, cstNode: CstNode): ValueType;\r\n}\r\n\r\nexport type ValueType = string | number | boolean | bigint | Date;\r\n\r\nexport class DefaultValueConverter implements ValueConverter {\r\n\r\n    convert(input: string, cstNode: CstNode): ValueType {\r\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\r\n        if (isCrossReference(feature)) {\r\n            feature = getCrossReferenceTerminal(feature);\r\n        }\r\n        if (isRuleCall(feature)) {\r\n            const rule = feature.rule.ref;\r\n            if (!rule) {\r\n                throw new Error('This cst node was not parsed by a rule.');\r\n            }\r\n            return this.runConverter(rule, input, cstNode);\r\n        }\r\n        return input;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\r\n        switch (rule.name.toUpperCase()) {\r\n            case 'INT': return ValueConverter.convertInt(input);\r\n            case 'STRING': return ValueConverter.convertString(input);\r\n            case 'ID': return ValueConverter.convertID(input);\r\n        }\r\n        switch (getRuleType(rule)?.toLowerCase()) {\r\n            case 'number': return ValueConverter.convertNumber(input);\r\n            case 'boolean': return ValueConverter.convertBoolean(input);\r\n            case 'bigint': return ValueConverter.convertBigint(input);\r\n            case 'date': return ValueConverter.convertDate(input);\r\n            default: return input;\r\n        }\r\n    }\r\n}\r\n\r\nexport namespace ValueConverter {\r\n\r\n    export function convertString(input: string): string {\r\n        let result = '';\r\n        for (let i = 1; i < input.length - 1; i++) {\r\n            const c = input.charAt(i);\r\n            if (c === '\\\\') {\r\n                const c1 = input.charAt(++i);\r\n                result += convertEscapeCharacter(c1);\r\n            } else {\r\n                result += c;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function convertEscapeCharacter(char: string): string {\r\n        switch (char) {\r\n            case 'b': return '\\b';\r\n            case 'f': return '\\f';\r\n            case 'n': return '\\n';\r\n            case 'r': return '\\r';\r\n            case 't': return '\\t';\r\n            case 'v': return '\\v';\r\n            case '0': return '\\0';\r\n            default: return char;\r\n        }\r\n    }\r\n\r\n    export function convertID(input: string): string {\r\n        if (input.charAt(0) === '^') {\r\n            return input.substring(1);\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n\r\n    export function convertInt(input: string): number {\r\n        return parseInt(input);\r\n    }\r\n\r\n    export function convertBigint(input: string): bigint {\r\n        return BigInt(input);\r\n    }\r\n\r\n    export function convertDate(input: string): Date {\r\n        return new Date(input);\r\n    }\r\n\r\n    export function convertNumber(input: string): number {\r\n        return Number(input);\r\n    }\r\n\r\n    export function convertBoolean(input: string): boolean {\r\n        return input.toLowerCase() === 'true';\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { TokenType } from 'chevrotain';\r\nimport type { URI } from './utils/uri-utils.js';\r\nimport type { AbstractElement } from './languages/generated/ast.js';\r\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\r\n\r\n/**\r\n * A node in the Abstract Syntax Tree (AST).\r\n */\r\nexport interface AstNode {\r\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\r\n    readonly $type: string;\r\n    /** The container node in the AST; every node except the root node has a container. */\r\n    readonly $container?: AstNode;\r\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\r\n    readonly $containerProperty?: string;\r\n    /** In case `$containerProperty` is an array, the array index is stored here. */\r\n    readonly $containerIndex?: number;\r\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\r\n    readonly $cstNode?: CstNode;\r\n    /** The document containing the AST; only the root node has a direct reference to the document. */\r\n    readonly $document?: LangiumDocument;\r\n}\r\n\r\nexport function isAstNode(obj: unknown): obj is AstNode {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\r\n}\r\n\r\nexport interface GenericAstNode extends AstNode {\r\n    [key: string]: unknown\r\n}\r\n\r\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\r\n\r\n/**\r\n * The property names of a given AST node type.\r\n */\r\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\r\n\r\n/**\r\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\r\n */\r\nexport interface Reference<T extends AstNode = AstNode> {\r\n    /**\r\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\r\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\r\n     * the value is `undefined`.\r\n     */\r\n    readonly ref?: T;\r\n\r\n    /** If any problem occurred while resolving the reference, it is described by this property. */\r\n    readonly error?: LinkingError;\r\n    /** The CST node from which the reference was parsed */\r\n    readonly $refNode?: CstNode;\r\n    /** The actual text used to look up in the surrounding scope */\r\n    readonly $refText: string;\r\n    /** The node description for the AstNode returned by `ref`  */\r\n    readonly $nodeDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isReference(obj: unknown): obj is Reference {\r\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\r\n}\r\n\r\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\r\n    readonly ref: T;\r\n}\r\n\r\n/**\r\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\r\n */\r\nexport interface AstNodeDescription {\r\n    /** The target node; should be present only for local references (linking to the same document). */\r\n    node?: AstNode;\r\n    /**\r\n     * The document segment that represents the range of the name of the AST node.\r\n     */\r\n    nameSegment?: DocumentSegment;\r\n    /**\r\n     * The document segment that represents the full range of the AST node.\r\n     */\r\n    selectionSegment?: DocumentSegment;\r\n    /** `$type` property value of the AST node */\r\n    type: string;\r\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\r\n    name: string;\r\n    /** URI to the document containing the AST node */\r\n    documentUri: URI;\r\n    /** Navigation path inside the document */\r\n    path: string;\r\n}\r\n\r\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\r\n    return typeof obj === 'object' && obj !== null\r\n        && typeof (obj as AstNodeDescription).name === 'string'\r\n        && typeof (obj as AstNodeDescription).type === 'string'\r\n        && typeof (obj as AstNodeDescription).path === 'string';\r\n}\r\n\r\n/**\r\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\r\n * unresolved references.\r\n */\r\nexport interface ReferenceInfo {\r\n    reference: Reference\r\n    container: AstNode\r\n    property: string\r\n    index?: number\r\n}\r\n\r\n/**\r\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\r\n */\r\nexport interface LinkingError extends ReferenceInfo {\r\n    message: string;\r\n    targetDescription?: AstNodeDescription;\r\n}\r\n\r\nexport function isLinkingError(obj: unknown): obj is LinkingError {\r\n    return typeof obj === 'object' && obj !== null\r\n        && isAstNode((obj as LinkingError).container)\r\n        && isReference((obj as LinkingError).reference)\r\n        && typeof (obj as LinkingError).message === 'string';\r\n}\r\n\r\n/**\r\n * Service used for generic access to the structure of the AST. This service is shared between\r\n * all involved languages, so it operates on the superset of types of these languages.\r\n */\r\nexport interface AstReflection {\r\n    getAllTypes(): string[]\r\n    getAllSubTypes(type: string): string[]\r\n    getReferenceType(refInfo: ReferenceInfo): string\r\n    getTypeMetaData(type: string): TypeMetaData\r\n    isInstance(node: unknown, type: string): boolean\r\n    isSubtype(subtype: string, supertype: string): boolean\r\n}\r\n\r\n/**\r\n * An abstract implementation of the {@link AstReflection} interface.\r\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\r\n */\r\nexport abstract class AbstractAstReflection implements AstReflection {\r\n\r\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\r\n    protected allSubtypes: Record<string, string[] | undefined> = {};\r\n\r\n    abstract getAllTypes(): string[];\r\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\r\n    abstract getTypeMetaData(type: string): TypeMetaData;\r\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\r\n\r\n    isInstance(node: unknown, type: string): boolean {\r\n        return isAstNode(node) && this.isSubtype(node.$type, type);\r\n    }\r\n\r\n    isSubtype(subtype: string, supertype: string): boolean {\r\n        if (subtype === supertype) {\r\n            return true;\r\n        }\r\n        let nested = this.subtypes[subtype];\r\n        if (!nested) {\r\n            nested = this.subtypes[subtype] = {};\r\n        }\r\n        const existing = nested[supertype];\r\n        if (existing !== undefined) {\r\n            return existing;\r\n        } else {\r\n            const result = this.computeIsSubtype(subtype, supertype);\r\n            nested[supertype] = result;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    getAllSubTypes(type: string): string[] {\r\n        const existing = this.allSubtypes[type];\r\n        if (existing) {\r\n            return existing;\r\n        } else {\r\n            const allTypes = this.getAllTypes();\r\n            const types: string[] = [];\r\n            for (const possibleSubType of allTypes) {\r\n                if (this.isSubtype(possibleSubType, type)) {\r\n                    types.push(possibleSubType);\r\n                }\r\n            }\r\n            this.allSubtypes[type] = types;\r\n            return types;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Represents runtime meta data about a meta model type.\r\n */\r\nexport interface TypeMetaData {\r\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\r\n    name: string\r\n    /** A list of properties. They can contain default values for their respective property in the AST. */\r\n    properties: TypeProperty[]\r\n}\r\n\r\n/**\r\n * Describes the meta data of a property of an AST node.\r\n *\r\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\r\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\r\n */\r\nexport interface TypeProperty {\r\n    name: string\r\n    defaultValue?: PropertyType\r\n}\r\n\r\n/**\r\n * Represents a default value for an AST property.\r\n */\r\nexport type PropertyType = number | string | boolean | PropertyType[];\r\n\r\n/**\r\n * A node in the Concrete Syntax Tree (CST).\r\n */\r\nexport interface CstNode extends DocumentSegment {\r\n    /** The container node in the CST */\r\n    readonly container?: CompositeCstNode;\r\n    /** @deprecated use `container` instead. */\r\n    readonly parent?: CompositeCstNode;\r\n    /** The actual text */\r\n    readonly text: string;\r\n    /** The root CST node */\r\n    readonly root: RootCstNode;\r\n    /** The grammar element from which this node was parsed */\r\n    readonly grammarSource?: AbstractElement;\r\n    /** @deprecated use `grammarSource` instead. */\r\n    readonly feature?: AbstractElement;\r\n    /** The AST node created from this CST node */\r\n    readonly astNode: AstNode;\r\n    /** @deprecated use `astNode` instead. */\r\n    readonly element: AstNode;\r\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\r\n    readonly hidden: boolean;\r\n}\r\n\r\n/**\r\n * A composite CST node contains other nodes, but no directly associated token.\r\n */\r\nexport interface CompositeCstNode extends CstNode {\r\n    readonly content: CstNode[];\r\n    /** @deprecated use `content` instead. */\r\n    readonly children: CstNode[];\r\n}\r\n\r\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\r\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\r\n}\r\n\r\n/**\r\n * A leaf CST node corresponds to a token in the input token stream.\r\n */\r\nexport interface LeafCstNode extends CstNode {\r\n    readonly tokenType: TokenType;\r\n}\r\n\r\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\r\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\r\n}\r\n\r\nexport interface RootCstNode extends CompositeCstNode {\r\n    readonly fullText: string\r\n}\r\n\r\nexport function isRootCstNode(node: unknown): node is RootCstNode {\r\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\r\n}\r\n\r\n/**\r\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\r\n */\r\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\r\n\r\n/**\r\n * Returns the property names (!) of an AstNode that are cross-references.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\r\n */\r\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\r\n    ExtractKeysOfValueType<N, Reference|undefined>\r\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) & {};\r\n\r\n/**\r\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\r\n */\r\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\r\n\r\n/**\r\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\r\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\r\n */\r\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\r\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\r\n}[keyof A];\r\n\r\nexport type Mutable<T> = {\r\n    -readonly [P in keyof T]: T[P]\r\n};\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport type { LangiumDocument } from '../workspace/documents.js';\r\nimport { isAstNode, isReference } from '../syntax-tree.js';\r\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\r\nimport { inRange } from './cst-utils.js';\r\n\r\n/**\r\n * Link the `$container` and other related properties of every AST node that is directly contained\r\n * in the given `node`.\r\n */\r\nexport function linkContentToContainer(node: AstNode): void {\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (Array.isArray(value)) {\r\n                value.forEach((item, index) => {\r\n                    if (isAstNode(item)) {\r\n                        (item as Mutable<AstNode>).$container = node;\r\n                        (item as Mutable<AstNode>).$containerProperty = name;\r\n                        (item as Mutable<AstNode>).$containerIndex = index;\r\n                    }\r\n                });\r\n            } else if (isAstNode(value)) {\r\n                (value as Mutable<AstNode>).$container = node;\r\n                (value as Mutable<AstNode>).$containerProperty = name;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\r\n * node that matches the type predicate. If the start node itself matches, it is returned.\r\n * If no container matches, `undefined` is returned.\r\n */\r\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\r\n    let item = node;\r\n    while (item) {\r\n        if (typePredicate(item)) {\r\n            return item;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\r\n * of a container that matches the given predicate. The start node is included in the checks.\r\n */\r\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\r\n    let item = node;\r\n    while (item) {\r\n        if (predicate(item)) {\r\n            return true;\r\n        }\r\n        item = item.$container;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Retrieve the document in which the given AST node is contained. A reference to the document is\r\n * usually held by the root node of the AST.\r\n *\r\n * @throws an error if the node is not contained in a document.\r\n */\r\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\r\n    const rootNode = findRootNode(node);\r\n    const result = rootNode.$document;\r\n    if (!result) {\r\n        throw new Error('AST node has no document.');\r\n    }\r\n    return result as LangiumDocument<T>;\r\n}\r\n\r\n/**\r\n * Returns the root node of the given AST node by following the `$container` references.\r\n */\r\nexport function findRootNode(node: AstNode): AstNode {\r\n    while (node.$container) {\r\n        node = node.$container;\r\n    }\r\n    return node;\r\n}\r\n\r\nexport interface AstStreamOptions {\r\n    /**\r\n     * Optional target range that the nodes in the stream need to intersect\r\n     */\r\n    range?: Range\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\r\n    if (!node) {\r\n        throw new Error('Node must be an AstNode.');\r\n    }\r\n    const range = options?.range;\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, AstNode>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isAstNode(value)) {\r\n                    state.keyIndex++;\r\n                    if (isAstNodeInRange(value, range)) {\r\n                        return { done: false, value };\r\n                    }\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\r\n                            return { done: false, value: element };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\r\n * This does not include the root node itself.\r\n */\r\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options));\r\n}\r\n\r\n/**\r\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\r\n    if (!root) {\r\n        throw new Error('Root node must be an AstNode.');\r\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\r\n        // Return an empty stream if the root node isn't in range\r\n        return new TreeStreamImpl(root, () => []);\r\n    }\r\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\r\n}\r\n\r\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\r\n    if (!range) {\r\n        return true;\r\n    }\r\n    const nodeRange = astNode.$cstNode?.range;\r\n    if (!nodeRange) {\r\n        return false;\r\n    }\r\n    return inRange(nodeRange, range);\r\n}\r\n\r\n/**\r\n * Create a stream of all cross-references that are held by the given AST node. This includes\r\n * single-valued as well as multi-valued (array) properties.\r\n */\r\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\r\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\r\n    return new StreamImpl<State, ReferenceInfo>(() => ({\r\n        keys: Object.keys(node),\r\n        keyIndex: 0,\r\n        arrayIndex: 0\r\n    }), state => {\r\n        while (state.keyIndex < state.keys.length) {\r\n            const property = state.keys[state.keyIndex];\r\n            if (!property.startsWith('$')) {\r\n                const value = (node as GenericAstNode)[property];\r\n                if (isReference(value)) {\r\n                    state.keyIndex++;\r\n                    return { done: false, value: { reference: value, container: node, property } };\r\n                } else if (Array.isArray(value)) {\r\n                    while (state.arrayIndex < value.length) {\r\n                        const index = state.arrayIndex++;\r\n                        const element = value[index];\r\n                        if (isReference(element)) {\r\n                            return { done: false, value: { reference: element, container: node, property, index } };\r\n                        }\r\n                    }\r\n                    state.arrayIndex = 0;\r\n                }\r\n            }\r\n            state.keyIndex++;\r\n        }\r\n        return DONE_RESULT;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a Stream of references to the target node from the AstNode tree\r\n *\r\n * @param targetNode AstNode we are looking for\r\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\r\n */\r\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\r\n    const refs: Reference[] = [];\r\n    streamAst(lookup).forEach(node => {\r\n        streamReferences(node).forEach(refInfo => {\r\n            if (refInfo.reference.ref === targetNode) {\r\n                refs.push(refInfo.reference);\r\n            }\r\n        });\r\n    });\r\n    return stream(refs);\r\n}\r\n\r\n/**\r\n * Assigns all mandatory AST properties to the specified node.\r\n *\r\n * @param reflection Reflection object used to gather mandatory properties for the node.\r\n * @param node Specified node is modified in place and properties are directly assigned.\r\n */\r\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\r\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\r\n    const genericNode = node as GenericAstNode;\r\n    for (const property of typeMetaData.properties) {\r\n        // Only set the value if the property is not already set and if it has a default value\r\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\r\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\r\n        }\r\n    }\r\n}\r\n\r\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\r\n    if (Array.isArray(propertyType)) {\r\n        return [...propertyType.map(copyDefaultValue)];\r\n    } else {\r\n        return propertyType;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a deep copy of the specified AST node.\r\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\r\n *\r\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\r\n */\r\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\r\n    const copy: GenericAstNode = { $type: node.$type };\r\n\r\n    for (const [name, value] of Object.entries(node)) {\r\n        if (!name.startsWith('$')) {\r\n            if (isAstNode(value)) {\r\n                copy[name] = copyAstNode(value, buildReference);\r\n            } else if (isReference(value)) {\r\n                copy[name] = buildReference(\r\n                    copy,\r\n                    name,\r\n                    value.$refNode,\r\n                    value.$refText\r\n                );\r\n            } else if (Array.isArray(value)) {\r\n                const copiedArray: unknown[] = [];\r\n                for (const element of value) {\r\n                    if (isAstNode(element)) {\r\n                        copiedArray.push(copyAstNode(element, buildReference));\r\n                    } else if (isReference(element)) {\r\n                        copiedArray.push(\r\n                            buildReference(\r\n                                copy,\r\n                                name,\r\n                                element.$refNode,\r\n                                element.$refText\r\n                            )\r\n                        );\r\n                    } else {\r\n                        copiedArray.push(element);\r\n                    }\r\n                }\r\n                copy[name] = copiedArray;\r\n            } else {\r\n                copy[name] = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    linkContentToContainer(copy);\r\n    return copy as unknown as T;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { IToken } from '@chevrotain/types';\r\nimport type { Range } from 'vscode-languageserver-types';\r\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\r\nimport type { DocumentSegment } from '../workspace/documents.js';\r\nimport type { Stream, TreeStream } from './stream.js';\r\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\r\nimport { TreeStreamImpl } from './stream.js';\r\n\r\n/**\r\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\r\n * including the root node itself.\r\n */\r\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\r\n    return new TreeStreamImpl(node, element => {\r\n        if (isCompositeCstNode(element)) {\r\n            return element.content;\r\n        } else {\r\n            return [];\r\n        }\r\n    }, { includeRoot: true });\r\n}\r\n\r\n/**\r\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\r\n */\r\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\r\n    return streamCst(node).filter(isLeafCstNode);\r\n}\r\n\r\n/**\r\n * Determines whether the specified cst node is a child of the specified parent node.\r\n */\r\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\r\n    while (child.container) {\r\n        child = child.container;\r\n        if (child === parent) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function tokenToRange(token: IToken): Range {\r\n    // Chevrotain uses 1-based indices everywhere\r\n    // So we subtract 1 from every value to align with the LSP\r\n    return {\r\n        start: {\r\n            character: token.startColumn! - 1,\r\n            line: token.startLine! - 1\r\n        },\r\n        end: {\r\n            character: token.endColumn!, // endColumn uses the correct index\r\n            line: token.endLine! - 1\r\n        }\r\n    };\r\n}\r\n\r\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\r\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const { offset, end, range } = node;\r\n    return {\r\n        range,\r\n        offset,\r\n        end,\r\n        length: end - offset\r\n    };\r\n}\r\n\r\nexport enum RangeComparison {\r\n    Before = 0,\r\n    After = 1,\r\n    OverlapFront = 2,\r\n    OverlapBack = 3,\r\n    Inside = 4,\r\n    Outside = 5,\r\n}\r\n\r\nexport function compareRange(range: Range, to: Range): RangeComparison {\r\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\r\n        return RangeComparison.Before;\r\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\r\n        return RangeComparison.After;\r\n    }\r\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\r\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\r\n    if (startInside && endInside) {\r\n        return RangeComparison.Inside;\r\n    } else if (startInside) {\r\n        return RangeComparison.OverlapBack;\r\n    } else if (endInside) {\r\n        return RangeComparison.OverlapFront;\r\n    } else {\r\n        return RangeComparison.Outside;\r\n    }\r\n}\r\n\r\nexport function inRange(range: Range, to: Range): boolean {\r\n    const comparison = compareRange(range, to);\r\n    return comparison > RangeComparison.After;\r\n}\r\n\r\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\r\n// Together with \\w it matches any kind of character which can commonly appear in IDs\r\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\r\n\r\n/**\r\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\r\n * it will instead return the leaf node at the `offset - 1` position.\r\n *\r\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\r\n */\r\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\r\n    if (cstNode) {\r\n        if (offset > 0) {\r\n            const localOffset = offset - cstNode.offset;\r\n            const textAtOffset = cstNode.text.charAt(localOffset);\r\n            if (!nameRegexp.test(textAtOffset)) {\r\n                offset--;\r\n            }\r\n        }\r\n        return findLeafNodeAtOffset(cstNode, offset);\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\r\n    if (cstNode) {\r\n        const previous = getPreviousNode(cstNode, true);\r\n        if (previous && isCommentNode(previous, commentNames)) {\r\n            return previous;\r\n        }\r\n        if (isRootCstNode(cstNode)) {\r\n            // Go from the first non-hidden node through all nodes in reverse order\r\n            // We do this to find the comment node which directly precedes the root node\r\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\r\n            for (let i = endIndex - 1; i >= 0; i--) {\r\n                const child = cstNode.content[i];\r\n                if (isCommentNode(child, commentNames)) {\r\n                    return child;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\r\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * Note that the given offset will be within the range of the returned leaf node.\r\n *\r\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node at the specified offset.\r\n */\r\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, false);\r\n        if (searchResult) {\r\n            return findLeafNodeAtOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Finds the leaf CST node at the specified 0-based string offset.\r\n * If no CST node exists at the specified position, it will return the leaf node before it.\r\n *\r\n * If there is no leaf node before the specified offset, this method will return `undefined`.\r\n *\r\n * @param node The CST node to search through.\r\n * @param offset The specified offset.\r\n * @returns The CST node closest to the specified offset.\r\n */\r\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\r\n    if (isLeafCstNode(node)) {\r\n        return node;\r\n    } else if (isCompositeCstNode(node)) {\r\n        const searchResult = binarySearch(node, offset, true);\r\n        if (searchResult) {\r\n            return findLeafNodeBeforeOffset(searchResult, offset);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\r\n    let left = 0;\r\n    let right = node.content.length - 1;\r\n    let closestNode: CstNode | undefined = undefined;\r\n\r\n    while (left <= right) {\r\n        const middle = Math.floor((left + right) / 2);\r\n        const middleNode = node.content[middle];\r\n\r\n        if (middleNode.offset <= offset && middleNode.end > offset) {\r\n            // Found an exact match\r\n            return middleNode;\r\n        }\r\n\r\n        if (middleNode.end <= offset) {\r\n            // Update the closest node (less than offset) and move to the right half\r\n            closestNode = closest ? middleNode : undefined;\r\n            left = middle + 1;\r\n        } else {\r\n            // Move to the left half\r\n            right = middle - 1;\r\n        }\r\n    }\r\n\r\n    return closestNode;\r\n}\r\n\r\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        while (index > 0) {\r\n            index--;\r\n            const previous = parent.content[index];\r\n            if (hidden || !previous.hidden) {\r\n                return previous;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        let index = parent.content.indexOf(node);\r\n        const last = parent.content.length - 1;\r\n        while (index < last) {\r\n            index++;\r\n            const next = parent.content[index];\r\n            if (hidden || !next.hidden) {\r\n                return next;\r\n            }\r\n        }\r\n        node = parent;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getStartlineNode(node: CstNode): CstNode {\r\n    if (node.range.start.character === 0) {\r\n        return node;\r\n    }\r\n    const line = node.range.start.line;\r\n    let last = node;\r\n    let index: number | undefined;\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const selfIndex = index ?? parent.content.indexOf(node);\r\n        if (selfIndex === 0) {\r\n            node = parent;\r\n            index = undefined;\r\n        } else {\r\n            index = selfIndex - 1;\r\n            node = parent.content[index];\r\n        }\r\n        if (node.range.start.line !== line) {\r\n            break;\r\n        }\r\n        last = node;\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\r\n    const commonParent = getCommonParent(start, end);\r\n    if (!commonParent) {\r\n        return [];\r\n    }\r\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\r\n}\r\n\r\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\r\n    const aParents = getParentChain(a);\r\n    const bParents = getParentChain(b);\r\n    let current: CommonParent | undefined;\r\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\r\n        const aParent = aParents[i];\r\n        const bParent = bParents[i];\r\n        if (aParent.parent === bParent.parent) {\r\n            current = {\r\n                parent: aParent.parent,\r\n                a: aParent.index,\r\n                b: bParent.index\r\n            };\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return current;\r\n}\r\n\r\ninterface CommonParent {\r\n    parent: CompositeCstNode\r\n    a: number\r\n    b: number\r\n}\r\n\r\nfunction getParentChain(node: CstNode): ParentLink[] {\r\n    const chain: ParentLink[] = [];\r\n    while (node.container) {\r\n        const parent = node.container;\r\n        const index = parent.content.indexOf(node);\r\n        chain.push({\r\n            parent,\r\n            index\r\n        });\r\n        node = parent;\r\n    }\r\n    return chain.reverse();\r\n}\r\n\r\ninterface ParentLink {\r\n    parent: CompositeCstNode\r\n    index: number\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { CstNode } from '../syntax-tree.js';\r\n\r\nexport class ErrorWithLocation extends Error {\r\n    constructor(node: CstNode | undefined, message: string) {\r\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\r\n    }\r\n}\r\n\r\nexport function assertUnreachable(_: never): never {\r\n    throw new Error('Error! The input value was not handled.');\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021-2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport { assertUnreachable } from '../utils/errors.js';\r\nimport * as ast from '../languages/generated/ast.js';\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { isCompositeCstNode } from '../syntax-tree.js';\r\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\r\nimport { streamCst } from './cst-utils.js';\r\nimport { escapeRegExp, isWhitespace } from './regexp-utils.js';\r\n\r\n/**\r\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\r\n * the result is `undefined`.\r\n */\r\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\r\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\r\n}\r\n\r\n/**\r\n * Returns all hidden terminal rules of the given grammar, if any.\r\n */\r\nexport function getHiddenRules(grammar: ast.Grammar) {\r\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\r\n}\r\n\r\n/**\r\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\r\n *\r\n * @param grammar The grammar that contains all rules\r\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\r\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\r\n *      this function returns all rules of the specified grammar.\r\n */\r\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\r\n    const ruleNames = new Set<string>();\r\n    const entryRule = getEntryRule(grammar);\r\n    if (!entryRule) {\r\n        return new Set(grammar.rules);\r\n    }\r\n\r\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\r\n    for (const rule of topMostRules) {\r\n        ruleDfs(rule, ruleNames, allTerminals);\r\n    }\r\n\r\n    const rules = new Set<ast.AbstractRule>();\r\n    for (const rule of grammar.rules) {\r\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\r\n            rules.add(rule);\r\n        }\r\n    }\r\n    return rules;\r\n}\r\n\r\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\r\n    visitedSet.add(rule.name);\r\n    streamAllContents(rule).forEach(node => {\r\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\r\n            const refRule = node.rule.ref;\r\n            if (refRule && !visitedSet.has(refRule.name)) {\r\n                ruleDfs(refRule, visitedSet, allTerminals);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\r\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\r\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\r\n *\r\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\r\n * and cannot be inferred.\r\n */\r\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\r\n    if (crossRef.terminal) {\r\n        return crossRef.terminal;\r\n    } else if (crossRef.type.ref) {\r\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\r\n        return nameAssigment?.terminal;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\r\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\r\n * that contains visible characters is considered a comment.\r\n */\r\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\r\n    return terminalRule.hidden && !isWhitespace(terminalRegex(terminalRule));\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that contribute to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\r\n */\r\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\r\n    if (!node || !property) {\r\n        return [];\r\n    }\r\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that contributes to the specified property.\r\n *\r\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\r\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\r\n    if (!node || !property) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\r\n    if (!first) {\r\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\r\n        if (nodeFeature && nodeFeature.feature === property) {\r\n            return [node];\r\n        }\r\n    }\r\n    if (isCompositeCstNode(node) && node.astNode === element) {\r\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\r\n    }\r\n    return [];\r\n}\r\n\r\n/**\r\n * Find all CST nodes within the given node that correspond to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\r\n * @param keyword A keyword as specified in the grammar.\r\n */\r\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\r\n    if (!node) {\r\n        return [];\r\n    }\r\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n}\r\n\r\n/**\r\n * Find a single CST node within the given node that corresponds to the specified keyword.\r\n *\r\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\r\n * @param keyword A keyword as specified in the grammar.\r\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\r\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\r\n *        the node with the specified index is returned.\r\n */\r\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\r\n    if (!node) {\r\n        return undefined;\r\n    }\r\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\r\n    if (nodes.length === 0) {\r\n        return undefined;\r\n    }\r\n    if (index !== undefined) {\r\n        index = Math.max(0, Math.min(index, nodes.length - 1));\r\n    } else {\r\n        index = 0;\r\n    }\r\n    return nodes[index];\r\n}\r\n\r\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\r\n    if (node.astNode !== element) {\r\n        return [];\r\n    }\r\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\r\n        return [node];\r\n    }\r\n    const treeIterator = streamCst(node).iterator();\r\n    let result: IteratorResult<CstNode>;\r\n    const keywordNodes: CstNode[] = [];\r\n    do {\r\n        result = treeIterator.next();\r\n        if (!result.done) {\r\n            const childNode = result.value;\r\n            if (childNode.astNode === element) {\r\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\r\n                    keywordNodes.push(childNode);\r\n                }\r\n            } else {\r\n                treeIterator.prune();\r\n            }\r\n        }\r\n    } while (!result.done);\r\n    return keywordNodes;\r\n}\r\n\r\n/**\r\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\r\n * node is returned. If no assignment is found, the result is `undefined`.\r\n *\r\n * @param cstNode A CST node for which to find a property assignment.\r\n */\r\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\r\n    const astNode = cstNode.astNode;\r\n    // Only search until the ast node of the parent cst node is no longer the original ast node\r\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\r\n    while (astNode === cstNode.container?.astNode) {\r\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\r\n        if (assignment) {\r\n            return assignment;\r\n        }\r\n        cstNode = cstNode.container;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\r\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\r\n * this function returns `undefined`.\r\n */\r\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\r\n    let startNode: AstNode = type;\r\n    if (ast.isInferredType(startNode)) {\r\n        // for inferred types, the location to start searching for the name-assignment is different\r\n        if (ast.isAction(startNode.$container)) {\r\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\r\n            startNode = startNode.$container.$container!;\r\n        } else if (ast.isParserRule(startNode.$container)) {\r\n            // investigate the parser rule with the explicitly inferred type\r\n            startNode = startNode.$container;\r\n        } else {\r\n            assertUnreachable(startNode.$container);\r\n        }\r\n    }\r\n    return findNameAssignmentInternal(type, startNode, new Map());\r\n}\r\n\r\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\r\n    // the cache is only required to prevent infinite loops\r\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\r\n        let childAssignment: ast.Assignment | undefined = undefined;\r\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\r\n        // No parent assignment implies unassigned rule call\r\n        if (!parentAssignment) {\r\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\r\n        }\r\n        cache.set(type, childAssignment);\r\n        return childAssignment;\r\n    }\r\n\r\n    if (cache.has(type)) {\r\n        return cache.get(type);\r\n    }\r\n    cache.set(type, undefined);\r\n    for (const node of streamAllContents(startNode)) {\r\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\r\n            cache.set(type, node);\r\n            return node;\r\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\r\n            return go(node, node.rule.ref);\r\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\r\n            return go(node, node.typeRef.ref);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\r\n    const parent = element.$container;\r\n    if (ast.isGroup(parent)) {\r\n        const elements = parent.elements;\r\n        const index = elements.indexOf(element);\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            const item = elements[i];\r\n            if (ast.isAction(item)) {\r\n                return item;\r\n            } else {\r\n                const action = streamAllContents(elements[i]).find(ast.isAction);\r\n                if (action) {\r\n                    return action;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ast.isAbstractElement(parent)) {\r\n        return getActionAtElement(parent);\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type Cardinality = '?' | '*' | '+' | undefined;\r\nexport type Operator = '=' | '+=' | '?=' | undefined;\r\n\r\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\r\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\r\n}\r\n\r\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\r\n    return cardinality === '*' || cardinality === '+';\r\n}\r\n\r\nexport function isArrayOperator(operator?: Operator): boolean {\r\n    return operator === '+=';\r\n}\r\n\r\n/**\r\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\r\n * primitive return type like `number`, `boolean`, etc.\r\n */\r\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\r\n    return isDataTypeRuleInternal(rule, new Set());\r\n}\r\n\r\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\r\n    if (visited.has(rule)) {\r\n        return true;\r\n    } else {\r\n        visited.add(rule);\r\n    }\r\n    for (const node of streamAllContents(rule)) {\r\n        if (ast.isRuleCall(node)) {\r\n            if (!node.rule.ref) {\r\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\r\n                return false;\r\n            }\r\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\r\n                return false;\r\n            }\r\n        } else if (ast.isAssignment(node)) {\r\n            return false;\r\n        } else if (ast.isAction(node)) {\r\n            return false;\r\n        }\r\n    }\r\n    return Boolean(rule.definition);\r\n}\r\n\r\nexport function isDataType(type: ast.Type): boolean {\r\n    return isDataTypeInternal(type.type, new Set());\r\n}\r\n\r\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\r\n    if (visited.has(type)) {\r\n        return true;\r\n    } else {\r\n        visited.add(type);\r\n    }\r\n    if (ast.isArrayType(type)) {\r\n        return false;\r\n    } else if (ast.isReferenceType(type)) {\r\n        return false;\r\n    } else if (ast.isUnionType(type)) {\r\n        return type.types.every(e => isDataTypeInternal(e, visited));\r\n    } else if (ast.isSimpleType(type)) {\r\n        if (type.primitiveType !== undefined) {\r\n            return true;\r\n        } else if (type.stringType !== undefined) {\r\n            return true;\r\n        } else if (type.typeRef !== undefined) {\r\n            const ref = type.typeRef.ref;\r\n            if (ast.isType(ref)) {\r\n                return isDataTypeInternal(ref.type, visited);\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\r\n    if (rule.inferredType) {\r\n        return rule.inferredType.name;\r\n    } else if (rule.dataType) {\r\n        return rule.dataType;\r\n    } else if (rule.returnType) {\r\n        const refType = rule.returnType.ref;\r\n        if (refType) {\r\n            // check if we need to check Action as return type\r\n            if (ast.isParserRule(refType)) {\r\n                return refType.name;\r\n            } else if (ast.isInterface(refType) || ast.isType(refType)) {\r\n                return refType.name;\r\n            }\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\r\n    if (ast.isParserRule(type)) {\r\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\r\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\r\n        return type.name;\r\n    } else if (ast.isAction(type)) {\r\n        const actionType = getActionType(type);\r\n        if (actionType) {\r\n            return actionType;\r\n        }\r\n    } else if (ast.isInferredType(type)) {\r\n        return type.name;\r\n    }\r\n    throw new Error('Cannot get name of Unknown Type');\r\n}\r\n\r\nexport function getActionType(action: ast.Action): string | undefined {\r\n    if (action.inferredType) {\r\n        return action.inferredType.name;\r\n    } else if (action.type?.ref) {\r\n        return getTypeName(action.type.ref);\r\n    }\r\n    return undefined; // not inferring and not referencing a valid type\r\n}\r\n\r\n/**\r\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\r\n * For data type rules, the name of the rule is returned,\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\r\n * @param rule the given rule\r\n * @returns the name of the AST node type of the rule\r\n */\r\nexport function getRuleTypeName(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\n/**\r\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\r\n * For data type rules, the name of the declared return type of the rule is returned (if any),\r\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\r\n * @param rule the given rule\r\n * @returns the name of the type of the produced values of the rule at runtime\r\n */\r\nexport function getRuleType(rule: ast.AbstractRule): string {\r\n    if (ast.isTerminalRule(rule)) {\r\n        return rule.type?.name ?? 'string';\r\n    } else {\r\n        return getExplicitRuleType(rule) ?? rule.name;\r\n    }\r\n}\r\n\r\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\r\n    const flags: Flags = {\r\n        s: false,\r\n        i: false,\r\n        u: false\r\n    };\r\n    const source = abstractElementToRegex(terminalRule.definition, flags);\r\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\r\n    return new RegExp(source, flagText);\r\n}\r\n\r\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\r\nconst WILDCARD = /[\\s\\S]/.source;\r\n\r\ntype Flags = {\r\n    s: boolean;\r\n    i: boolean;\r\n    u: boolean;\r\n}\r\n\r\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\r\n    if (ast.isTerminalAlternatives(element)) {\r\n        return terminalAlternativesToRegex(element);\r\n    } else if (ast.isTerminalGroup(element)) {\r\n        return terminalGroupToRegex(element);\r\n    } else if (ast.isCharacterRange(element)) {\r\n        return characterRangeToRegex(element);\r\n    } else if (ast.isTerminalRuleCall(element)) {\r\n        const rule = element.rule.ref;\r\n        if (!rule) {\r\n            throw new Error('Missing rule reference.');\r\n        }\r\n        return withCardinality(abstractElementToRegex(rule.definition), {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else if (ast.isNegatedToken(element)) {\r\n        return negateTokenToRegex(element);\r\n    } else if (ast.isUntilToken(element)) {\r\n        return untilTokenToRegex(element);\r\n    } else if (ast.isRegexToken(element)) {\r\n        const lastSlash = element.regex.lastIndexOf('/');\r\n        const source = element.regex.substring(1, lastSlash);\r\n        const regexFlags = element.regex.substring(lastSlash + 1);\r\n        if (flags) {\r\n            flags.i = regexFlags.includes('i');\r\n            flags.s = regexFlags.includes('s');\r\n            flags.u = regexFlags.includes('u');\r\n        }\r\n        return withCardinality(source, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead,\r\n            wrap: false\r\n        });\r\n    } else if (ast.isWildcard(element)) {\r\n        return withCardinality(WILDCARD, {\r\n            cardinality: element.cardinality,\r\n            lookahead: element.lookahead\r\n        });\r\n    } else {\r\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\r\n    }\r\n}\r\n\r\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\r\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\r\n        cardinality: alternatives.cardinality,\r\n        lookahead: alternatives.lookahead\r\n    });\r\n}\r\n\r\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\r\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\r\n        cardinality: group.cardinality,\r\n        lookahead: group.lookahead\r\n    });\r\n}\r\n\r\nfunction untilTokenToRegex(until: ast.UntilToken): string {\r\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\r\n        cardinality: until.cardinality,\r\n        lookahead: until.lookahead\r\n    });\r\n}\r\n\r\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\r\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\r\n        cardinality: negate.cardinality,\r\n        lookahead: negate.lookahead\r\n    });\r\n}\r\n\r\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\r\n    if (range.right) {\r\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\r\n            cardinality: range.cardinality,\r\n            lookahead: range.lookahead,\r\n            wrap: false\r\n        });\r\n    }\r\n    return withCardinality(keywordToRegex(range.left), {\r\n        cardinality: range.cardinality,\r\n        lookahead: range.lookahead,\r\n        wrap: false\r\n    });\r\n}\r\n\r\nfunction keywordToRegex(keyword: ast.Keyword): string {\r\n    return escapeRegExp(keyword.value);\r\n}\r\n\r\nfunction withCardinality(regex: string, options: {\r\n    cardinality?: string\r\n    wrap?: boolean\r\n    lookahead?: string\r\n}): string {\r\n    if (options.wrap !== false || options.lookahead) {\r\n        regex = `(${options.lookahead ?? ''}${regex})`;\r\n    }\r\n    if (options.cardinality) {\r\n        return `${regex}${options.cardinality}`;\r\n    }\r\n    return regex;\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\r\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\r\n\r\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\r\n\r\nconst regexpParser = new RegExpParser();\r\n\r\n/**\r\n * This class is in charge of heuristically identifying start/end tokens of terminals.\r\n *\r\n * The way this works is by doing the following:\r\n * 1. Traverse the regular expression in the \"start state\"\r\n * 2. Add any encountered sets/single characters to the \"start regexp\"\r\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\r\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\r\n * 5. If we re-encounter any variable-length content we reset the end stack\r\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\r\n *\r\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\r\n */\r\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\r\n\r\n    private isStarting = true;\r\n    startRegexp: string;\r\n    private endRegexpStack: string[] = [];\r\n    multiline = false;\r\n    regex: string;\r\n\r\n    get endRegex(): string {\r\n        return this.endRegexpStack.join('');\r\n    }\r\n\r\n    reset(regex: string): void {\r\n        this.multiline = false;\r\n        this.regex = regex;\r\n        this.startRegexp = '';\r\n        this.isStarting = true;\r\n        this.endRegexpStack = [];\r\n    }\r\n\r\n    override visitGroup(node: Group) {\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        }\r\n    }\r\n\r\n    override visitCharacter(node: Character): void {\r\n        const char = String.fromCharCode(node.value);\r\n        if (!this.multiline && char === '\\n') {\r\n            this.multiline = true;\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const escapedChar = escapeRegExp(char);\r\n            this.endRegexpStack.push(escapedChar);\r\n            if (this.isStarting) {\r\n                this.startRegexp += escapedChar;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitSet(node: Set): void {\r\n        if (!this.multiline) {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            const regex = new RegExp(set);\r\n            this.multiline = Boolean('\\n'.match(regex));\r\n        }\r\n        if (node.quantifier) {\r\n            this.isStarting = false;\r\n            this.endRegexpStack = [];\r\n        } else {\r\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\r\n            this.endRegexpStack.push(set);\r\n            if (this.isStarting) {\r\n                this.startRegexp += set;\r\n            }\r\n        }\r\n    }\r\n\r\n    override visitChildren(node: IRegExpAST): void {\r\n        if (node.type === 'Group') {\r\n            // Ignore children of groups with quantifier (+/*/?)\r\n            // These groups are unrelated to start/end tokens of terminals\r\n            const group = node as Group;\r\n            if (group.quantifier) {\r\n                return;\r\n            }\r\n        }\r\n        super.visitChildren(node);\r\n    }\r\n}\r\n\r\nconst visitor = new TerminalRegExpVisitor();\r\n\r\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\r\n    try {\r\n        if (typeof regexp !== 'string') {\r\n            regexp = regexp.source;\r\n        }\r\n        regexp = `/${regexp}/`;\r\n        const pattern = regexpParser.pattern(regexp);\r\n        const parts: Array<{ start: string, end: string }> = [];\r\n        for (const alternative of pattern.value.value) {\r\n            visitor.reset(regexp);\r\n            visitor.visit(alternative);\r\n            parts.push({\r\n                start: visitor.startRegexp,\r\n                end: visitor.endRegex\r\n            });\r\n        }\r\n        return parts;\r\n    } catch {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport function isMultilineComment(regexp: RegExp | string): boolean {\r\n    try {\r\n        if (typeof regexp === 'string') {\r\n            regexp = new RegExp(regexp);\r\n        }\r\n        regexp = regexp.toString();\r\n        visitor.reset(regexp);\r\n        // Parsing the pattern might fail (since it's user code)\r\n        visitor.visit(regexpParser.pattern(regexp));\r\n        return visitor.multiline;\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\r\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\r\n */\r\nexport const whitespaceCharacters = (\r\n    '\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\r\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\r\n\r\nexport function isWhitespace(value: RegExp | string): boolean {\r\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\r\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\r\n}\r\n\r\nexport function escapeRegExp(value: string): string {\r\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport function getCaseInsensitivePattern(keyword: string): string {\r\n    return Array.prototype.map.call(keyword, letter =>\r\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\r\n    ).join('');\r\n}\r\n\r\n/**\r\n * Determines whether the given input has a partial match with the specified regex.\r\n * @param regex The regex to partially match against\r\n * @param input The input string\r\n * @returns Whether any match exists.\r\n */\r\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\r\n    const partial = partialRegExp(regex);\r\n    const match = input.match(partial);\r\n    return !!match && match[0].length > 0;\r\n}\r\n\r\n/**\r\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\r\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\r\n * @param regex The input regex to be converted.\r\n * @returns A partial regex constructed from the input regex.\r\n */\r\nexport function partialRegExp(regex: RegExp | string): RegExp {\r\n    if (typeof regex === 'string') {\r\n        regex = new RegExp(regex);\r\n    }\r\n    const re = regex, source = regex.source;\r\n    let i = 0;\r\n\r\n    function process() {\r\n        let result = '',\r\n            tmp;\r\n\r\n        function appendRaw(nbChars: number) {\r\n            result += source.substr(i, nbChars);\r\n            i += nbChars;\r\n        }\r\n\r\n        function appendOptional(nbChars: number) {\r\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\r\n            i += nbChars;\r\n        }\r\n\r\n        while (i < source.length) {\r\n            switch (source[i]) {\r\n                case '\\\\':\r\n                    switch (source[i + 1]) {\r\n                        case 'c':\r\n                            appendOptional(3);\r\n                            break;\r\n                        case 'x':\r\n                            appendOptional(4);\r\n                            break;\r\n                        case 'u':\r\n                            if (re.unicode) {\r\n                                if (source[i + 2] === '{') {\r\n                                    appendOptional(source.indexOf('}', i) - i + 1);\r\n                                } else {\r\n                                    appendOptional(6);\r\n                                }\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'p':\r\n                        case 'P':\r\n                            if (re.unicode) {\r\n                                appendOptional(source.indexOf('}', i) - i + 1);\r\n                            } else {\r\n                                appendOptional(2);\r\n                            }\r\n                            break;\r\n                        case 'k':\r\n                            appendOptional(source.indexOf('>', i) - i + 1);\r\n                            break;\r\n                        default:\r\n                            appendOptional(2);\r\n                            break;\r\n                    }\r\n                    break;\r\n\r\n                case '[':\r\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source) || [];\r\n                    appendOptional(tmp[0].length);\r\n                    break;\r\n\r\n                case '|':\r\n                case '^':\r\n                case '$':\r\n                case '*':\r\n                case '+':\r\n                case '?':\r\n                    appendRaw(1);\r\n                    break;\r\n                case '{':\r\n                    tmp = /\\{\\d+,?\\d*\\}/g;\r\n                    tmp.lastIndex = i;\r\n                    tmp = tmp.exec(source);\r\n                    if (tmp) {\r\n                        appendRaw(tmp[0].length);\r\n                    } else {\r\n                        appendOptional(1);\r\n                    }\r\n                    break;\r\n                case '(':\r\n                    if (source[i + 1] === '?') {\r\n                        switch (source[i + 2]) {\r\n                            case ':':\r\n                                result += '(?:';\r\n                                i += 3;\r\n                                result += process() + '|$)';\r\n                                break;\r\n                            case '=':\r\n                                result += '(?=';\r\n                                i += 3;\r\n                                result += process() + ')';\r\n                                break;\r\n                            case '!':\r\n                                tmp = i;\r\n                                i += 3;\r\n                                process();\r\n                                result += source.substr(tmp, i - tmp);\r\n                                break;\r\n                            case '<':\r\n                                switch (source[i + 3]) {\r\n                                    case '=':\r\n                                    case '!':\r\n                                        tmp = i;\r\n                                        i += 4;\r\n                                        process();\r\n                                        result += source.substr(tmp, i - tmp);\r\n                                        break;\r\n                                    default:\r\n                                        appendRaw(source.indexOf('>', i) - i + 1);\r\n                                        result += process() + '|$)';\r\n                                        break;\r\n                                }\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        appendRaw(1);\r\n                        result += process() + '|$)';\r\n                    }\r\n                    break;\r\n                case ')':\r\n                    ++i;\r\n                    return result;\r\n                default:\r\n                    appendOptional(1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return new RegExp(process(), regex.flags);\r\n}\r\n","/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n/**\r\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\r\n * both sequentially and randomly (via index), a stream allows only sequential access.\r\n *\r\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\r\n * to store intermediate values. This can boost performance when a large sequence is\r\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\r\n * evaluation means that all processing is repeated when you access the sequence multiple\r\n * times; in such a case, it may be better to store the resulting sequence into an array.\r\n */\r\nexport interface Stream<T> extends Iterable<T> {\r\n\r\n    /**\r\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\r\n     */\r\n    iterator(): IterableIterator<T>;\r\n\r\n    /**\r\n     * Determines whether this stream contains no elements.\r\n     */\r\n    isEmpty(): boolean;\r\n\r\n    /**\r\n     * Determines the number of elements in this stream.\r\n     */\r\n    count(): number;\r\n\r\n    /**\r\n     * Collects all elements of this stream into an array.\r\n     */\r\n    toArray(): T[];\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Set.\r\n     */\r\n    toSet(): Set<T>;\r\n\r\n    /**\r\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\r\n     *\r\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\r\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\r\n     */\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\r\n\r\n    /**\r\n     * Returns a string representation of a stream.\r\n     */\r\n    toString(): string;\r\n\r\n    /**\r\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\r\n     *\r\n     * @param other Stream to be concatenated with this one.\r\n     */\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\r\n\r\n    /**\r\n     * Adds all elements of the stream into a string, separated by the specified separator string.\r\n     *\r\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\r\n     *        If omitted, the steam elements are separated with a comma.\r\n     */\r\n    join(separator?: string): string\r\n\r\n    /**\r\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\r\n     *\r\n     * @param searchElement The value to locate in the array.\r\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\r\n     *        starts at index 0.\r\n     */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n     * Determines whether all members of the stream satisfy the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\r\n     *        of the stream.\r\n     */\r\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Determines whether any member of the stream satisfies the specified test.\r\n     *\r\n     * @param predicate This method calls the predicate function for each element in the stream until the\r\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\r\n     *        of the stream.\r\n     */\r\n    some(predicate: (value: T) => unknown): boolean;\r\n\r\n    /**\r\n     * Performs the specified action for each element in the stream.\r\n     *\r\n     * @param callbackfn Function called once for each element in the stream.\r\n     */\r\n    forEach(callbackfn: (value: T, index: number) => void): void;\r\n\r\n    /**\r\n     * Returns a stream that yields the results of calling the specified callback function on each element\r\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\r\n     * accessing the resulting stream multiple times means the function is also called multiple times for\r\n     * each element of the stream.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that meet the condition specified in a callback function.\r\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\r\n     * resulting stream multiple times means the function is also called multiple times for each element\r\n     * of the stream.\r\n     *\r\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\r\n     */\r\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\r\n    filter(predicate: (value: T) => unknown): Stream<T>;\r\n\r\n    /**\r\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\r\n     * nor `null`.\r\n     */\r\n    nonNullable(): Stream<NonNullable<T>>;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream. The return value of the\r\n     * callback function is the accumulated result, and is provided as an argument in the next call to\r\n     * the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of a stream value.\r\n     */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Calls the specified callback function for all elements in the stream, in descending order.\r\n     * The return value of the callback function is the accumulated result, and is provided as an\r\n     * argument in the next call to the callback function.\r\n     *\r\n     * @param callbackfn This method calls the function once for each element in the stream, providing\r\n     *        the previous and current values of the reduction.\r\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\r\n     *        accumulation. The first call to the function provides this value as an argument instead\r\n     *        of an array value.\r\n     */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n\r\n    /**\r\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n\r\n    /**\r\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\r\n     * if there is no such element.\r\n     *\r\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\r\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\r\n     *        Boolean value `true`.\r\n     */\r\n    findIndex(predicate: (value: T) => unknown): number;\r\n\r\n    /**\r\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\r\n     *\r\n     * @param searchElement The element to search for.\r\n     */\r\n    includes(searchElement: T): boolean;\r\n\r\n    /**\r\n     * Calls a defined callback function on each element of the stream and then flattens the result into\r\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\r\n     *\r\n     * @param callbackfn Lazily evaluated function mapping stream elements.\r\n     */\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\r\n\r\n    /**\r\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\r\n     * to the specified depth.\r\n     *\r\n     * @param depth The maximum recursion depth. Defaults to 1.\r\n     */\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\r\n\r\n    /**\r\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\r\n     */\r\n    head(): T | undefined;\r\n\r\n    /**\r\n     * Returns a stream that skips the first `skipCount` elements from this stream.\r\n     *\r\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\r\n     *        the stream, an empty stream is returned. Defaults to 1.\r\n     */\r\n    tail(skipCount?: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\r\n     * in length.\r\n     *\r\n     * @param maxSize The number of elements the stream should be limited to\r\n     */\r\n    limit(maxSize: number): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream containing only the distinct elements from this stream.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     *\r\n     * @param by A function returning the key used to check equality with a previous stream element.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\r\n\r\n    /**\r\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\r\n     * Equality is determined with the same rules as a standard `Set`.\r\n     * @param other The elements that should be exluded from this stream.\r\n     * @param key A function returning the key used to check quality.\r\n     *        If omitted, the stream elements themselves are used for comparison.\r\n     */\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\r\n\r\n}\r\n\r\nexport type FlatStream<T, Depth extends number> = {\r\n    'done': Stream<T>,\r\n    'recur': T extends Iterable<infer Content>\r\n        ? FlatStream<Content, MinusOne<Depth>>\r\n        : Stream<T>\r\n}[Depth extends 0 ? 'done' : 'recur'];\r\n\r\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\r\n\r\n/**\r\n * The default implementation of `Stream` works with two input functions:\r\n *  - The first function creates the initial state of an iteration.\r\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\r\n */\r\nexport class StreamImpl<S, T> implements Stream<T> {\r\n    protected readonly startFn: () => S;\r\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\r\n\r\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\r\n        this.startFn = startFn;\r\n        this.nextFn = nextFn;\r\n    }\r\n\r\n    iterator(): IterableIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n\r\n    [Symbol.iterator](): Iterator<T> {\r\n        return this.iterator();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        const iterator = this.iterator();\r\n        return Boolean(iterator.next().done);\r\n    }\r\n\r\n    count(): number {\r\n        const iterator = this.iterator();\r\n        let count = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            count++;\r\n            next = iterator.next();\r\n        }\r\n        return count;\r\n    }\r\n\r\n    toArray(): T[] {\r\n        const result: T[] = [];\r\n        const iterator = this.iterator();\r\n        let next: IteratorResult<T>;\r\n        do {\r\n            next = iterator.next();\r\n            if (next.value !== undefined) {\r\n                result.push(next.value);\r\n            }\r\n        } while (!next.done);\r\n        return result;\r\n    }\r\n\r\n    toSet(): Set<T> {\r\n        return new Set(this);\r\n    }\r\n\r\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\r\n        const entryStream = this.map(element => <[K, V]>[\r\n            keyFn ? keyFn(element) : element,\r\n            valueFn ? valueFn(element) : element\r\n        ]);\r\n        return new Map(entryStream);\r\n    }\r\n\r\n    toString(): string {\r\n        return this.join();\r\n    }\r\n\r\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\r\n        return new StreamImpl<{ first: S, firstDone: boolean, iterator: Iterator<T2, unknown, undefined> }, T | T2>(\r\n            () => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }),\r\n            state => {\r\n                let result: IteratorResult<T | T2>;\r\n                if (!state.firstDone) {\r\n                    do {\r\n                        result = this.nextFn(state.first);\r\n                        if (!result.done) {\r\n                            return result;\r\n                        }\r\n                    } while (!result.done);\r\n                    state.firstDone = true;\r\n                }\r\n                do {\r\n                    result = state.iterator.next();\r\n                    if (!result.done) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    join(separator = ','): string {\r\n        const iterator = this.iterator();\r\n        let value = '';\r\n        let result: IteratorResult<T>;\r\n        let addSeparator = false;\r\n        do {\r\n            result = iterator.next();\r\n            if (!result.done) {\r\n                if (addSeparator) {\r\n                    value += separator;\r\n                }\r\n                value += toString(result.value);\r\n            }\r\n            addSeparator = true;\r\n        } while (!result.done);\r\n        return value;\r\n    }\r\n\r\n    indexOf(searchElement: T, fromIndex = 0): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (index >= fromIndex && next.value === searchElement) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // In the following definition the '& this' part in the return type is important\r\n    // _and_ the order within 'Stream<U> & this' is crucial!\r\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\r\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\r\n    // ```\r\n    //  const stream = new StreamImpl(...);\r\n    //  ... stream.every(<typeGuard>) & stream....\r\n    // ```\r\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\r\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\r\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\r\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\r\n    every(predicate: (value: T) => unknown): boolean;\r\n    every(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (!predicate(next.value)) {\r\n                return false;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    some(predicate: (value: T) => unknown): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    forEach(callbackfn: (value: T, index: number) => void): void {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            callbackfn(next.value, index);\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n    }\r\n\r\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\r\n        return new StreamImpl<S, U>(\r\n            this.startFn,\r\n            (state) => {\r\n                const { done, value } = this.nextFn(state);\r\n                if (done) {\r\n                    return DONE_RESULT;\r\n                } else {\r\n                    return { done: false, value: callbackfn(value) };\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\r\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\r\n    filter(predicate: (value: T) => unknown): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            this.startFn,\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state);\r\n                    if (!result.done && predicate(result.value)) {\r\n                        return result;\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    nonNullable(): Stream<NonNullable<T>> {\r\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\r\n    }\r\n\r\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const iterator = this.iterator();\r\n        let previousValue: U | T | undefined = initialValue;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (previousValue === undefined) {\r\n                previousValue = next.value;\r\n            } else {\r\n                previousValue = callbackfn(previousValue, next.value);\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return previousValue;\r\n    }\r\n\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\r\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\r\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\r\n    }\r\n\r\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\r\n        const next = iterator.next();\r\n        if (next.done) {\r\n            return initialValue;\r\n        }\r\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\r\n        if (previousValue === undefined) {\r\n            return next.value;\r\n        }\r\n        return callbackfn(previousValue, next.value);\r\n    }\r\n\r\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined;\r\n    find(predicate: (value: T) => unknown): T | undefined {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return next.value;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    findIndex(predicate: (value: T) => unknown): number {\r\n        const iterator = this.iterator();\r\n        let index = 0;\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (predicate(next.value)) {\r\n                return index;\r\n            }\r\n            next = iterator.next();\r\n            index++;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    includes(searchElement: T): boolean {\r\n        const iterator = this.iterator();\r\n        let next = iterator.next();\r\n        while (!next.done) {\r\n            if (next.value === searchElement) {\r\n                return true;\r\n            }\r\n            next = iterator.next();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\r\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\r\n        return new StreamImpl<FlatMapState, U>(\r\n            () => ({ this: this.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = this.nextFn(state.this);\r\n                    if (!done) {\r\n                        const mapped = callbackfn(value);\r\n                        if (isIterable(mapped)) {\r\n                            state.iterator = mapped[Symbol.iterator]();\r\n                        } else {\r\n                            return { done: false, value: mapped };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\r\n        if (depth === undefined) {\r\n            depth = 1 as D;\r\n        }\r\n        if (depth <= 0) {\r\n            return this as unknown as FlatStream<T, D>;\r\n        }\r\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\r\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\r\n        return new StreamImpl<FlatMapState, T>(\r\n            () => ({ this: stream.startFn() }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (next.done) {\r\n                            state.iterator = undefined;\r\n                        } else {\r\n                            return next;\r\n                        }\r\n                    }\r\n                    const { done, value } = stream.nextFn(state.this);\r\n                    if (!done) {\r\n                        if (isIterable(value)) {\r\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\r\n                        } else {\r\n                            return { done: false, value: value };\r\n                        }\r\n                    }\r\n                } while (state.iterator);\r\n                return DONE_RESULT;\r\n            }\r\n        ) as unknown as FlatStream<T, D>;\r\n    }\r\n\r\n    head(): T | undefined {\r\n        const iterator = this.iterator();\r\n        const result = iterator.next();\r\n        if (result.done) {\r\n            return undefined;\r\n        }\r\n        return result.value;\r\n    }\r\n\r\n    tail(skipCount = 1): Stream<T> {\r\n        return new StreamImpl<S, T>(\r\n            () => {\r\n                const state = this.startFn();\r\n                for (let i = 0; i < skipCount; i++) {\r\n                    const next = this.nextFn(state);\r\n                    if (next.done) {\r\n                        return state;\r\n                    }\r\n                }\r\n                return state;\r\n            },\r\n            this.nextFn\r\n        );\r\n    }\r\n\r\n    limit(maxSize: number): Stream<T> {\r\n        return new StreamImpl<{ size: number, state: S }, T>(\r\n            () => ({ size: 0, state: this.startFn() }),\r\n            state => {\r\n                state.size++;\r\n                if (state.size > maxSize) {\r\n                    return DONE_RESULT;\r\n                }\r\n                return this.nextFn(state.state);\r\n            }\r\n        );\r\n    }\r\n\r\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\r\n        return new StreamImpl<{ set: Set<Key | T>, internalState: S }, T>(\r\n            () => ({ set: new Set<Key | T>(), internalState: this.startFn() }),\r\n            state => {\r\n                let result: IteratorResult<T>;\r\n                do {\r\n                    result = this.nextFn(state.internalState);\r\n                    if (!result.done) {\r\n                        const value = by ? by(result.value) : result.value;\r\n                        if (!state.set.has(value)) {\r\n                            state.set.add(value);\r\n                            return result;\r\n                        }\r\n                    }\r\n                } while (!result.done);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\r\n        const otherKeySet = new Set<Key | T>();\r\n        for (const item of other) {\r\n            const value = key ? key(item) : item;\r\n            otherKeySet.add(value);\r\n        }\r\n        return this.filter(e => {\r\n            const ownKey = key ? key(e) : e;\r\n            return !otherKeySet.has(ownKey);\r\n        });\r\n    }\r\n}\r\n\r\nfunction toString(item: unknown): string {\r\n    if (typeof item === 'string') {\r\n        return item as string;\r\n    }\r\n    if (typeof item === 'undefined') {\r\n        return 'undefined';\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof (item as any).toString === 'function') {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return (item as any).toString();\r\n    }\r\n    return Object.prototype.toString.call(item);\r\n}\r\n\r\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\r\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * An empty stream of any type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\r\n\r\n/**\r\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\r\n */\r\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\r\n\r\n/**\r\n * Create a stream from one or more iterables or array-likes.\r\n */\r\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\r\n    if (collections.length === 1) {\r\n        const collection = collections[0];\r\n        if (collection instanceof StreamImpl) {\r\n            return collection as Stream<T>;\r\n        }\r\n        if (isIterable(collection)) {\r\n            return new StreamImpl<Iterator<T, undefined>, T>(\r\n                () => collection[Symbol.iterator](),\r\n                (iterator) => iterator.next()\r\n            );\r\n        }\r\n        if (typeof collection.length === 'number') {\r\n            return new StreamImpl<{ index: number }, T>(\r\n                () => ({ index: 0 }),\r\n                (state) => {\r\n                    if (state.index < collection.length) {\r\n                        return { done: false, value: collection[state.index++] };\r\n                    } else {\r\n                        return DONE_RESULT;\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    if (collections.length > 1) {\r\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\r\n        return new StreamImpl<State, T>(\r\n            () => ({ collIndex: 0, arrIndex: 0 }),\r\n            (state) => {\r\n                do {\r\n                    if (state.iterator) {\r\n                        const next = state.iterator.next();\r\n                        if (!next.done) {\r\n                            return next;\r\n                        }\r\n                        state.iterator = undefined;\r\n                    }\r\n                    if (state.array) {\r\n                        if (state.arrIndex < state.array.length) {\r\n                            return { done: false, value: state.array[state.arrIndex++] };\r\n                        }\r\n                        state.array = undefined;\r\n                        state.arrIndex = 0;\r\n                    }\r\n                    if (state.collIndex < collections.length) {\r\n                        const collection = collections[state.collIndex++];\r\n                        if (isIterable(collection)) {\r\n                            state.iterator = collection[Symbol.iterator]();\r\n                        } else if (collection && typeof collection.length === 'number') {\r\n                            state.array = collection;\r\n                        }\r\n                    }\r\n                } while (state.iterator || state.array || state.collIndex < collections.length);\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n    return EMPTY_STREAM;\r\n}\r\n\r\n/**\r\n * A tree iterator adds the ability to prune the current iteration.\r\n */\r\nexport interface TreeIterator<T> extends IterableIterator<T> {\r\n    /**\r\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\r\n     * element had no children.\r\n     */\r\n    prune(): void\r\n}\r\n\r\n/**\r\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\r\n */\r\nexport interface TreeStream<T> extends Stream<T> {\r\n    iterator(): TreeIterator<T>\r\n}\r\n\r\n/**\r\n * The default implementation of `TreeStream` takes a root element and a function that computes the\r\n * children of its argument. Whether the root node included in the stream is controlled with the\r\n * `includeRoot` option, which defaults to `false`.\r\n */\r\nexport class TreeStreamImpl<T>\r\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\r\n    implements TreeStream<T> {\r\n\r\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\r\n        super(\r\n            () => ({\r\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\r\n                pruned: false\r\n            }),\r\n            state => {\r\n                if (state.pruned) {\r\n                    state.iterators.pop();\r\n                    state.pruned = false;\r\n                }\r\n                while (state.iterators.length > 0) {\r\n                    const iterator = state.iterators[state.iterators.length - 1];\r\n                    const next = iterator.next();\r\n                    if (next.done) {\r\n                        state.iterators.pop();\r\n                    } else {\r\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\r\n                        return next;\r\n                    }\r\n                }\r\n                return DONE_RESULT;\r\n            }\r\n        );\r\n    }\r\n\r\n    override iterator(): TreeIterator<T> {\r\n        const iterator = {\r\n            state: this.startFn(),\r\n            next: () => this.nextFn(iterator.state),\r\n            prune: () => {\r\n                iterator.state.pruned = true;\r\n            },\r\n            [Symbol.iterator]: () => iterator\r\n        };\r\n        return iterator;\r\n    }\r\n}\r\n\r\n/**\r\n * A set of utility functions that reduce a stream to a single value.\r\n */\r\nexport namespace Reduction {\r\n\r\n    /**\r\n     * Compute the sum of a number stream.\r\n     */\r\n    export function sum(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a + b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the product of a number stream.\r\n     */\r\n    export function product(stream: Stream<number>): number {\r\n        return stream.reduce((a, b) => a * b, 0);\r\n    }\r\n\r\n    /**\r\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function min(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.min(a, b));\r\n    }\r\n\r\n    /**\r\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\r\n     */\r\n    export function max(stream: Stream<number>): number | undefined {\r\n        return stream.reduce((a, b) => Math.max(a, b));\r\n    }\r\n\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { URI } from '../utils/uri-utils.js';\r\n\r\nexport interface FileSystemNode {\r\n    readonly isFile: boolean;\r\n    readonly isDirectory: boolean;\r\n    readonly uri: URI;\r\n}\r\n\r\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\r\n\r\n/**\r\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\r\n */\r\nexport interface FileSystemProvider {\r\n    /**\r\n     * Reads a document asynchronously from a given URI.\r\n     * @returns The string content of the file with the specified URI.\r\n     */\r\n    readFile(uri: URI): Promise<string>;\r\n    /**\r\n     * Reads the directory information for the given URI.\r\n     * @returns The list of file system entries that are contained within the specified directory.\r\n     */\r\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\r\n}\r\n\r\nexport class EmptyFileSystemProvider implements FileSystemProvider {\r\n\r\n    readFile(): Promise<string> {\r\n        throw new Error('No file system is available.');\r\n    }\r\n\r\n    async readDirectory(): Promise<FileSystemNode[]> {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport const EmptyFileSystem = {\r\n    fileSystemProvider: () => new EmptyFileSystemProvider()\r\n};\r\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}"],"names":["_classCallCheck","require","_createClass","exports","CancellationToken","ral_1","Is","events_1","None","Object","freeze","isCancellationRequested","onCancellationRequested","Event","Cancelled","is","value","candidate","boolean","shortcutEvent","callback","context","handle","default","timer","setTimeout","bind","dispose","MutableToken","this","_isCancelled","key","_emitter","fire","undefined","get","Emitter","event","CancellationTokenSource","_token","cancel","defineProperty","_disposable","CallbackList","_this","arguments","length","bucket","_callbacks","_contexts","push","Array","isArray","remove","foundCallbackWithDifferentContext","i","len","splice","Error","ret","callbacks","slice","contexts","_len","args","_key","apply","e","console","error","_options","_this2","_event","listener","thisArgs","disposables","onFirstListenerAdd","isEmpty","add","result","_noop","onLastListenerRemove","invoke","call","string","String","array","stringArray","func","number","Number","every","elem","_ral","RAL","install","ral","module","instance","Constructor","TypeError","__esModule","toPropertyKey","_defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","_typeof","input","hint","prim","Symbol","toPrimitive","res","arg","obj","iterator","constructor","cc","char","charCodeAt","insertToSet","item","set","forEach","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","concat","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","newState","consumeChar","disjunction","flags","type","loc","begin","end","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","isBacktracking","range","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","quantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","isClassAtom","from","classAtom","isRangeDash","to","classEscape","classPatternCharacterAtom","capturing","groupAst","parseInt","nextChar","howMuch","isAtom","prevState","saveState","restoreState","howMany","hexString","hexChar","BaseRegExpVisitor","node","child","hasOwnProperty","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","visitChildren","PacketTokenBuilder","_class","_AbstractMermaidToken","_inherits","_super","_createSuper","AbstractMermaidTokenBuilder","__name","PacketModule","parser","TokenBuilder","ValueConverter","CommonValueConverter","createPacketServices","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","MermaidGeneratedSharedModule","Packet","createDefaultCoreModule","PacketGeneratedModule","ServiceRegistry","register","minimalGrammarModule","Grammar","LanguageMetaData","caseInsensitive","fileExtensions","languageId","minimalSharedGrammarModule","AstReflection","ast","loadGrammarFromJson","json","services","grammar","createMinimalGrammarServices","astNode","serializer","JsonSerializer","deserialize","workspace","LangiumDocumentFactory","fromModel","URI","parse","_a","name","__defProp","Statement","Architecture","reflection","isInstance","Axis","Branch","Checkout","CherryPicking","ClassDefStatement","Commit","Curve","Edge","Entry","GitGraph","Group","Info","Item","Junction","Merge","Option","PacketBlock","Pie","PieSection","Radar","Service","Treemap","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","loadedRadarGrammar","loadedTreemapGrammar","TreemapRow","Direction","Leaf","Section","MermaidAstReflection","_AbstractAstReflectio","subtype","supertype","isSubtype","refInfo","referenceId","container","$type","property","properties","defaultValue","AbstractAstReflection","InfoGrammar","_loadedInfoGrammar","PacketGrammar","_loadedPacketGrammar","PieGrammar","_loadedPieGrammar","ArchitectureGrammar","_loadedArchitectureGr","GitGraphGrammar","_loadedGitGraphGramma","RadarGrammar","_loadedRadarGrammar","TreemapGrammar","_loadedTreemapGrammar","InfoLanguageMetaData","mode","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","RadarLanguageMetaData","TreemapLanguageMetaData","InfoGeneratedModule","PieGeneratedModule","ArchitectureGeneratedModule","GitGraphGeneratedModule","RadarGeneratedModule","TreemapGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","AbstractMermaidValueConverter","_class2","_DefaultValueConverte","_super2","rule","cstNode","runCommonConverter","runCustomConverter","_get","_getPrototypeOf","_cstNode","regex","match","exec","trim","replace","DefaultValueConverter","_class3","_AbstractMermaidValue","_super3","_rule","_input","_class4","_DefaultTokenBuilder","_super4","keywords","Set","rules","terminalTokens","options","tokenTypes","tokenType","has","PATTERN","RegExp","toString","DefaultTokenBuilder","_class5","CommonTokenBuilder","_super5","TreemapTokenBuilder","classDefRegex","TreemapValueConverter","parseFloat","className","styleText","registerValidationChecks","validator","validation","TreemapValidator","registry","ValidationRegistry","checks","checkSingleRoot","doc","accept","rootNodeIndentation","_step","_iterator","_createForOfIteratorHelper","TreemapRows","s","n","done","row","indent","err","f","TreemapModule","createTreemapServices","InfoTokenBuilder","InfoModule","createInfoServices","RadarTokenBuilder","RadarModule","createRadarServices","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","createArchitectureServices","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","PieTokenBuilder","PieValueConverter","PieModule","createPieServices","parsers","initializers","info","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$import","createInfoServices2","wrap","_context","prev","next","sent","LangiumParser","stop","packet","_callee2","_yield$import2","createPacketServices2","_context2","pie","_callee3","_yield$import3","createPieServices2","_context3","architecture","_callee4","_yield$import4","createArchitectureServices2","_context4","gitGraph","_callee5","_yield$import5","createGitGraphServices2","_context5","radar","_callee6","_yield$import6","createRadarServices2","_context6","treemap","_callee7","_yield$import7","createTreemapServices2","_context7","_x","_x2","_parse","_callee8","diagramType","text","initializer","_context8","lexerErrors","parserErrors","MermaidParseError","abrupt","_Error","map","message","join","_wrapNativeSuper","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","start","index","guard","toInteger","baseSlice","createAssigner","object","source","isPrototype","isArrayLike","copyObject","keys","assignValue","predicate","arrayMap","getAllKeysIn","prop","baseIteratee","basePickBy","path","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","tokenLabel","tokType","isString","LABEL","AbstractProduction","_definition","visitor","definition","prod","NonTerminal","_AbstractProduction","assign","_assertThisInitialized","pickBy","v","referencedRule","Rule","_AbstractProduction2","orgText","Alternative","_AbstractProduction3","_this3","ignoreAmbiguities","_AbstractProduction4","_this4","RepetitionMandatory","_AbstractProduction5","_this5","RepetitionMandatoryWithSeparator","_AbstractProduction6","_super6","_this6","Repetition","_AbstractProduction7","_super7","_this7","RepetitionWithSeparator","_AbstractProduction8","_super8","_this8","Alternation","_AbstractProduction9","_super9","_this9","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","separator","terminalType","serializedTerminal","terminalLabel","pattern","RestWalker","prevRest","subProd","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","terminal","refProd","flatProd","fullOrRest","walk","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","baseUniq","collection","baseEach","arraySome","baseSome","isIterateeCall","nativeMax","Math","max","fromIndex","values","indexOf","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","some","includes","getProductionDslName","first","isSequenceProd","currSubProd","firstSet","seq","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","flatten","firstForBranching","IN","ResyncFollowsWalker","_RestWalker","topProd","follows","inner","occurenceInParent","followName","fullRest","t_in_topProd_follows","arrayFilter","baseFilter","negate","iteratee","comparator","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","computed","valuesIndex","difference","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","fromCharCode","upperChar","lowerChar","toLowerCase","handleIgnoreCase","findCode","setNode","targetCharCodes","find","codeOrRange","targetCode","CharCodeFinder","_BaseRegExpVisitor","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","onlyRelevantTypes","tracer","defaults","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","action","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","reject","currType","Lexer","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","reduce","acc","x","longerAlt","canLineTerminator","isCustom","short","pop","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","tokenTypesWithMissingPattern","filter","LexerDefinitionErrorType","MISSING_PATTERN","valid","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","_BaseRegExpVisitor2","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","multiline","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","dupPatternSrc","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","_ref","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","modes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","lastIndex","c","charsOrCodes","numOrString","charCode","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","token","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","categories","searching","CATEGORIES","newCategories","expandCategories","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","fullText","startOffset","line","column","charAt","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","traceInitMaxIdent","log","_timer","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","getPossiblePatterns","orgLength","offset","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","currConfig","pop_mode","popToken","startLine","startColumn","newMode","last","modeCanBeOptimized","push_mode","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","numOfLTsInMatch","foundTerminator","lastLTEndOffset","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","endOffset","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","expectedMsg","previous","ruleName","buildNotAllInputParsedMessage","_ref2","firstRedundant","buildNoViableAltMessage","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","nextValidSequenceItems","itemMsg","buildEarlyExitMessage","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","hasExplicitIndex","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","pathNames","leftRecursionPath","currRule","leftRecursivePath","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","GastRefResolverVisitor","_GAstVisitor","nameToTopRule","errMsgProvider","currTopLevel","ref","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","PROD_TYPE","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","_AbstractNextPossible","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","_RestWalker2","topRule","isEndOfRule","NextTerminalAfterManyWalker","_AbstractNextTerminal","firstAfterMany","_first","NextTerminalAfterManySepWalker","_AbstractNextTerminal2","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","_AbstractNextTerminal3","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","_AbstractNextTerminal4","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","alternatives","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","expectedProdType","checkIsTarget","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","size","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","_loop","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","startWalking","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","flatMap","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","allRules","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","_GAstVisitor2","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","other","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","_GAstVisitor3","resolveGrammar","actualOptions","topRulesTable","refResolver","resolveRefs","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","_RecognitionException","previousToken","NoViableAltException","_RecognitionException2","NotAllInputParsedException","_RecognitionException3","EarlyExitException","_RecognitionException4","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","Recoverable","firstAfterRepMap","resyncFollows","DEFAULT_PARSER_CONFIG","attemptInRepetitionRecovery","tokToInsert","NaN","isInsertedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","getCurrRuleFullName","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","expectTokAfterLastMatch","nextTokIdx","notStuck","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","canRecoverWithSingleTokenInsertion","getTokenToInsert","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","canTokenTypeBeInsertedInRecovery","mismatchedTok","possibleFollowsTokType","canTokenTypeBeDeletedInRecovery","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","RULE_STACK","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","buildFullFollowKeyStack","resyncTokens","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","getHumanReadableRuleStack","currShortName","getKeyForAutomaticLookahead","firstAfterRepInfo","getGAstProductions","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","_toConsumableArray","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","laFuncBuilder","buildLookaheadFuncForOr","lookaheadBuilder","buildLookaheadFuncForOptionalProd","LooksAhead","lookaheadStrategy","lookAheadFuncsCache","Map","_collectMethods","reset","dslMethods","collectMethods","repetitionMandatory","repetitionMandatoryWithSeparator","repetitionWithSeparator","prodIdx","laFunc","buildLookaheadForAlternation","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","buildLookaheadForOptional","DslMethodsCollectorVisitor","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","CstVisitorDefinitionError","NAME","defineNameProp","nameValue","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","children","createBaseSemanticVisitorConstructor","ruleNames","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","TreeBuilder","CST_STACK","outputCst","nodeLocationTracking","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","tokenTypeName","rootCst","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","baseCstVisitorConstructor","newBaseCstVisitorConstructor","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","getBaseCstVisitorConstructor","LexerAdapter","tokVector","tokVectorLength","newInput","selfAnalysisDone","END_OF_FILE","soughtIdx","RecognizerApi","impl","consumeInternal","ruleToCall","subruleInternal","actionORMethodDef","optionInternal","altsOrOpts","orInternal","manyInternal","atLeastOneInternal","manySepFirstInternal","atLeastOneSepFirstInternal","implementation","DEFAULT_RULE_CONFIG","definedRulesNames","definitionErrors","ruleImplementation","defineRule","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","isBackTrackingStack","orgState","saveRecogState","reloadRecogState","topRules","RecognizerEngine","tokenVocabulary","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","tokensMap","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","invokeRuleWithTry","resyncEnabled","recoveryValueFunc","shortName","BITS_FOR_METHOD_TYPE","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","_len2","_key2","originalGrammarAction","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","isInCurrentRuleReSyncSet","reSyncTo","partialCstResult","recoveredNode","moveToTerminatedState","optionInternalLogic","getLaFuncFromCache","DEF","orgLookaheadFunction","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternalLogic","SEP","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","getLexerPosition","altIdxToTake","ALT","raiseNoAltException","isAtEndOfInput","firstRedundantTok","ARGS","subruleInternalError","consumeInternalError","eFromConsumption","consumeInternalRecovery","tryInRuleRecovery","eFromInRuleRecovery","savedErrors","savedRuleStack","lexerState","fullName","resetLexerState","ErrorHandler","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","ContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","RECORDING_NULL_OBJECT","description","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","GastRecorder","recordingProdStack","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION","ACTION_RECORD","BACKTRACK","BACKTRACK_RECORD","LA_RECORD","that","newTopLevelRule","originalError","KNOWN_RECORDER_ERROR","mutabilityError","recordProd","recordOrProd","assertMethodIdxIsValid","getIdxSuffix","JSON","stringify","prevProd","peek","newNoneTerminal","prodConstructor","mainProdArg","handleSep","grammarAction","newProd","MAX_LOOKAHEAD","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","PerformanceTracer","userTraceInitPerf","traceIsNumber","EMPTY_ALT","derivedCtor","Parser","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","defErrorsMsgs","enableRecording","recordedRuleGast","topLevelRuleRecord","disableRecording","resolverErrors","validationErrors","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","validate","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","parserInstance","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","_Parser2","configClone","buildATNKey","ATN_BASIC","ATN_RULE_START","ATN_PLUS_BLOCK_START","ATN_STAR_BLOCK_START","ATN_RULE_STOP","ATN_BLOCK_END","ATN_STAR_LOOP_BACK","ATN_STAR_LOOP_ENTRY","ATN_PLUS_LOOP_BACK","ATN_LOOP_END","AbstractTransition","AtomTransition","_AbstractTransition","EpsilonTransition","_AbstractTransition2","RuleTransition","_AbstractTransition3","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","tokenRef","currentRule","nonTerminal","left","right","addTransition","ruleRef","defineDecisionState","makeAlts","optional","epsilon","starState","star","sep","repetitionSep","plusState","plus","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","makeBlock","blkStart","blkEnd","loop","loopback","entry","loopEnd","state","decision","_i","_alts","a","b","partial","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","isEpsilon","DFA_ERROR","ATNConfigSet","configs","getATNConfigKey","stack","createDFACache","startState","predicateSet","existing","atnStartState","PredicateSet","EMPTY_PREDICATES","LLStarLookaheadStrategy","_LLkLookaheadStrategy","logging","dfas","decisionLength","decisionToDFA","initATNSimulator","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","_step2","altSet","_iterator2","_step3","indices","_iterator3","dfaCaches","dfa","addDFAState","newDFAState","atnState","numberOfTransitions","closure","computeStartState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","lookahead","reach","_step4","intermediate","skippedStopStates","_iterator4","elements","transitionLength","getReachableTarget","_step5","_iterator5","_step8","_iterator8","hasConfigInRuleStopState","_step6","_iterator6","computeReachSet","addDFAEdge","predictedAlt","_step7","_iterator7","getUniqueAlt","uniqueAlt","_step9","_iterator9","allConfigsInRuleStopStates","altSets","_step10","configToAlts","_iterator10","getConflictingAltSets","_Array$from","hasConflictingAltSet","_i2","_Array$from2","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","min","reportLookaheadAmbiguity","buildAmbiguityError","current","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","mapKey","finalize","p","getEpsilonTarget","atnStack","DocumentUri","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","MIN_VALUE","MAX_VALUE","character","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","annotation","annotationId","textDocument","edits","OptionalVersionedTextDocumentIdentifier","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","TextDocumentIdentifier","VersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","version","PlainText","Markdown","Text","Method","Function","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Boolean","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","parent","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","Type","Parameter","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","content","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","lineOffsets","isLineStart","ch","getLineOffsets","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","rootNode","RootCstNodeImpl","root","feature","compositeNode","CompositeCstNodeImpl","grammarSource","leafNode","LeafCstNodeImpl","tokenToRange","nodes","added","_current$content","_current$container$co","_this$rootNode$conten","unshift","$cstNode","removeNode","AbstractCstNode","_astNode","_AbstractCstNode","hidden","_hidden","_offset","_tokenType","_length","_range","_AbstractCstNode2","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","_Array","_get2","addParents","_get3","count","_get4","_len3","_key3","_CompositeCstNodeImpl","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","_unorderedGroups","lexer","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","wrapOption","wrapMany","wrapAtLeastOne","IS_RECORDING","wrapSelfAnalysis","_AbstractLangiumParse","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","computeRuleType","ruleMethod","DEFINE_RULE","startImplementation","mainRule","fragment","isDataTypeRule","explicit","getExplicitRuleType","buildRootNode","lexerResult","tokenize","addHiddenNodes","unorderedGroups","clear","lexerReport","report","createNode","isRecording","construct","hiddenTokens","wrapConsume","isValidToken","extractHiddenTokens","buildLeafNode","_this$getAssignment","getAssignment","assignment","isCrossRef","convertedValue","isKeyword","convert","operator","buildCompositeNode","subruleResult","wrapSubrule","performSubruleAssignment","_this$getAssignment2","newItem","assignWithoutOverride","linkContentToContainer","assignMandatoryProperties","getContainerOfType","isAssignment","isCrossReference","buildReference","_Object$entries","entries","_Object$entries$_i","_slicedToArray","existingValue","newValue","targetCstNode","LangiumParserErrorMessageProvider","_AbstractParserErrorM","AbstractParserErrorMessageProvider","LangiumCompletionParser","_AbstractLangiumParse2","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","element","lastIndexOf","defaultConfig","_EmbeddedActionsParse","useDefaultLookahead","RULE","performSelfAnalysis","consume","createParser","parserContext","reachable","getAllReachableRules","parserRules","stream","isParserRule","buildElement","buildRules","method","ignoreGuard","keyword","buildKeyword","isAction","actionType","getTypeName","buildAction","buildCrossReference","isRuleCall","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getRule","isTerminalRule","getToken","ErrorWithLocation","$refText","assertUnreachable","buildRuleCall","isAlternatives","methods","predicatedMethod","getGuardCondition","buildAlternatives","isUnorderedGroup","orIdx","idFunc","lParser","stackId","getRuleStack","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","isGroup","buildGroup","isEndOfFile","cardinality","condition","isDisjunction","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","terminalRule","findNameAssignment","assignTerminal","$container","getRuleName","createLangiumParser","prepareLangiumParser","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","interruptAndCheck","_interruptAndCheck","performance","now","Promise","resolve","setImmediate","Deferred","promise","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","update","spans","substr","DocumentState","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","TextDocuments","fileSystemProvider","FileSystemProvider","_fromUri","cancellationToken","_args","readFile","createAsync","model","$model","parseResult","createLangiumDocument","_createAsync","cancelToken","_parseResult3","parseAsync","_x3","_x4","Parsed","textDocumentGetter","createTextDocumentGetter","$document","_update","oldText","t0","_x5","_x6","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","uriString","_getOrCreateDocument","getDocument","fromUri","addDocument","_x7","_x8","fromString","then","langiumDoc","unlink","Changed","precomputedScopes","ref_resolving","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","_link","streamAst","streamReferences","doLink","finish","reference","getCandidate","isLinkingError","_nodeDescription","hasDocument","documentUri","linkedNode","loadAstNode","createLinkingError","getScope","getElement","refNode","refText","$refNode","isAstNode","isAstNodeDescription","findRootNode","refData","getLinkedNode","ComputedScopes","descr","getAstNodePath","$nodeDescription","nodeDescription","getAstNode","targetDescription","referenceType","getReferenceType","UriUtils","DefaultNameProvider","isNamed","findNodeForProperty","basename","Utils","dirname","extname","joinPath","resolvePath","equals","relative","fromPath","toPath","fromParts","split","toParts","repeat","normalize","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","sourceCstNode","findAssignment","nodeElem","isReference","nameNode","getNameNode","isChildNode","findDeclaration","targetNode","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","sourceUri","sourcePath","segment","toDocumentSegment","local","MultiMap","_Symbol$iterator","_step$value","Reduction","sum","_this$map$get","callbackfn","flat","BiMap","inverse","_step2$value","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","_computeExports","computeExportsForNode","_computeExportsForNode","parentNode","_args2","streamContents","exportNode","getName","createDescription","_computeLocalScopes","scopes","_args3","streamAllContents","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","disposable","throwIfDisposed","SimpleCache","_DisposableCache","cache","provider","ContextCache","_DisposableCache2","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","_SimpleCache","sharedServices","DocumentBuilder","onBuildPhase","onUpdate","_changed","deleted","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","nonNullable","allElements","isIntermediateReference","ValidationCategory","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serializeOptions","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserializeOptions","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","_c","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","startsWith","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","$containerProperty","$containerIndex","getRefNode","fragmentIndex","DefaultServiceRegistry","languageIdMap","fileExtensionMap","ext","singleton","diagnosticData","all","DocumentValidator","entriesBefore","entriesAfter","checksRecord","thisObj","category","wrapValidationException","addEntry","handleException","_handleException","functionality","messageContext","messageDetails","getAllSubTypes","checkBefore","wrapPreparationException","checkAfter","_x9","_x10","_x11","DefaultDocumentValidator","validationRegistry","metadata","_validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","t1","t2","validateAst","t3","t4","t5","lexerDiagnostics","lexerDiagnostic","diagnostic","toDiagnosticSeverity","toDiagnosticData","getSource","parserError","linkingError","containerType","toDiagnostic","_validateAst","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","_validateAstBefore","checksBefore","_validateAstNodes","_args5","getChecks","_validateAstAfter","checksAfter","_args6","_x12","_x13","getDiagnosticRange","findNodeForKeyword","LexingWarning","LexingInfo","LexingHint","Disposable","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegment","nameSegmentGetter","selectionSegment","DefaultReferenceDescriptionProvider","_createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","previousValue","currentValue","propertyIndex","arrayIndex","DefaultConfigurationProvider","_ready","settings","workspaceConfig","onConfigurationSectionUpdateEmitter","params","capabilities","configuration","_initialized","languages","configToUpdate","section","lang","toSectionName","fetchConfiguration","conf","updateSectionConfiguration","_getConfiguration","sectionName","ready","_dispose","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","documentPhaseListeners","buildState","documentBuildWaiters","currentState","_build","documents","previousCategories","Validated","IndexedReferences","validationChecks","completed","delegateYield","emitUpdate","buildDocuments","changed","deletedUri","changedUri","newDocument","allChangedUris","rebuildDocuments","deleteDocument","invalidateDocument","toSet","shouldRelink","sortDocuments","Linked","toArray","_emitUpdate","hasTextDocument","changedUris","isAffected","_buildDocuments","toBeValidated","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","computeLocalScopes","link","updateReferences","shouldValidate","_runCancelable","targetState","filtered","targetStateDocs","notifyDocumentPhase","notifyBuildPhase","uriOrToken","buildDisposable","cancelDisposable","_notifyDocumentPhase","listeners","listenersCopy","_x14","_x15","_x16","_notifyBuildPhase","_context9","_x17","_x18","_x19","getBuildOptions","_validate","_callee9","validationSetting","_document$diagnostics","_state$result$validat","_context10","validateDocument","_x20","_x21","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","_updateContent","computeExports","_updateReferences","indexData","ReferenceDescriptionProvider","createDescriptions","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","folders","workspaceFolders","_params","write","initializeWorkspace","_initializeWorkspace","performStartup","build","_performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","_traverseFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","getOrCreateDocument","_workspaceFolder","DefaultLexerErrorMessageProvider","DefaultLexer","LexerErrorMessageProvider","tokenBuilder","buildTokens","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","flushLexingReport","isIMultiModeLexerDefinition","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","skipWhitespace","lastCharacter","tagRegex","tagMatch","fullMatch","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","NEWLINE_REGEXP","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","escapeRegExp","getAllTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","with","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","findCommentNode","multilineCommentRules","DefaultAsyncParser","syncParser","_cancelToken","DefaultWorkspaceLock","previousTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","queue","deferred","performNextOperation","_performNextOperation","shift","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrateLexerReport","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","streamCst","dehydrateCstNode","arr","dehydrateReference","isRootCstNode","getGrammarElementId","isCompositeCstNode","isLeafCstNode","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","_Object$entries2","_Object$entries2$_i","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","getKey","isAbstractElement","DocumentationProvider","isCommentTerminal","isMultilineComment","terminalRegex","nameRegexp","DefaultNameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","Hydrator","WorkspaceManager","ConfigurationProvider","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","injector","proxy","Proxy","deleteProperty","_resolve","_","ownKeys","__requested__","cause","value2","value1","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","GrammarImport","InferredType","isInferredType","isInterface","NamedArgument","Negation","NumberLiteral","ParameterReference","ParserRule","ReferenceType","ReturnType","isReturnType","SimpleType","isSimpleType","StringLiteral","TerminalRule","isType","TypeAttribute","UnionType","Action","Alternatives","Assignment","CharacterRange","isCharacterRange","CrossReference","EndOfFile","NegatedToken","isNegatedToken","RegexToken","isRegexToken","RuleCall","TerminalAlternatives","isTerminalAlternatives","TerminalGroup","isTerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","UntilToken","isUntilToken","Wildcard","isWildcard","LangiumGrammarAstReflection","reachableRules","buildTerminalTokens","buildKeywordTokens","terminalToken","isWhitespace","popDiagnostics","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","distinct","sort","buildKeywordToken","keywordPattern","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","partialMatches","getCrossReferenceTerminal","runConverter","convertInt","convertString","convertID","getRuleType","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","subtypes","allSubtypes","nested","computeIsSubtype","allTypes","getAllTypes","types","possibleSubType","typePredicate","StreamImpl","keyIndex","isAstNodeInRange","DONE_RESULT","TreeStreamImpl","includeRoot","nodeRange","inRange","typeMetaData","getTypeMetaData","genericNode","copyDefaultValue","propertyType","RangeComparison","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","Outside","compareRange","commentNames","getPreviousNode","isCommentNode","findIndex","allTerminals","entryRule","getEntryRule","topMostRules","getHiddenRules","ruleDfs","visitedSet","refRule","nameAssigment","findNodesForPropertyInternal","nodeFeature","findNodesForKeywordInternal","treeIterator","keywordNodes","childNode","prune","startNode","findNameAssignmentInternal","go","refType","childAssignment","typeRef","isDataTypeRuleInternal","visited","inferredType","dataType","returnType","getActionType","u","abstractElementToRegex","flagText","WILDCARD","withCardinality","keywordToRegex","characterRangeToRegex","until","lastSlash","regexFlags","regexpParser","TerminalRegExpVisitor","isStarting","endRegexpStack","startRegexp","escapedChar","regexp","whitespaceCharacters","ws","re","process","tmp","appendRaw","nbChars","appendOptional","partialRegExp","startFn","nextFn","_defineProperty","keyFn","valueFn","entryStream","firstDone","addSeparator","searchElement","_this3$nextFn","initialValue","recursiveReduce","_this5$nextFn","mapped","isIterable","depth","_stream$nextFn","skipCount","maxSize","by","internalState","otherKeySet","ownKey","EMPTY_STREAM","collections","collIndex","arrIndex","_StreamImpl","iterators","pruned","product","EmptyFileSystemProvider","_readDirectory","isSymbol","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","baseClone","objectProto","sources","keysIn","propsIndex","propsLength","eq","findIndexFunc","iterable","createFind","baseFindIndex","hasPath","baseHas","baseMap","baseExtremum","baseLt","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","toFinite","remainder","r","o","h","cwd","isAbsolute","l","_makeLong","format","dir","base","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","m","y","fsPath","C","_formatted","external","_fsPath","_sep","_f","$mid","encodeURIComponent","decodeURIComponent","_unused","P","w","A"],"sourceRoot":""}