{"version":3,"file":"static/js/798.e6e5335d.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/chunk-4BX2VUAB.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/chunk-QZHKN3VN.mjs","../node_modules/mermaid/dist/chunks/mermaid.core/gitGraphDiagram-NY62KEGX.mjs"],"sourcesContent":["import {\n  __name\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n","import {\n  __name\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/utils/imperativeState.ts\nvar ImperativeState = class {\n  /**\n   * @param init - Function that creates the default state.\n   */\n  constructor(init) {\n    this.init = init;\n    this.records = this.init();\n  }\n  static {\n    __name(this, \"ImperativeState\");\n  }\n  reset() {\n    this.records = this.init();\n  }\n};\n\nexport {\n  ImperativeState\n};\n","import {\n  populateCommonDb\n} from \"./chunk-4BX2VUAB.mjs\";\nimport {\n  ImperativeState\n} from \"./chunk-QZHKN3VN.mjs\";\nimport {\n  cleanAndMerge,\n  random,\n  utils_default\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  clear,\n  common_default,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getConfig2,\n  getDiagramTitle,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle,\n  setupGraphViewbox2 as setupGraphViewbox\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/git/gitGraphParser.ts\nimport { parse } from \"@mermaid-js/parser\";\n\n// src/diagrams/git/gitGraphTypes.ts\nvar commitType = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\n\n// src/diagrams/git/gitGraphAst.ts\nvar DEFAULT_GITGRAPH_CONFIG = defaultConfig_default.gitGraph;\nvar getConfig3 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_GITGRAPH_CONFIG,\n    ...getConfig().gitGraph\n  });\n  return config;\n}, \"getConfig\");\nvar state = new ImperativeState(() => {\n  const config = getConfig3();\n  const mainBranchName = config.mainBranchName;\n  const mainBranchOrder = config.mainBranchOrder;\n  return {\n    mainBranchName,\n    commits: /* @__PURE__ */ new Map(),\n    head: null,\n    branchConfig: /* @__PURE__ */ new Map([[mainBranchName, { name: mainBranchName, order: mainBranchOrder }]]),\n    branches: /* @__PURE__ */ new Map([[mainBranchName, null]]),\n    currBranch: mainBranchName,\n    direction: \"LR\",\n    seq: 0,\n    options: {}\n  };\n});\nfunction getID() {\n  return random({ length: 7 });\n}\n__name(getID, \"getID\");\nfunction uniqBy(list, fn) {\n  const recordMap = /* @__PURE__ */ Object.create(null);\n  return list.reduce((out, item) => {\n    const key = fn(item);\n    if (!recordMap[key]) {\n      recordMap[key] = true;\n      out.push(item);\n    }\n    return out;\n  }, []);\n}\n__name(uniqBy, \"uniqBy\");\nvar setDirection = /* @__PURE__ */ __name(function(dir2) {\n  state.records.direction = dir2;\n}, \"setDirection\");\nvar setOptions = /* @__PURE__ */ __name(function(rawOptString) {\n  log.debug(\"options str\", rawOptString);\n  rawOptString = rawOptString?.trim();\n  rawOptString = rawOptString || \"{}\";\n  try {\n    state.records.options = JSON.parse(rawOptString);\n  } catch (e) {\n    log.error(\"error while parsing gitGraph options\", e.message);\n  }\n}, \"setOptions\");\nvar getOptions = /* @__PURE__ */ __name(function() {\n  return state.records.options;\n}, \"getOptions\");\nvar commit = /* @__PURE__ */ __name(function(commitDB) {\n  let msg = commitDB.msg;\n  let id = commitDB.id;\n  const type = commitDB.type;\n  let tags = commitDB.tags;\n  log.info(\"commit\", msg, id, type, tags);\n  log.debug(\"Entering commit:\", msg, id, type, tags);\n  const config = getConfig3();\n  id = common_default.sanitizeText(id, config);\n  msg = common_default.sanitizeText(msg, config);\n  tags = tags?.map((tag) => common_default.sanitizeText(tag, config));\n  const newCommit = {\n    id: id ? id : state.records.seq + \"-\" + getID(),\n    message: msg,\n    seq: state.records.seq++,\n    type: type ?? commitType.NORMAL,\n    tags: tags ?? [],\n    parents: state.records.head == null ? [] : [state.records.head.id],\n    branch: state.records.currBranch\n  };\n  state.records.head = newCommit;\n  log.info(\"main branch\", config.mainBranchName);\n  if (state.records.commits.has(newCommit.id)) {\n    log.warn(`Commit ID ${newCommit.id} already exists`);\n  }\n  state.records.commits.set(newCommit.id, newCommit);\n  state.records.branches.set(state.records.currBranch, newCommit.id);\n  log.debug(\"in pushCommit \" + newCommit.id);\n}, \"commit\");\nvar branch = /* @__PURE__ */ __name(function(branchDB) {\n  let name = branchDB.name;\n  const order = branchDB.order;\n  name = common_default.sanitizeText(name, getConfig3());\n  if (state.records.branches.has(name)) {\n    throw new Error(\n      `Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using \"checkout ${name}\")`\n    );\n  }\n  state.records.branches.set(name, state.records.head != null ? state.records.head.id : null);\n  state.records.branchConfig.set(name, { name, order });\n  checkout(name);\n  log.debug(\"in createBranch\");\n}, \"branch\");\nvar merge = /* @__PURE__ */ __name((mergeDB) => {\n  let otherBranch = mergeDB.branch;\n  let customId = mergeDB.id;\n  const overrideType = mergeDB.type;\n  const customTags = mergeDB.tags;\n  const config = getConfig3();\n  otherBranch = common_default.sanitizeText(otherBranch, config);\n  if (customId) {\n    customId = common_default.sanitizeText(customId, config);\n  }\n  const currentBranchCheck = state.records.branches.get(state.records.currBranch);\n  const otherBranchCheck = state.records.branches.get(otherBranch);\n  const currentCommit = currentBranchCheck ? state.records.commits.get(currentBranchCheck) : void 0;\n  const otherCommit = otherBranchCheck ? state.records.commits.get(otherBranchCheck) : void 0;\n  if (currentCommit && otherCommit && currentCommit.branch === otherBranch) {\n    throw new Error(`Cannot merge branch '${otherBranch}' into itself.`);\n  }\n  if (state.records.currBranch === otherBranch) {\n    const error = new Error('Incorrect usage of \"merge\". Cannot merge a branch to itself');\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  }\n  if (currentCommit === void 0 || !currentCommit) {\n    const error = new Error(\n      `Incorrect usage of \"merge\". Current branch (${state.records.currBranch})has no commits`\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"commit\"]\n    };\n    throw error;\n  }\n  if (!state.records.branches.has(otherBranch)) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") does not exist\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [`branch ${otherBranch}`]\n    };\n    throw error;\n  }\n  if (otherCommit === void 0 || !otherCommit) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") has no commits\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: ['\"commit\"']\n    };\n    throw error;\n  }\n  if (currentCommit === otherCommit) {\n    const error = new Error('Incorrect usage of \"merge\". Both branches have same head');\n    error.hash = {\n      text: `merge ${otherBranch}`,\n      token: `merge ${otherBranch}`,\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  }\n  if (customId && state.records.commits.has(customId)) {\n    const error = new Error(\n      'Incorrect usage of \"merge\". Commit with id:' + customId + \" already exists, use different custom id\"\n    );\n    error.hash = {\n      text: `merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(\" \")}`,\n      token: `merge ${otherBranch} ${customId} ${overrideType} ${customTags?.join(\" \")}`,\n      expected: [\n        `merge ${otherBranch} ${customId}_UNIQUE ${overrideType} ${customTags?.join(\" \")}`\n      ]\n    };\n    throw error;\n  }\n  const verifiedBranch = otherBranchCheck ? otherBranchCheck : \"\";\n  const commit2 = {\n    id: customId || `${state.records.seq}-${getID()}`,\n    message: `merged branch ${otherBranch} into ${state.records.currBranch}`,\n    seq: state.records.seq++,\n    parents: state.records.head == null ? [] : [state.records.head.id, verifiedBranch],\n    branch: state.records.currBranch,\n    type: commitType.MERGE,\n    customType: overrideType,\n    customId: customId ? true : false,\n    tags: customTags ?? []\n  };\n  state.records.head = commit2;\n  state.records.commits.set(commit2.id, commit2);\n  state.records.branches.set(state.records.currBranch, commit2.id);\n  log.debug(state.records.branches);\n  log.debug(\"in mergeBranch\");\n}, \"merge\");\nvar cherryPick = /* @__PURE__ */ __name(function(cherryPickDB) {\n  let sourceId = cherryPickDB.id;\n  let targetId = cherryPickDB.targetId;\n  let tags = cherryPickDB.tags;\n  let parentCommitId = cherryPickDB.parent;\n  log.debug(\"Entering cherryPick:\", sourceId, targetId, tags);\n  const config = getConfig3();\n  sourceId = common_default.sanitizeText(sourceId, config);\n  targetId = common_default.sanitizeText(targetId, config);\n  tags = tags?.map((tag) => common_default.sanitizeText(tag, config));\n  parentCommitId = common_default.sanitizeText(parentCommitId, config);\n  if (!sourceId || !state.records.commits.has(sourceId)) {\n    const error = new Error(\n      'Incorrect usage of \"cherryPick\". Source commit id should exist and provided'\n    );\n    error.hash = {\n      text: `cherryPick ${sourceId} ${targetId}`,\n      token: `cherryPick ${sourceId} ${targetId}`,\n      expected: [\"cherry-pick abc\"]\n    };\n    throw error;\n  }\n  const sourceCommit = state.records.commits.get(sourceId);\n  if (sourceCommit === void 0 || !sourceCommit) {\n    throw new Error('Incorrect usage of \"cherryPick\". Source commit id should exist and provided');\n  }\n  if (parentCommitId && !(Array.isArray(sourceCommit.parents) && sourceCommit.parents.includes(parentCommitId))) {\n    const error = new Error(\n      \"Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.\"\n    );\n    throw error;\n  }\n  const sourceCommitBranch = sourceCommit.branch;\n  if (sourceCommit.type === commitType.MERGE && !parentCommitId) {\n    const error = new Error(\n      \"Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.\"\n    );\n    throw error;\n  }\n  if (!targetId || !state.records.commits.has(targetId)) {\n    if (sourceCommitBranch === state.records.currBranch) {\n      const error = new Error(\n        'Incorrect usage of \"cherryPick\". Source commit is already on current branch'\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const currentCommitId = state.records.branches.get(state.records.currBranch);\n    if (currentCommitId === void 0 || !currentCommitId) {\n      const error = new Error(\n        `Incorrect usage of \"cherry-pick\". Current branch (${state.records.currBranch})has no commits`\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const currentCommit = state.records.commits.get(currentCommitId);\n    if (currentCommit === void 0 || !currentCommit) {\n      const error = new Error(\n        `Incorrect usage of \"cherry-pick\". Current branch (${state.records.currBranch})has no commits`\n      );\n      error.hash = {\n        text: `cherryPick ${sourceId} ${targetId}`,\n        token: `cherryPick ${sourceId} ${targetId}`,\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const commit2 = {\n      id: state.records.seq + \"-\" + getID(),\n      message: `cherry-picked ${sourceCommit?.message} into ${state.records.currBranch}`,\n      seq: state.records.seq++,\n      parents: state.records.head == null ? [] : [state.records.head.id, sourceCommit.id],\n      branch: state.records.currBranch,\n      type: commitType.CHERRY_PICK,\n      tags: tags ? tags.filter(Boolean) : [\n        `cherry-pick:${sourceCommit.id}${sourceCommit.type === commitType.MERGE ? `|parent:${parentCommitId}` : \"\"}`\n      ]\n    };\n    state.records.head = commit2;\n    state.records.commits.set(commit2.id, commit2);\n    state.records.branches.set(state.records.currBranch, commit2.id);\n    log.debug(state.records.branches);\n    log.debug(\"in cherryPick\");\n  }\n}, \"cherryPick\");\nvar checkout = /* @__PURE__ */ __name(function(branch2) {\n  branch2 = common_default.sanitizeText(branch2, getConfig3());\n  if (!state.records.branches.has(branch2)) {\n    const error = new Error(\n      `Trying to checkout branch which is not yet created. (Help try using \"branch ${branch2}\")`\n    );\n    error.hash = {\n      text: `checkout ${branch2}`,\n      token: `checkout ${branch2}`,\n      expected: [`branch ${branch2}`]\n    };\n    throw error;\n  } else {\n    state.records.currBranch = branch2;\n    const id = state.records.branches.get(state.records.currBranch);\n    if (id === void 0 || !id) {\n      state.records.head = null;\n    } else {\n      state.records.head = state.records.commits.get(id) ?? null;\n    }\n  }\n}, \"checkout\");\nfunction upsert(arr, key, newVal) {\n  const index = arr.indexOf(key);\n  if (index === -1) {\n    arr.push(newVal);\n  } else {\n    arr.splice(index, 1, newVal);\n  }\n}\n__name(upsert, \"upsert\");\nfunction prettyPrintCommitHistory(commitArr) {\n  const commit2 = commitArr.reduce((out, commit3) => {\n    if (out.seq > commit3.seq) {\n      return out;\n    }\n    return commit3;\n  }, commitArr[0]);\n  let line = \"\";\n  commitArr.forEach(function(c) {\n    if (c === commit2) {\n      line += \"\t*\";\n    } else {\n      line += \"\t|\";\n    }\n  });\n  const label = [line, commit2.id, commit2.seq];\n  for (const branch2 in state.records.branches) {\n    if (state.records.branches.get(branch2) === commit2.id) {\n      label.push(branch2);\n    }\n  }\n  log.debug(label.join(\" \"));\n  if (commit2.parents && commit2.parents.length == 2 && commit2.parents[0] && commit2.parents[1]) {\n    const newCommit = state.records.commits.get(commit2.parents[0]);\n    upsert(commitArr, commit2, newCommit);\n    if (commit2.parents[1]) {\n      commitArr.push(state.records.commits.get(commit2.parents[1]));\n    }\n  } else if (commit2.parents.length == 0) {\n    return;\n  } else {\n    if (commit2.parents[0]) {\n      const newCommit = state.records.commits.get(commit2.parents[0]);\n      upsert(commitArr, commit2, newCommit);\n    }\n  }\n  commitArr = uniqBy(commitArr, (c) => c.id);\n  prettyPrintCommitHistory(commitArr);\n}\n__name(prettyPrintCommitHistory, \"prettyPrintCommitHistory\");\nvar prettyPrint = /* @__PURE__ */ __name(function() {\n  log.debug(state.records.commits);\n  const node = getCommitsArray()[0];\n  prettyPrintCommitHistory([node]);\n}, \"prettyPrint\");\nvar clear2 = /* @__PURE__ */ __name(function() {\n  state.reset();\n  clear();\n}, \"clear\");\nvar getBranchesAsObjArray = /* @__PURE__ */ __name(function() {\n  const branchesArray = [...state.records.branchConfig.values()].map((branchConfig, i) => {\n    if (branchConfig.order !== null && branchConfig.order !== void 0) {\n      return branchConfig;\n    }\n    return {\n      ...branchConfig,\n      order: parseFloat(`0.${i}`)\n    };\n  }).sort((a, b) => (a.order ?? 0) - (b.order ?? 0)).map(({ name }) => ({ name }));\n  return branchesArray;\n}, \"getBranchesAsObjArray\");\nvar getBranches = /* @__PURE__ */ __name(function() {\n  return state.records.branches;\n}, \"getBranches\");\nvar getCommits = /* @__PURE__ */ __name(function() {\n  return state.records.commits;\n}, \"getCommits\");\nvar getCommitsArray = /* @__PURE__ */ __name(function() {\n  const commitArr = [...state.records.commits.values()];\n  commitArr.forEach(function(o) {\n    log.debug(o.id);\n  });\n  commitArr.sort((a, b) => a.seq - b.seq);\n  return commitArr;\n}, \"getCommitsArray\");\nvar getCurrentBranch = /* @__PURE__ */ __name(function() {\n  return state.records.currBranch;\n}, \"getCurrentBranch\");\nvar getDirection = /* @__PURE__ */ __name(function() {\n  return state.records.direction;\n}, \"getDirection\");\nvar getHead = /* @__PURE__ */ __name(function() {\n  return state.records.head;\n}, \"getHead\");\nvar db = {\n  commitType,\n  getConfig: getConfig3,\n  setDirection,\n  setOptions,\n  getOptions,\n  commit,\n  branch,\n  merge,\n  cherryPick,\n  checkout,\n  //reset,\n  prettyPrint,\n  clear: clear2,\n  getBranchesAsObjArray,\n  getBranches,\n  getCommits,\n  getCommitsArray,\n  getCurrentBranch,\n  getDirection,\n  getHead,\n  setAccTitle,\n  getAccTitle,\n  getAccDescription,\n  setAccDescription,\n  setDiagramTitle,\n  getDiagramTitle\n};\n\n// src/diagrams/git/gitGraphParser.ts\nvar populate = /* @__PURE__ */ __name((ast, db2) => {\n  populateCommonDb(ast, db2);\n  if (ast.dir) {\n    db2.setDirection(ast.dir);\n  }\n  for (const statement of ast.statements) {\n    parseStatement(statement, db2);\n  }\n}, \"populate\");\nvar parseStatement = /* @__PURE__ */ __name((statement, db2) => {\n  const parsers = {\n    Commit: /* @__PURE__ */ __name((stmt) => db2.commit(parseCommit(stmt)), \"Commit\"),\n    Branch: /* @__PURE__ */ __name((stmt) => db2.branch(parseBranch(stmt)), \"Branch\"),\n    Merge: /* @__PURE__ */ __name((stmt) => db2.merge(parseMerge(stmt)), \"Merge\"),\n    Checkout: /* @__PURE__ */ __name((stmt) => db2.checkout(parseCheckout(stmt)), \"Checkout\"),\n    CherryPicking: /* @__PURE__ */ __name((stmt) => db2.cherryPick(parseCherryPicking(stmt)), \"CherryPicking\")\n  };\n  const parser2 = parsers[statement.$type];\n  if (parser2) {\n    parser2(statement);\n  } else {\n    log.error(`Unknown statement type: ${statement.$type}`);\n  }\n}, \"parseStatement\");\nvar parseCommit = /* @__PURE__ */ __name((commit2) => {\n  const commitDB = {\n    id: commit2.id,\n    msg: commit2.message ?? \"\",\n    type: commit2.type !== void 0 ? commitType[commit2.type] : commitType.NORMAL,\n    tags: commit2.tags ?? void 0\n  };\n  return commitDB;\n}, \"parseCommit\");\nvar parseBranch = /* @__PURE__ */ __name((branch2) => {\n  const branchDB = {\n    name: branch2.name,\n    order: branch2.order ?? 0\n  };\n  return branchDB;\n}, \"parseBranch\");\nvar parseMerge = /* @__PURE__ */ __name((merge2) => {\n  const mergeDB = {\n    branch: merge2.branch,\n    id: merge2.id ?? \"\",\n    type: merge2.type !== void 0 ? commitType[merge2.type] : void 0,\n    tags: merge2.tags ?? void 0\n  };\n  return mergeDB;\n}, \"parseMerge\");\nvar parseCheckout = /* @__PURE__ */ __name((checkout2) => {\n  const branch2 = checkout2.branch;\n  return branch2;\n}, \"parseCheckout\");\nvar parseCherryPicking = /* @__PURE__ */ __name((cherryPicking) => {\n  const cherryPickDB = {\n    id: cherryPicking.id,\n    targetId: \"\",\n    tags: cherryPicking.tags?.length === 0 ? void 0 : cherryPicking.tags,\n    parent: cherryPicking.parent\n  };\n  return cherryPickDB;\n}, \"parseCherryPicking\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"gitGraph\", input);\n    log.debug(ast);\n    populate(ast, db);\n  }, \"parse\")\n};\nif (void 0) {\n  const { it, expect, describe } = void 0;\n  const mockDB = {\n    commitType,\n    setDirection: vi.fn(),\n    commit: vi.fn(),\n    branch: vi.fn(),\n    merge: vi.fn(),\n    cherryPick: vi.fn(),\n    checkout: vi.fn()\n  };\n  describe(\"GitGraph Parser\", () => {\n    it(\"should parse a commit statement\", () => {\n      const commit2 = {\n        $type: \"Commit\",\n        id: \"1\",\n        message: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: \"NORMAL\"\n      };\n      parseStatement(commit2, mockDB);\n      expect(mockDB.commit).toHaveBeenCalledWith({\n        id: \"1\",\n        msg: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n    });\n    it(\"should parse a branch statement\", () => {\n      const branch2 = {\n        $type: \"Branch\",\n        name: \"newBranch\",\n        order: 1\n      };\n      parseStatement(branch2, mockDB);\n      expect(mockDB.branch).toHaveBeenCalledWith({ name: \"newBranch\", order: 1 });\n    });\n    it(\"should parse a checkout statement\", () => {\n      const checkout2 = {\n        $type: \"Checkout\",\n        branch: \"newBranch\"\n      };\n      parseStatement(checkout2, mockDB);\n      expect(mockDB.checkout).toHaveBeenCalledWith(\"newBranch\");\n    });\n    it(\"should parse a merge statement\", () => {\n      const merge2 = {\n        $type: \"Merge\",\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: \"NORMAL\"\n      };\n      parseStatement(merge2, mockDB);\n      expect(mockDB.merge).toHaveBeenCalledWith({\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n    });\n    it(\"should parse a cherry picking statement\", () => {\n      const cherryPick2 = {\n        $type: \"CherryPicking\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        parent: \"2\"\n      };\n      parseStatement(cherryPick2, mockDB);\n      expect(mockDB.cherryPick).toHaveBeenCalledWith({\n        id: \"1\",\n        targetId: \"\",\n        parent: \"2\",\n        tags: [\"tag1\", \"tag2\"]\n      });\n    });\n    it(\"should parse a langium generated gitGraph ast\", () => {\n      const dummy = {\n        $type: \"GitGraph\",\n        statements: []\n      };\n      const gitGraphAst = {\n        $type: \"GitGraph\",\n        statements: [\n          {\n            $container: dummy,\n            $type: \"Commit\",\n            id: \"1\",\n            message: \"test\",\n            tags: [\"tag1\", \"tag2\"],\n            type: \"NORMAL\"\n          },\n          {\n            $container: dummy,\n            $type: \"Branch\",\n            name: \"newBranch\",\n            order: 1\n          },\n          {\n            $container: dummy,\n            $type: \"Merge\",\n            branch: \"newBranch\",\n            id: \"1\",\n            tags: [\"tag1\", \"tag2\"],\n            type: \"NORMAL\"\n          },\n          {\n            $container: dummy,\n            $type: \"Checkout\",\n            branch: \"newBranch\"\n          },\n          {\n            $container: dummy,\n            $type: \"CherryPicking\",\n            id: \"1\",\n            tags: [\"tag1\", \"tag2\"],\n            parent: \"2\"\n          }\n        ]\n      };\n      populate(gitGraphAst, mockDB);\n      expect(mockDB.commit).toHaveBeenCalledWith({\n        id: \"1\",\n        msg: \"test\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n      expect(mockDB.branch).toHaveBeenCalledWith({ name: \"newBranch\", order: 1 });\n      expect(mockDB.merge).toHaveBeenCalledWith({\n        branch: \"newBranch\",\n        id: \"1\",\n        tags: [\"tag1\", \"tag2\"],\n        type: 0\n      });\n      expect(mockDB.checkout).toHaveBeenCalledWith(\"newBranch\");\n    });\n  });\n}\n\n// src/diagrams/git/gitGraphRenderer.ts\nimport { select } from \"d3\";\nvar DEFAULT_CONFIG = getConfig2();\nvar DEFAULT_GITGRAPH_CONFIG2 = DEFAULT_CONFIG?.gitGraph;\nvar LAYOUT_OFFSET = 10;\nvar COMMIT_STEP = 40;\nvar PX = 4;\nvar PY = 2;\nvar THEME_COLOR_LIMIT = 8;\nvar branchPos = /* @__PURE__ */ new Map();\nvar commitPos = /* @__PURE__ */ new Map();\nvar defaultPos = 30;\nvar allCommitsDict = /* @__PURE__ */ new Map();\nvar lanes = [];\nvar maxPos = 0;\nvar dir = \"LR\";\nvar clear3 = /* @__PURE__ */ __name(() => {\n  branchPos.clear();\n  commitPos.clear();\n  allCommitsDict.clear();\n  maxPos = 0;\n  lanes = [];\n  dir = \"LR\";\n}, \"clear\");\nvar drawText = /* @__PURE__ */ __name((txt) => {\n  const svgLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  const rows = typeof txt === \"string\" ? txt.split(/\\\\n|\\n|<br\\s*\\/?>/gi) : txt;\n  rows.forEach((row) => {\n    const tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n    tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n    tspan.setAttribute(\"dy\", \"1em\");\n    tspan.setAttribute(\"x\", \"0\");\n    tspan.setAttribute(\"class\", \"row\");\n    tspan.textContent = row.trim();\n    svgLabel.appendChild(tspan);\n  });\n  return svgLabel;\n}, \"drawText\");\nvar findClosestParent = /* @__PURE__ */ __name((parents) => {\n  let closestParent;\n  let comparisonFunc;\n  let targetPosition;\n  if (dir === \"BT\") {\n    comparisonFunc = /* @__PURE__ */ __name((a, b) => a <= b, \"comparisonFunc\");\n    targetPosition = Infinity;\n  } else {\n    comparisonFunc = /* @__PURE__ */ __name((a, b) => a >= b, \"comparisonFunc\");\n    targetPosition = 0;\n  }\n  parents.forEach((parent) => {\n    const parentPosition = dir === \"TB\" || dir == \"BT\" ? commitPos.get(parent)?.y : commitPos.get(parent)?.x;\n    if (parentPosition !== void 0 && comparisonFunc(parentPosition, targetPosition)) {\n      closestParent = parent;\n      targetPosition = parentPosition;\n    }\n  });\n  return closestParent;\n}, \"findClosestParent\");\nvar findClosestParentBT = /* @__PURE__ */ __name((parents) => {\n  let closestParent = \"\";\n  let maxPosition = Infinity;\n  parents.forEach((parent) => {\n    const parentPosition = commitPos.get(parent).y;\n    if (parentPosition <= maxPosition) {\n      closestParent = parent;\n      maxPosition = parentPosition;\n    }\n  });\n  return closestParent || void 0;\n}, \"findClosestParentBT\");\nvar setParallelBTPos = /* @__PURE__ */ __name((sortedKeys, commits, defaultPos2) => {\n  let curPos = defaultPos2;\n  let maxPosition = defaultPos2;\n  const roots = [];\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (!commit2) {\n      throw new Error(`Commit not found for key ${key}`);\n    }\n    if (commit2.parents.length) {\n      curPos = calculateCommitPosition(commit2);\n      maxPosition = Math.max(curPos, maxPosition);\n    } else {\n      roots.push(commit2);\n    }\n    setCommitPosition(commit2, curPos);\n  });\n  curPos = maxPosition;\n  roots.forEach((commit2) => {\n    setRootPosition(commit2, curPos, defaultPos2);\n  });\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (commit2?.parents.length) {\n      const closestParent = findClosestParentBT(commit2.parents);\n      curPos = commitPos.get(closestParent).y - COMMIT_STEP;\n      if (curPos <= maxPosition) {\n        maxPosition = curPos;\n      }\n      const x = branchPos.get(commit2.branch).pos;\n      const y = curPos - LAYOUT_OFFSET;\n      commitPos.set(commit2.id, { x, y });\n    }\n  });\n}, \"setParallelBTPos\");\nvar findClosestParentPos = /* @__PURE__ */ __name((commit2) => {\n  const closestParent = findClosestParent(commit2.parents.filter((p) => p !== null));\n  if (!closestParent) {\n    throw new Error(`Closest parent not found for commit ${commit2.id}`);\n  }\n  const closestParentPos = commitPos.get(closestParent)?.y;\n  if (closestParentPos === void 0) {\n    throw new Error(`Closest parent position not found for commit ${commit2.id}`);\n  }\n  return closestParentPos;\n}, \"findClosestParentPos\");\nvar calculateCommitPosition = /* @__PURE__ */ __name((commit2) => {\n  const closestParentPos = findClosestParentPos(commit2);\n  return closestParentPos + COMMIT_STEP;\n}, \"calculateCommitPosition\");\nvar setCommitPosition = /* @__PURE__ */ __name((commit2, curPos) => {\n  const branch2 = branchPos.get(commit2.branch);\n  if (!branch2) {\n    throw new Error(`Branch not found for commit ${commit2.id}`);\n  }\n  const x = branch2.pos;\n  const y = curPos + LAYOUT_OFFSET;\n  commitPos.set(commit2.id, { x, y });\n  return { x, y };\n}, \"setCommitPosition\");\nvar setRootPosition = /* @__PURE__ */ __name((commit2, curPos, defaultPos2) => {\n  const branch2 = branchPos.get(commit2.branch);\n  if (!branch2) {\n    throw new Error(`Branch not found for commit ${commit2.id}`);\n  }\n  const y = curPos + defaultPos2;\n  const x = branch2.pos;\n  commitPos.set(commit2.id, { x, y });\n}, \"setRootPosition\");\nvar drawCommitBullet = /* @__PURE__ */ __name((gBullets, commit2, commitPosition, typeClass, branchIndex, commitSymbolType) => {\n  if (commitSymbolType === commitType.HIGHLIGHT) {\n    gBullets.append(\"rect\").attr(\"x\", commitPosition.x - 10).attr(\"y\", commitPosition.y - 10).attr(\"width\", 20).attr(\"height\", 20).attr(\n      \"class\",\n      `commit ${commit2.id} commit-highlight${branchIndex % THEME_COLOR_LIMIT} ${typeClass}-outer`\n    );\n    gBullets.append(\"rect\").attr(\"x\", commitPosition.x - 6).attr(\"y\", commitPosition.y - 6).attr(\"width\", 12).attr(\"height\", 12).attr(\n      \"class\",\n      `commit ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT} ${typeClass}-inner`\n    );\n  } else if (commitSymbolType === commitType.CHERRY_PICK) {\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x).attr(\"cy\", commitPosition.y).attr(\"r\", 10).attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x - 3).attr(\"cy\", commitPosition.y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"circle\").attr(\"cx\", commitPosition.x + 3).attr(\"cy\", commitPosition.y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"line\").attr(\"x1\", commitPosition.x + 3).attr(\"y1\", commitPosition.y + 1).attr(\"x2\", commitPosition.x).attr(\"y2\", commitPosition.y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n    gBullets.append(\"line\").attr(\"x1\", commitPosition.x - 3).attr(\"y1\", commitPosition.y + 1).attr(\"x2\", commitPosition.x).attr(\"y2\", commitPosition.y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n  } else {\n    const circle = gBullets.append(\"circle\");\n    circle.attr(\"cx\", commitPosition.x);\n    circle.attr(\"cy\", commitPosition.y);\n    circle.attr(\"r\", commit2.type === commitType.MERGE ? 9 : 10);\n    circle.attr(\"class\", `commit ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`);\n    if (commitSymbolType === commitType.MERGE) {\n      const circle2 = gBullets.append(\"circle\");\n      circle2.attr(\"cx\", commitPosition.x);\n      circle2.attr(\"cy\", commitPosition.y);\n      circle2.attr(\"r\", 6);\n      circle2.attr(\n        \"class\",\n        `commit ${typeClass} ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`\n      );\n    }\n    if (commitSymbolType === commitType.REVERSE) {\n      const cross = gBullets.append(\"path\");\n      cross.attr(\n        \"d\",\n        `M ${commitPosition.x - 5},${commitPosition.y - 5}L${commitPosition.x + 5},${commitPosition.y + 5}M${commitPosition.x - 5},${commitPosition.y + 5}L${commitPosition.x + 5},${commitPosition.y - 5}`\n      ).attr(\"class\", `commit ${typeClass} ${commit2.id} commit${branchIndex % THEME_COLOR_LIMIT}`);\n    }\n  }\n}, \"drawCommitBullet\");\nvar drawCommitLabel = /* @__PURE__ */ __name((gLabels, commit2, commitPosition, pos) => {\n  if (commit2.type !== commitType.CHERRY_PICK && (commit2.customId && commit2.type === commitType.MERGE || commit2.type !== commitType.MERGE) && DEFAULT_GITGRAPH_CONFIG2?.showCommitLabel) {\n    const wrapper = gLabels.append(\"g\");\n    const labelBkg = wrapper.insert(\"rect\").attr(\"class\", \"commit-label-bkg\");\n    const text = wrapper.append(\"text\").attr(\"x\", pos).attr(\"y\", commitPosition.y + 25).attr(\"class\", \"commit-label\").text(commit2.id);\n    const bbox = text.node()?.getBBox();\n    if (bbox) {\n      labelBkg.attr(\"x\", commitPosition.posWithOffset - bbox.width / 2 - PY).attr(\"y\", commitPosition.y + 13.5).attr(\"width\", bbox.width + 2 * PY).attr(\"height\", bbox.height + 2 * PY);\n      if (dir === \"TB\" || dir === \"BT\") {\n        labelBkg.attr(\"x\", commitPosition.x - (bbox.width + 4 * PX + 5)).attr(\"y\", commitPosition.y - 12);\n        text.attr(\"x\", commitPosition.x - (bbox.width + 4 * PX)).attr(\"y\", commitPosition.y + bbox.height - 12);\n      } else {\n        text.attr(\"x\", commitPosition.posWithOffset - bbox.width / 2);\n      }\n      if (DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel) {\n        if (dir === \"TB\" || dir === \"BT\") {\n          text.attr(\n            \"transform\",\n            \"rotate(-45, \" + commitPosition.x + \", \" + commitPosition.y + \")\"\n          );\n          labelBkg.attr(\n            \"transform\",\n            \"rotate(-45, \" + commitPosition.x + \", \" + commitPosition.y + \")\"\n          );\n        } else {\n          const r_x = -7.5 - (bbox.width + 10) / 25 * 9.5;\n          const r_y = 10 + bbox.width / 25 * 8.5;\n          wrapper.attr(\n            \"transform\",\n            \"translate(\" + r_x + \", \" + r_y + \") rotate(-45, \" + pos + \", \" + commitPosition.y + \")\"\n          );\n        }\n      }\n    }\n  }\n}, \"drawCommitLabel\");\nvar drawCommitTags = /* @__PURE__ */ __name((gLabels, commit2, commitPosition, pos) => {\n  if (commit2.tags.length > 0) {\n    let yOffset = 0;\n    let maxTagBboxWidth = 0;\n    let maxTagBboxHeight = 0;\n    const tagElements = [];\n    for (const tagValue of commit2.tags.reverse()) {\n      const rect = gLabels.insert(\"polygon\");\n      const hole = gLabels.append(\"circle\");\n      const tag = gLabels.append(\"text\").attr(\"y\", commitPosition.y - 16 - yOffset).attr(\"class\", \"tag-label\").text(tagValue);\n      const tagBbox = tag.node()?.getBBox();\n      if (!tagBbox) {\n        throw new Error(\"Tag bbox not found\");\n      }\n      maxTagBboxWidth = Math.max(maxTagBboxWidth, tagBbox.width);\n      maxTagBboxHeight = Math.max(maxTagBboxHeight, tagBbox.height);\n      tag.attr(\"x\", commitPosition.posWithOffset - tagBbox.width / 2);\n      tagElements.push({\n        tag,\n        hole,\n        rect,\n        yOffset\n      });\n      yOffset += 20;\n    }\n    for (const { tag, hole, rect, yOffset: yOffset2 } of tagElements) {\n      const h2 = maxTagBboxHeight / 2;\n      const ly = commitPosition.y - 19.2 - yOffset2;\n      rect.attr(\"class\", \"tag-label-bkg\").attr(\n        \"points\",\n        `\n      ${pos - maxTagBboxWidth / 2 - PX / 2},${ly + PY}  \n      ${pos - maxTagBboxWidth / 2 - PX / 2},${ly - PY}\n      ${commitPosition.posWithOffset - maxTagBboxWidth / 2 - PX},${ly - h2 - PY}\n      ${commitPosition.posWithOffset + maxTagBboxWidth / 2 + PX},${ly - h2 - PY}\n      ${commitPosition.posWithOffset + maxTagBboxWidth / 2 + PX},${ly + h2 + PY}\n      ${commitPosition.posWithOffset - maxTagBboxWidth / 2 - PX},${ly + h2 + PY}`\n      );\n      hole.attr(\"cy\", ly).attr(\"cx\", pos - maxTagBboxWidth / 2 + PX / 2).attr(\"r\", 1.5).attr(\"class\", \"tag-hole\");\n      if (dir === \"TB\" || dir === \"BT\") {\n        const yOrigin = pos + yOffset2;\n        rect.attr(\"class\", \"tag-label-bkg\").attr(\n          \"points\",\n          `\n        ${commitPosition.x},${yOrigin + 2}\n        ${commitPosition.x},${yOrigin - 2}\n        ${commitPosition.x + LAYOUT_OFFSET},${yOrigin - h2 - 2}\n        ${commitPosition.x + LAYOUT_OFFSET + maxTagBboxWidth + 4},${yOrigin - h2 - 2}\n        ${commitPosition.x + LAYOUT_OFFSET + maxTagBboxWidth + 4},${yOrigin + h2 + 2}\n        ${commitPosition.x + LAYOUT_OFFSET},${yOrigin + h2 + 2}`\n        ).attr(\"transform\", \"translate(12,12) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n        hole.attr(\"cx\", commitPosition.x + PX / 2).attr(\"cy\", yOrigin).attr(\"transform\", \"translate(12,12) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n        tag.attr(\"x\", commitPosition.x + 5).attr(\"y\", yOrigin + 3).attr(\"transform\", \"translate(14,14) rotate(45, \" + commitPosition.x + \",\" + pos + \")\");\n      }\n    }\n  }\n}, \"drawCommitTags\");\nvar getCommitClassType = /* @__PURE__ */ __name((commit2) => {\n  const commitSymbolType = commit2.customType ?? commit2.type;\n  switch (commitSymbolType) {\n    case commitType.NORMAL:\n      return \"commit-normal\";\n    case commitType.REVERSE:\n      return \"commit-reverse\";\n    case commitType.HIGHLIGHT:\n      return \"commit-highlight\";\n    case commitType.MERGE:\n      return \"commit-merge\";\n    case commitType.CHERRY_PICK:\n      return \"commit-cherry-pick\";\n    default:\n      return \"commit-normal\";\n  }\n}, \"getCommitClassType\");\nvar calculatePosition = /* @__PURE__ */ __name((commit2, dir2, pos, commitPos2) => {\n  const defaultCommitPosition = { x: 0, y: 0 };\n  if (commit2.parents.length > 0) {\n    const closestParent = findClosestParent(commit2.parents);\n    if (closestParent) {\n      const parentPosition = commitPos2.get(closestParent) ?? defaultCommitPosition;\n      if (dir2 === \"TB\") {\n        return parentPosition.y + COMMIT_STEP;\n      } else if (dir2 === \"BT\") {\n        const currentPosition = commitPos2.get(commit2.id) ?? defaultCommitPosition;\n        return currentPosition.y - COMMIT_STEP;\n      } else {\n        return parentPosition.x + COMMIT_STEP;\n      }\n    }\n  } else {\n    if (dir2 === \"TB\") {\n      return defaultPos;\n    } else if (dir2 === \"BT\") {\n      const currentPosition = commitPos2.get(commit2.id) ?? defaultCommitPosition;\n      return currentPosition.y - COMMIT_STEP;\n    } else {\n      return 0;\n    }\n  }\n  return 0;\n}, \"calculatePosition\");\nvar getCommitPosition = /* @__PURE__ */ __name((commit2, pos, isParallelCommits) => {\n  const posWithOffset = dir === \"BT\" && isParallelCommits ? pos : pos + LAYOUT_OFFSET;\n  const y = dir === \"TB\" || dir === \"BT\" ? posWithOffset : branchPos.get(commit2.branch)?.pos;\n  const x = dir === \"TB\" || dir === \"BT\" ? branchPos.get(commit2.branch)?.pos : posWithOffset;\n  if (x === void 0 || y === void 0) {\n    throw new Error(`Position were undefined for commit ${commit2.id}`);\n  }\n  return { x, y, posWithOffset };\n}, \"getCommitPosition\");\nvar drawCommits = /* @__PURE__ */ __name((svg, commits, modifyGraph) => {\n  if (!DEFAULT_GITGRAPH_CONFIG2) {\n    throw new Error(\"GitGraph config not found\");\n  }\n  const gBullets = svg.append(\"g\").attr(\"class\", \"commit-bullets\");\n  const gLabels = svg.append(\"g\").attr(\"class\", \"commit-labels\");\n  let pos = dir === \"TB\" || dir === \"BT\" ? defaultPos : 0;\n  const keys = [...commits.keys()];\n  const isParallelCommits = DEFAULT_GITGRAPH_CONFIG2?.parallelCommits ?? false;\n  const sortKeys = /* @__PURE__ */ __name((a, b) => {\n    const seqA = commits.get(a)?.seq;\n    const seqB = commits.get(b)?.seq;\n    return seqA !== void 0 && seqB !== void 0 ? seqA - seqB : 0;\n  }, \"sortKeys\");\n  let sortedKeys = keys.sort(sortKeys);\n  if (dir === \"BT\") {\n    if (isParallelCommits) {\n      setParallelBTPos(sortedKeys, commits, pos);\n    }\n    sortedKeys = sortedKeys.reverse();\n  }\n  sortedKeys.forEach((key) => {\n    const commit2 = commits.get(key);\n    if (!commit2) {\n      throw new Error(`Commit not found for key ${key}`);\n    }\n    if (isParallelCommits) {\n      pos = calculatePosition(commit2, dir, pos, commitPos);\n    }\n    const commitPosition = getCommitPosition(commit2, pos, isParallelCommits);\n    if (modifyGraph) {\n      const typeClass = getCommitClassType(commit2);\n      const commitSymbolType = commit2.customType ?? commit2.type;\n      const branchIndex = branchPos.get(commit2.branch)?.index ?? 0;\n      drawCommitBullet(gBullets, commit2, commitPosition, typeClass, branchIndex, commitSymbolType);\n      drawCommitLabel(gLabels, commit2, commitPosition, pos);\n      drawCommitTags(gLabels, commit2, commitPosition, pos);\n    }\n    if (dir === \"TB\" || dir === \"BT\") {\n      commitPos.set(commit2.id, { x: commitPosition.x, y: commitPosition.posWithOffset });\n    } else {\n      commitPos.set(commit2.id, { x: commitPosition.posWithOffset, y: commitPosition.y });\n    }\n    pos = dir === \"BT\" && isParallelCommits ? pos + COMMIT_STEP : pos + COMMIT_STEP + LAYOUT_OFFSET;\n    if (pos > maxPos) {\n      maxPos = pos;\n    }\n  });\n}, \"drawCommits\");\nvar shouldRerouteArrow = /* @__PURE__ */ __name((commitA, commitB, p1, p2, allCommits) => {\n  const commitBIsFurthest = dir === \"TB\" || dir === \"BT\" ? p1.x < p2.x : p1.y < p2.y;\n  const branchToGetCurve = commitBIsFurthest ? commitB.branch : commitA.branch;\n  const isOnBranchToGetCurve = /* @__PURE__ */ __name((x) => x.branch === branchToGetCurve, \"isOnBranchToGetCurve\");\n  const isBetweenCommits = /* @__PURE__ */ __name((x) => x.seq > commitA.seq && x.seq < commitB.seq, \"isBetweenCommits\");\n  return [...allCommits.values()].some((commitX) => {\n    return isBetweenCommits(commitX) && isOnBranchToGetCurve(commitX);\n  });\n}, \"shouldRerouteArrow\");\nvar findLane = /* @__PURE__ */ __name((y1, y2, depth = 0) => {\n  const candidate = y1 + Math.abs(y1 - y2) / 2;\n  if (depth > 5) {\n    return candidate;\n  }\n  const ok = lanes.every((lane) => Math.abs(lane - candidate) >= 10);\n  if (ok) {\n    lanes.push(candidate);\n    return candidate;\n  }\n  const diff = Math.abs(y1 - y2);\n  return findLane(y1, y2 - diff / 5, depth + 1);\n}, \"findLane\");\nvar drawArrow = /* @__PURE__ */ __name((svg, commitA, commitB, allCommits) => {\n  const p1 = commitPos.get(commitA.id);\n  const p2 = commitPos.get(commitB.id);\n  if (p1 === void 0 || p2 === void 0) {\n    throw new Error(`Commit positions not found for commits ${commitA.id} and ${commitB.id}`);\n  }\n  const arrowNeedsRerouting = shouldRerouteArrow(commitA, commitB, p1, p2, allCommits);\n  let arc = \"\";\n  let arc2 = \"\";\n  let radius = 0;\n  let offset = 0;\n  let colorClassNum = branchPos.get(commitB.branch)?.index;\n  if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n    colorClassNum = branchPos.get(commitA.branch)?.index;\n  }\n  let lineDef;\n  if (arrowNeedsRerouting) {\n    arc = \"A 10 10, 0, 0, 0,\";\n    arc2 = \"A 10 10, 0, 0, 1,\";\n    radius = 10;\n    offset = 10;\n    const lineY = p1.y < p2.y ? findLane(p1.y, p2.y) : findLane(p2.y, p1.y);\n    const lineX = p1.x < p2.x ? findLane(p1.x, p2.x) : findLane(p2.x, p1.x);\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX - radius} ${p1.y} ${arc2} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc} ${lineX + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX + radius} ${p1.y} ${arc} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc2} ${lineX - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      }\n    } else if (dir === \"BT\") {\n      if (p1.x < p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX - radius} ${p1.y} ${arc} ${lineX} ${p1.y - offset} L ${lineX} ${p2.y + radius} ${arc2} ${lineX + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX + radius} ${p1.y} ${arc2} ${lineX} ${p1.y - offset} L ${lineX} ${p2.y + radius} ${arc} ${lineX - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY - radius} ${arc} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc2} ${p2.x} ${lineY + offset} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos.get(commitA.branch)?.index;\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY + radius} ${arc2} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc} ${p2.x} ${lineY - offset} L ${p2.x} ${p2.y}`;\n      }\n    }\n  } else {\n    arc = \"A 20 20, 0, 0, 0,\";\n    arc2 = \"A 20 20, 0, 0, 1,\";\n    radius = 20;\n    offset = 20;\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x > p2.x) {\n        arc = \"A 20 20, 0, 0, 0,\";\n        arc2 = \"A 20 20, 0, 0, 1,\";\n        radius = 20;\n        offset = 20;\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc2} ${p1.x - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x + radius} ${p1.y} ${arc} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x === p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    } else if (dir === \"BT\") {\n      if (p1.x < p2.x) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc2} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x > p2.x) {\n        arc = \"A 20 20, 0, 0, 0,\";\n        arc2 = \"A 20 20, 0, 0, 1,\";\n        radius = 20;\n        offset = 20;\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc} ${p1.x - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x === p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y > p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc2} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y === p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    }\n  }\n  if (lineDef === void 0) {\n    throw new Error(\"Line definition not found\");\n  }\n  svg.append(\"path\").attr(\"d\", lineDef).attr(\"class\", \"arrow arrow\" + colorClassNum % THEME_COLOR_LIMIT);\n}, \"drawArrow\");\nvar drawArrows = /* @__PURE__ */ __name((svg, commits) => {\n  const gArrows = svg.append(\"g\").attr(\"class\", \"commit-arrows\");\n  [...commits.keys()].forEach((key) => {\n    const commit2 = commits.get(key);\n    if (commit2.parents && commit2.parents.length > 0) {\n      commit2.parents.forEach((parent) => {\n        drawArrow(gArrows, commits.get(parent), commit2, commits);\n      });\n    }\n  });\n}, \"drawArrows\");\nvar drawBranches = /* @__PURE__ */ __name((svg, branches) => {\n  const g = svg.append(\"g\");\n  branches.forEach((branch2, index) => {\n    const adjustIndexForTheme = index % THEME_COLOR_LIMIT;\n    const pos = branchPos.get(branch2.name)?.pos;\n    if (pos === void 0) {\n      throw new Error(`Position not found for branch ${branch2.name}`);\n    }\n    const line = g.append(\"line\");\n    line.attr(\"x1\", 0);\n    line.attr(\"y1\", pos);\n    line.attr(\"x2\", maxPos);\n    line.attr(\"y2\", pos);\n    line.attr(\"class\", \"branch branch\" + adjustIndexForTheme);\n    if (dir === \"TB\") {\n      line.attr(\"y1\", defaultPos);\n      line.attr(\"x1\", pos);\n      line.attr(\"y2\", maxPos);\n      line.attr(\"x2\", pos);\n    } else if (dir === \"BT\") {\n      line.attr(\"y1\", maxPos);\n      line.attr(\"x1\", pos);\n      line.attr(\"y2\", defaultPos);\n      line.attr(\"x2\", pos);\n    }\n    lanes.push(pos);\n    const name = branch2.name;\n    const labelElement = drawText(name);\n    const bkg = g.insert(\"rect\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\" + adjustIndexForTheme);\n    label.node().appendChild(labelElement);\n    const bbox = labelElement.getBBox();\n    bkg.attr(\"class\", \"branchLabelBkg label\" + adjustIndexForTheme).attr(\"rx\", 4).attr(\"ry\", 4).attr(\"x\", -bbox.width - 4 - (DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel === true ? 30 : 0)).attr(\"y\", -bbox.height / 2 + 8).attr(\"width\", bbox.width + 18).attr(\"height\", bbox.height + 4);\n    label.attr(\n      \"transform\",\n      \"translate(\" + (-bbox.width - 14 - (DEFAULT_GITGRAPH_CONFIG2?.rotateCommitLabel === true ? 30 : 0)) + \", \" + (pos - bbox.height / 2 - 1) + \")\"\n    );\n    if (dir === \"TB\") {\n      bkg.attr(\"x\", pos - bbox.width / 2 - 10).attr(\"y\", 0);\n      label.attr(\"transform\", \"translate(\" + (pos - bbox.width / 2 - 5) + \", 0)\");\n    } else if (dir === \"BT\") {\n      bkg.attr(\"x\", pos - bbox.width / 2 - 10).attr(\"y\", maxPos);\n      label.attr(\"transform\", \"translate(\" + (pos - bbox.width / 2 - 5) + \", \" + maxPos + \")\");\n    } else {\n      bkg.attr(\"transform\", \"translate(-19, \" + (pos - bbox.height / 2) + \")\");\n    }\n  });\n}, \"drawBranches\");\nvar setBranchPosition = /* @__PURE__ */ __name(function(name, pos, index, bbox, rotateCommitLabel) {\n  branchPos.set(name, { pos, index });\n  pos += 50 + (rotateCommitLabel ? 40 : 0) + (dir === \"TB\" || dir === \"BT\" ? bbox.width / 2 : 0);\n  return pos;\n}, \"setBranchPosition\");\nvar draw = /* @__PURE__ */ __name(function(txt, id, ver, diagObj) {\n  clear3();\n  log.debug(\"in gitgraph renderer\", txt + \"\\n\", \"id:\", id, ver);\n  if (!DEFAULT_GITGRAPH_CONFIG2) {\n    throw new Error(\"GitGraph config not found\");\n  }\n  const rotateCommitLabel = DEFAULT_GITGRAPH_CONFIG2.rotateCommitLabel ?? false;\n  const db2 = diagObj.db;\n  allCommitsDict = db2.getCommits();\n  const branches = db2.getBranchesAsObjArray();\n  dir = db2.getDirection();\n  const diagram2 = select(`[id=\"${id}\"]`);\n  let pos = 0;\n  branches.forEach((branch2, index) => {\n    const labelElement = drawText(branch2.name);\n    const g = diagram2.append(\"g\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\");\n    label.node()?.appendChild(labelElement);\n    const bbox = labelElement.getBBox();\n    pos = setBranchPosition(branch2.name, pos, index, bbox, rotateCommitLabel);\n    label.remove();\n    branchLabel.remove();\n    g.remove();\n  });\n  drawCommits(diagram2, allCommitsDict, false);\n  if (DEFAULT_GITGRAPH_CONFIG2.showBranches) {\n    drawBranches(diagram2, branches);\n  }\n  drawArrows(diagram2, allCommitsDict);\n  drawCommits(diagram2, allCommitsDict, true);\n  utils_default.insertTitle(\n    diagram2,\n    \"gitTitleText\",\n    DEFAULT_GITGRAPH_CONFIG2.titleTopMargin ?? 0,\n    db2.getDiagramTitle()\n  );\n  setupGraphViewbox(\n    void 0,\n    diagram2,\n    DEFAULT_GITGRAPH_CONFIG2.diagramPadding,\n    DEFAULT_GITGRAPH_CONFIG2.useMaxWidth\n  );\n}, \"draw\");\nvar gitGraphRenderer_default = {\n  draw\n};\nif (void 0) {\n  const { it, expect, describe } = void 0;\n  describe(\"drawText\", () => {\n    it(\"should drawText\", () => {\n      const svgLabel = drawText(\"main\");\n      expect(svgLabel).toBeDefined();\n      expect(svgLabel.children[0].innerHTML).toBe(\"main\");\n    });\n  });\n  describe(\"branchPosition\", () => {\n    const bbox = {\n      x: 0,\n      y: 0,\n      width: 10,\n      height: 10,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      toJSON: /* @__PURE__ */ __name(() => \"\", \"toJSON\")\n    };\n    it(\"should setBranchPositions LR with two branches\", () => {\n      dir = \"LR\";\n      const pos = setBranchPosition(\"main\", 0, 0, bbox, true);\n      expect(pos).toBe(90);\n      expect(branchPos.get(\"main\")).toEqual({ pos: 0, index: 0 });\n      const posNext = setBranchPosition(\"develop\", pos, 1, bbox, true);\n      expect(posNext).toBe(180);\n      expect(branchPos.get(\"develop\")).toEqual({ pos, index: 1 });\n    });\n    it(\"should setBranchPositions TB with two branches\", () => {\n      dir = \"TB\";\n      bbox.width = 34.9921875;\n      const pos = setBranchPosition(\"main\", 0, 0, bbox, true);\n      expect(pos).toBe(107.49609375);\n      expect(branchPos.get(\"main\")).toEqual({ pos: 0, index: 0 });\n      bbox.width = 56.421875;\n      const posNext = setBranchPosition(\"develop\", pos, 1, bbox, true);\n      expect(posNext).toBe(225.70703125);\n      expect(branchPos.get(\"develop\")).toEqual({ pos, index: 1 });\n    });\n  });\n  describe(\"commitPosition\", () => {\n    const commits = /* @__PURE__ */ new Map([\n      [\n        \"commitZero\",\n        {\n          id: \"ZERO\",\n          message: \"\",\n          seq: 0,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"commitA\",\n        {\n          id: \"A\",\n          message: \"\",\n          seq: 1,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"ZERO\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"commitB\",\n        {\n          id: \"B\",\n          message: \"\",\n          seq: 2,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"A\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"commitM\",\n        {\n          id: \"M\",\n          message: \"merged branch feature into main\",\n          seq: 3,\n          type: commitType.MERGE,\n          tags: [],\n          parents: [\"ZERO\", \"B\"],\n          branch: \"main\",\n          customId: true\n        }\n      ],\n      [\n        \"commitC\",\n        {\n          id: \"C\",\n          message: \"\",\n          seq: 4,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"ZERO\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commit5_8928ea0\",\n        {\n          id: \"5-8928ea0\",\n          message: \"cherry-picked [object Object] into release\",\n          seq: 5,\n          type: commitType.CHERRY_PICK,\n          tags: [],\n          parents: [\"C\", \"M\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commitD\",\n        {\n          id: \"D\",\n          message: \"\",\n          seq: 6,\n          type: commitType.NORMAL,\n          tags: [],\n          parents: [\"5-8928ea0\"],\n          branch: \"release\"\n        }\n      ],\n      [\n        \"commit7_ed848ba\",\n        {\n          id: \"7-ed848ba\",\n          message: \"cherry-picked [object Object] into release\",\n          seq: 7,\n          type: commitType.CHERRY_PICK,\n          tags: [],\n          parents: [\"D\", \"M\"],\n          branch: \"release\"\n        }\n      ]\n    ]);\n    let pos = 0;\n    branchPos.set(\"main\", { pos: 0, index: 0 });\n    branchPos.set(\"feature\", { pos: 107.49609375, index: 1 });\n    branchPos.set(\"release\", { pos: 224.03515625, index: 2 });\n    describe(\"TB\", () => {\n      pos = 30;\n      dir = \"TB\";\n      const expectedCommitPositionTB = /* @__PURE__ */ new Map([\n        [\"commitZero\", { x: 0, y: 40, posWithOffset: 40 }],\n        [\"commitA\", { x: 107.49609375, y: 90, posWithOffset: 90 }],\n        [\"commitB\", { x: 107.49609375, y: 140, posWithOffset: 140 }],\n        [\"commitM\", { x: 0, y: 190, posWithOffset: 190 }],\n        [\"commitC\", { x: 224.03515625, y: 240, posWithOffset: 240 }],\n        [\"commit5_8928ea0\", { x: 224.03515625, y: 290, posWithOffset: 290 }],\n        [\"commitD\", { x: 224.03515625, y: 340, posWithOffset: 340 }],\n        [\"commit7_ed848ba\", { x: 224.03515625, y: 390, posWithOffset: 390 }]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct position for commit ${key}`, () => {\n          const position = getCommitPosition(commit2, pos, false);\n          expect(position).toEqual(expectedCommitPositionTB.get(key));\n          pos += 50;\n        });\n      });\n    });\n    describe(\"LR\", () => {\n      let pos2 = 30;\n      dir = \"LR\";\n      const expectedCommitPositionLR = /* @__PURE__ */ new Map([\n        [\"commitZero\", { x: 0, y: 40, posWithOffset: 40 }],\n        [\"commitA\", { x: 107.49609375, y: 90, posWithOffset: 90 }],\n        [\"commitB\", { x: 107.49609375, y: 140, posWithOffset: 140 }],\n        [\"commitM\", { x: 0, y: 190, posWithOffset: 190 }],\n        [\"commitC\", { x: 224.03515625, y: 240, posWithOffset: 240 }],\n        [\"commit5_8928ea0\", { x: 224.03515625, y: 290, posWithOffset: 290 }],\n        [\"commitD\", { x: 224.03515625, y: 340, posWithOffset: 340 }],\n        [\"commit7_ed848ba\", { x: 224.03515625, y: 390, posWithOffset: 390 }]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct position for commit ${key}`, () => {\n          const position = getCommitPosition(commit2, pos2, false);\n          expect(position).toEqual(expectedCommitPositionLR.get(key));\n          pos2 += 50;\n        });\n      });\n    });\n    describe(\"getCommitClassType\", () => {\n      const expectedCommitClassType = /* @__PURE__ */ new Map([\n        [\"commitZero\", \"commit-normal\"],\n        [\"commitA\", \"commit-normal\"],\n        [\"commitB\", \"commit-normal\"],\n        [\"commitM\", \"commit-merge\"],\n        [\"commitC\", \"commit-normal\"],\n        [\"commit5_8928ea0\", \"commit-cherry-pick\"],\n        [\"commitD\", \"commit-normal\"],\n        [\"commit7_ed848ba\", \"commit-cherry-pick\"]\n      ]);\n      commits.forEach((commit2, key) => {\n        it(`should give the correct class type for commit ${key}`, () => {\n          const classType = getCommitClassType(commit2);\n          expect(classType).toBe(expectedCommitClassType.get(key));\n        });\n      });\n    });\n  });\n  describe(\"building BT parallel commit diagram\", () => {\n    const commits = /* @__PURE__ */ new Map([\n      [\n        \"1-abcdefg\",\n        {\n          id: \"1-abcdefg\",\n          message: \"\",\n          seq: 0,\n          type: 0,\n          tags: [],\n          parents: [],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"2-abcdefg\",\n        {\n          id: \"2-abcdefg\",\n          message: \"\",\n          seq: 1,\n          type: 0,\n          tags: [],\n          parents: [\"1-abcdefg\"],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"3-abcdefg\",\n        {\n          id: \"3-abcdefg\",\n          message: \"\",\n          seq: 2,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"develop\"\n        }\n      ],\n      [\n        \"4-abcdefg\",\n        {\n          id: \"4-abcdefg\",\n          message: \"\",\n          seq: 3,\n          type: 0,\n          tags: [],\n          parents: [\"3-abcdefg\"],\n          branch: \"develop\"\n        }\n      ],\n      [\n        \"5-abcdefg\",\n        {\n          id: \"5-abcdefg\",\n          message: \"\",\n          seq: 4,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"6-abcdefg\",\n        {\n          id: \"6-abcdefg\",\n          message: \"\",\n          seq: 5,\n          type: 0,\n          tags: [],\n          parents: [\"5-abcdefg\"],\n          branch: \"feature\"\n        }\n      ],\n      [\n        \"7-abcdefg\",\n        {\n          id: \"7-abcdefg\",\n          message: \"\",\n          seq: 6,\n          type: 0,\n          tags: [],\n          parents: [\"2-abcdefg\"],\n          branch: \"main\"\n        }\n      ],\n      [\n        \"8-abcdefg\",\n        {\n          id: \"8-abcdefg\",\n          message: \"\",\n          seq: 7,\n          type: 0,\n          tags: [],\n          parents: [\"7-abcdefg\"],\n          branch: \"main\"\n        }\n      ]\n    ]);\n    const expectedCommitPosition = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", { x: 0, y: 40 }],\n      [\"2-abcdefg\", { x: 0, y: 90 }],\n      [\"3-abcdefg\", { x: 107.49609375, y: 140 }],\n      [\"4-abcdefg\", { x: 107.49609375, y: 190 }],\n      [\"5-abcdefg\", { x: 225.70703125, y: 140 }],\n      [\"6-abcdefg\", { x: 225.70703125, y: 190 }],\n      [\"7-abcdefg\", { x: 0, y: 140 }],\n      [\"8-abcdefg\", { x: 0, y: 190 }]\n    ]);\n    const expectedCommitPositionAfterParallel = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", { x: 0, y: 210 }],\n      [\"2-abcdefg\", { x: 0, y: 160 }],\n      [\"3-abcdefg\", { x: 107.49609375, y: 110 }],\n      [\"4-abcdefg\", { x: 107.49609375, y: 60 }],\n      [\"5-abcdefg\", { x: 225.70703125, y: 110 }],\n      [\"6-abcdefg\", { x: 225.70703125, y: 60 }],\n      [\"7-abcdefg\", { x: 0, y: 110 }],\n      [\"8-abcdefg\", { x: 0, y: 60 }]\n    ]);\n    const expectedCommitCurrentPosition = /* @__PURE__ */ new Map([\n      [\"1-abcdefg\", 30],\n      [\"2-abcdefg\", 80],\n      [\"3-abcdefg\", 130],\n      [\"4-abcdefg\", 180],\n      [\"5-abcdefg\", 130],\n      [\"6-abcdefg\", 180],\n      [\"7-abcdefg\", 130],\n      [\"8-abcdefg\", 180]\n    ]);\n    const sortedKeys = [...expectedCommitPosition.keys()];\n    it(\"should get the correct commit position and current position\", () => {\n      dir = \"BT\";\n      let curPos = 30;\n      commitPos.clear();\n      branchPos.clear();\n      branchPos.set(\"main\", { pos: 0, index: 0 });\n      branchPos.set(\"develop\", { pos: 107.49609375, index: 1 });\n      branchPos.set(\"feature\", { pos: 225.70703125, index: 2 });\n      DEFAULT_GITGRAPH_CONFIG2.parallelCommits = true;\n      commits.forEach((commit2, key) => {\n        if (commit2.parents.length > 0) {\n          curPos = calculateCommitPosition(commit2);\n        }\n        const position = setCommitPosition(commit2, curPos);\n        expect(position).toEqual(expectedCommitPosition.get(key));\n        expect(curPos).toEqual(expectedCommitCurrentPosition.get(key));\n      });\n    });\n    it(\"should get the correct commit position after parallel commits\", () => {\n      commitPos.clear();\n      branchPos.clear();\n      dir = \"BT\";\n      const curPos = 30;\n      commitPos.clear();\n      branchPos.clear();\n      branchPos.set(\"main\", { pos: 0, index: 0 });\n      branchPos.set(\"develop\", { pos: 107.49609375, index: 1 });\n      branchPos.set(\"feature\", { pos: 225.70703125, index: 2 });\n      setParallelBTPos(sortedKeys, commits, curPos);\n      sortedKeys.forEach((commit2) => {\n        const position = commitPos.get(commit2);\n        expect(position).toEqual(expectedCommitPositionAfterParallel.get(commit2));\n      });\n    });\n  });\n  DEFAULT_GITGRAPH_CONFIG2.parallelCommits = false;\n  it(\"add\", () => {\n    commitPos.set(\"parent1\", { x: 1, y: 1 });\n    commitPos.set(\"parent2\", { x: 2, y: 2 });\n    commitPos.set(\"parent3\", { x: 3, y: 3 });\n    dir = \"LR\";\n    const parents = [\"parent1\", \"parent2\", \"parent3\"];\n    const closestParent = findClosestParent(parents);\n    expect(closestParent).toBe(\"parent3\");\n    commitPos.clear();\n  });\n}\n\n// src/diagrams/git/styles.js\nvar getStyles = /* @__PURE__ */ __name((options) => `\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0, 1, 2, 3, 4, 5, 6, 7].map(\n  (i) => `\n        .branch-label${i} { fill: ${options[\"gitBranchLabel\" + i]}; }\n        .commit${i} { stroke: ${options[\"git\" + i]}; fill: ${options[\"git\" + i]}; }\n        .commit-highlight${i} { stroke: ${options[\"gitInv\" + i]}; fill: ${options[\"gitInv\" + i]}; }\n        .label${i}  { fill: ${options[\"git\" + i]}; }\n        .arrow${i} { stroke: ${options[\"git\" + i]}; }\n        `\n).join(\"\\n\")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${options.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelColor};}\n  .commit-label-bkg { font-size: ${options.commitLabelFontSize}; fill: ${options.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${options.tagLabelFontSize}; fill: ${options.tagLabelColor};}\n  .tag-label-bkg { fill: ${options.tagLabelBackground}; stroke: ${options.tagLabelBorder}; }\n  .tag-hole { fill: ${options.textColor}; }\n\n  .commit-merge {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${options.primaryColor};\n    fill: ${options.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`, \"getStyles\");\nvar styles_default = getStyles;\n\n// src/diagrams/git/gitGraphDiagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer: gitGraphRenderer_default,\n  styles: styles_default\n};\nexport {\n  diagram\n};\n"],"names":["populateCommonDb","ast","db","_db$setAccDescription","_db$setAccTitle","_db$setDiagramTitle","accDescr","setAccDescription","call","accTitle","setAccTitle","title","setDiagramTitle","__name","ImperativeState","_class","init","_classCallCheck","this","records","_createClass","key","value","commitType","NORMAL","REVERSE","HIGHLIGHT","MERGE","CHERRY_PICK","DEFAULT_GITGRAPH_CONFIG","defaultConfig_default","gitGraph","getConfig3","cleanAndMerge","_objectSpread","getConfig","state","config","mainBranchName","mainBranchOrder","commits","Map","head","branchConfig","name","order","branches","currBranch","direction","seq","options","getID","random","length","uniqBy","list","fn","recordMap","Object","create","reduce","out","item","push","setDirection","dir2","setOptions","rawOptString","_rawOptString","log","debug","trim","JSON","parse","e","error","message","getOptions","commit","commitDB","_tags","_tags2","msg","id","type","tags","info","common_default","sanitizeText","map","tag","newCommit","parents","branch","has","warn","concat","set","branchDB","Error","checkout","merge","mergeDB","otherBranch","customId","overrideType","customTags","currentBranchCheck","get","otherBranchCheck","currentCommit","otherCommit","hash","text","token","expected","join","verifiedBranch","commit2","customType","cherryPick","cherryPickDB","_tags3","sourceId","targetId","parentCommitId","parent","sourceCommit","Array","isArray","includes","sourceCommitBranch","currentCommitId","filter","Boolean","branch2","_state$records$commit","upsert","arr","newVal","index","indexOf","splice","prettyPrintCommitHistory","commitArr","commit3","line","forEach","c","label","prettyPrint","getCommitsArray","clear2","reset","clear","getBranchesAsObjArray","_toConsumableArray","values","i","parseFloat","sort","a","b","_a$order","_b$order","_ref","getBranches","getCommits","o","getCurrentBranch","getDirection","getHead","getAccTitle","getAccDescription","getDiagramTitle","populate","db2","dir","_step","_iterator","_createForOfIteratorHelper","statements","s","n","done","statement","parseStatement","err","f","parser2","Commit","stmt","parseCommit","Branch","parseBranch","Merge","parseMerge","Checkout","parseCheckout","CherryPicking","parseCherryPicking","$type","_commit2$message","_commit2$tags","_branch2$order","merge2","_merge2$id","_merge2$tags","checkout2","cherryPicking","_cherryPicking$tags","parser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","input","wrap","_context","prev","next","sent","stop","_x","apply","arguments","DEFAULT_CONFIG","getConfig2","DEFAULT_GITGRAPH_CONFIG2","LAYOUT_OFFSET","COMMIT_STEP","branchPos","commitPos","allCommitsDict","lanes","maxPos","clear3","drawText","txt","svgLabel","document","createElementNS","split","row","tspan","setAttributeNS","setAttribute","textContent","appendChild","findClosestParent","closestParent","comparisonFunc","targetPosition","Infinity","_commitPos$get","_commitPos$get2","parentPosition","y","x","findClosestParentBT","maxPosition","setParallelBTPos","sortedKeys","defaultPos2","curPos","roots","calculateCommitPosition","Math","max","setCommitPosition","setRootPosition","pos","findClosestParentPos","_commitPos$get3","p","closestParentPos","drawCommitBullet","gBullets","commitPosition","typeClass","branchIndex","commitSymbolType","append","attr","circle","circle2","drawCommitLabel","gLabels","showCommitLabel","_text$node","wrapper","labelBkg","insert","bbox","node","getBBox","posWithOffset","width","height","rotateCommitLabel","r_x","r_y","drawCommitTags","_step2","yOffset","maxTagBboxWidth","maxTagBboxHeight","tagElements","_iterator2","reverse","_tag$node","tagValue","rect","hole","tagBbox","_i","_tagElements","_tagElements$_i","yOffset2","h2","ly","PX","yOrigin","getCommitClassType","_commit2$customType","calculatePosition","commitPos2","_commitPos2$get3","defaultCommitPosition","_commitPos2$get","_commitPos2$get2","getCommitPosition","isParallelCommits","_branchPos$get","_branchPos$get2","drawCommits","svg","modifyGraph","_DEFAULT_GITGRAPH_CON","keys","parallelCommits","sortKeys","_commits$get","_commits$get2","seqA","seqB","_commit2$customType2","_branchPos$get$index","_branchPos$get3","shouldRerouteArrow","commitA","commitB","p1","p2","allCommits","branchToGetCurve","isOnBranchToGetCurve","isBetweenCommits","some","commitX","findLane","y1","y2","depth","undefined","candidate","abs","every","lane","diff","drawArrow","_branchPos$get4","_branchPos$get5","lineDef","arrowNeedsRerouting","arc","arc2","radius","offset","colorClassNum","_branchPos$get6","lineY","lineX","_branchPos$get7","_branchPos$get8","drawArrows","gArrows","drawBranches","g","_branchPos$get9","adjustIndexForTheme","labelElement","bkg","setBranchPosition","diagram","renderer","draw","ver","diagObj","_DEFAULT_GITGRAPH_CON2","_DEFAULT_GITGRAPH_CON3","diagram2","select","_label$node","branchLabel","remove","showBranches","utils_default","insertTitle","titleTopMargin","setupGraphViewbox","diagramPadding","useMaxWidth","styles","lineColor","commitLabelFontSize","commitLabelColor","commitLabelBackground","tagLabelFontSize","tagLabelColor","tagLabelBackground","tagLabelBorder","textColor","primaryColor"],"sourceRoot":""}