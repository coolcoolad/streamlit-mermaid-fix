{"version":3,"file":"static/js/644.dd311c29.chunk.js","mappings":"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","sources":["../node_modules/mermaid/dist/chunks/mermaid.core/stateDiagram-FKZM4ZOC.mjs"],"sourcesContent":["import {\n  StateDB,\n  stateDiagram_default,\n  styles_default\n} from \"./chunk-DI55MBZ5.mjs\";\nimport \"./chunk-55IACEB6.mjs\";\nimport \"./chunk-QN33PNHL.mjs\";\nimport \"./chunk-N4CR4FBY.mjs\";\nimport \"./chunk-QXUST7PY.mjs\";\nimport \"./chunk-HN2XXSSU.mjs\";\nimport \"./chunk-JZLCHNYA.mjs\";\nimport \"./chunk-CVBHYZKI.mjs\";\nimport \"./chunk-ATLVNIR6.mjs\";\nimport \"./chunk-JA3XYJ7Z.mjs\";\nimport {\n  utils_default\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  common_default,\n  configureSvgSize,\n  getConfig2 as getConfig,\n  getUrl\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/diagrams/state/stateRenderer.js\nimport { select } from \"d3\";\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/diagrams/state/shapes.js\nimport { line, curveBasis } from \"d3\";\nvar drawStartState = /* @__PURE__ */ __name((g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit), \"drawStartState\");\nvar drawDivider = /* @__PURE__ */ __name((g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0), \"drawDivider\");\nvar drawSimpleState = /* @__PURE__ */ __name((g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n}, \"drawSimpleState\");\nvar drawDescrState = /* @__PURE__ */ __name((g, stateDef) => {\n  const addTspan = /* @__PURE__ */ __name(function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  }, \"addTspan\");\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n}, \"drawDescrState\");\nvar addTitleAndBox = /* @__PURE__ */ __name((g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc) {\n  }\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n}, \"addTitleAndBox\");\nvar drawEndState = /* @__PURE__ */ __name((g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n}, \"drawEndState\");\nvar drawForkJoinState = /* @__PURE__ */ __name((g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n}, \"drawForkJoinState\");\nvar _drawLongText = /* @__PURE__ */ __name((_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common_default.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n}, \"_drawLongText\");\nvar drawNote = /* @__PURE__ */ __name((text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n}, \"drawNote\");\nvar drawState = /* @__PURE__ */ __name(function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  return stateInfo;\n}, \"drawState\");\nvar edgeCount = 0;\nvar drawEdge = /* @__PURE__ */ __name(function(elem, path, relation) {\n  const getRelationType = /* @__PURE__ */ __name(function(type) {\n    switch (type) {\n      case StateDB.relationType.AGGREGATION:\n        return \"aggregation\";\n      case StateDB.relationType.EXTENSION:\n        return \"extension\";\n      case StateDB.relationType.COMPOSITION:\n        return \"composition\";\n      case StateDB.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  }, \"getRelationType\");\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = getUrl(true);\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(StateDB.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils_default.calcLabelPosition(path.points);\n    const rows = common_default.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundsTmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundsTmp.width);\n      minX = Math.min(minX, boundsTmp.x);\n      log.info(boundsTmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n}, \"drawEdge\");\n\n// src/diagrams/state/stateRenderer.js\nvar conf;\nvar transformationLog = {};\nvar setConf = /* @__PURE__ */ __name(function() {\n}, \"setConf\");\nvar insertMarkers = /* @__PURE__ */ __name(function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n}, \"insertMarkers\");\nvar draw = /* @__PURE__ */ __name(function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n}, \"draw\");\nvar getLabelWidth = /* @__PURE__ */ __name((text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n}, \"getLabelWidth\");\nvar renderDoc = /* @__PURE__ */ __name((doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys = Object.keys(states);\n  let first = true;\n  for (const key of keys) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      if (first) {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      } else {\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height;\n      }\n    } else {\n      node = drawState(diagram2, stateDef, graph);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef, graph);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common_default.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  dagreLayout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n}, \"renderDoc\");\nvar stateRenderer_default = {\n  setConf,\n  draw\n};\n\n// src/diagrams/state/stateDiagram.ts\nvar diagram = {\n  parser: stateDiagram_default,\n  get db() {\n    return new StateDB(1);\n  },\n  renderer: stateRenderer_default,\n  styles: styles_default,\n  init: /* @__PURE__ */ __name((cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n  }, \"init\")\n};\nexport {\n  diagram\n};\n"],"names":["conf","drawStartState","__name","g","append","attr","getConfig","state","sizeUnit","padding","drawDivider","style","textHeight","drawSimpleState","stateDef","fontSize","text","id","classBox","node","getBBox","insert","width","height","radius","drawDescrState","addTspan","textEl","txt","isFirst2","tSpan","titleBox","descriptions","titleHeight","description","dividerMargin","isFirst","isSecond","forEach","descr","descrLine","descrBox","Math","max","addTitleAndBox","altBkg","startX","pad","dblPad","orgBox","orgWidth","orgX","x","title","titleShift","titleWidth","graphBox","doc","abs","lineY","drawEndState","miniPadding","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","_drawLongText","_text","y","textElem","_step","replace","lines","split","common_default","lineBreakRegex","tHeight","noteMargin","_iterator","_createForOfIteratorHelper","s","n","done","value","trim","length","span","err","e","f","textWidth","drawNote","note","rectElem","_drawLongText2","drawState","elem","stateInfo","label","type","stateBox","edgeCount","drawEdge","path","relation","getRelationType","StateDB","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","points","filter","p","Number","isNaN","lineData","lineFunction","line","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","getUrl","_utils_default$calcLa","utils_default","calcLabelPosition","rows","getRows","titleRows","maxWidth","minX","i","boundsTmp","min","log","info","push","boxHeight","heightAdj","bounds","transformationLog","setConf","insertMarkers","draw","_version","diagObj","sandboxElement","securityLevel","select","root","nodes","contentDocument","body","document","debug","diagram2","concat","rootDoc","db","getRootDoc","renderDoc","svgWidth","configureSvgSize","useMaxWidth","getLabelWidth","fontSizeFactor","domDocument","graph","graphlib","compound","multigraph","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","states","getStates","relations","getRelations","_i","_keys","Object","keys","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","nodeCount","cnt","setEdge","id1","id2","labelHeight","labelpos","dagreLayout","svgElem","v","warn","JSON","stringify","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","setAttribute","edges","edge","w","stateRenderer_default","diagram","parser","stateDiagram_default","renderer","styles","styles_default","init","cnf"],"sourceRoot":""}